[{"title":"Android protobuf(.proto文件)","date":"2020-08-15T13:42:00.000Z","url":"/Blog/2020/08/15/2020/200815_android_protobuf/","tags":["android"],"categories":["android"],"content":" 最近碰到一个关于frameworks/base/core/proto/android/providers/settings/secure.proto文件中修改某个属性的问题，所以针对protobuf(.proto文件)进行一个学习了解。Google Protocol Buffers，（简称Protobuf，协议缓冲区），类似json或XML，Google开源的支持多语言、跨平台的结构化数据序列化项目，但是比它们更小、更快、更简单。Protobuf通过编写proto文件来定义消息格式或RPC服务定义。 proto模块介绍在Framework模块中有个单独的模块：frameworks/base/core/proto/ 查看该模块下的README.md和OWNDER文件有简单介绍。OWNER劝告开发人员需要熟悉该功能，谨慎修改。 README.md文件内容 Android其他版本中，使用四个空格缩进，而非两个 基于Java文件的protos文件，使用该Java文件相同名称的包。例如com.android.server.thing代替com.android.server.thing.proto 如果proto描述了dumpsys的顶级输出，他就应该包含dump。这样更容易理解他是作为某个服务的dump输出，而不是该服务的数据结构。例如WindowManagerServiceDumpProto和WindowManagerServiceProto 含有poroto后缀的message名称，他的内嵌的message的名称不需要有proto后缀，例如： 如果proto代表一个对象的结构，后缀应该要有proto。并且还请包含该原是对象的完整包路径，来作为对这个proto message的注释。 在字段中包含单位名字，例如：screen_time_ms VS screen_time, or file_size_bytes or file_size_mebibytes VS file_size 保留字段号50000-100000，供原始设备制造商使用。 编写proto文件范例helloworld.proto 代码在 helloworld.proto protobuf和其他编程语言的类型比较 字段编号字段编号是Protobuf的重要组成部分。它们用于标识二进制编码数据中的字段，这意味着它们不能从版本更改为服务版本。优点在于可以实现向后兼容性和向前兼容性。只要处理丢失值的可能性，客户端和服务就会忽略他们不知道的字段编号。 在二进制格式中，字段号与类型标识符组合在一起。1到15之间的字段编号可以使用其类型编码为单字节。从16到2047的数字需要2个字节。如果出于任何原因需要将超过2047个字段，则可以更高。字段号1到15的单字节标识符提供更好的性能，因此，你应将其用于最基本的常用字段。 限定符说明 限定符 说明 required 必须字段，必须设置该字段的值 optional 可选字段，有选择性的设置或者不设置该字段的值 repeated 表示该字段可以被重复任意多次包含 包package可以用指定package以避免类型命名冲突： 也可以用类型的全限定名来引用它： Note:指定包名后，会对生成的代码产生影响，以Java为例，生成的类会以你指定的package作为包名。 修改规则如果修改正在使用的proto文件，比如为类型增加一个字段，protobuf支持这种修改而不影响已有的服务，不过需要遵循一定的规则： 不改变已有字段的字段编号 当增加一个新的字段的时候，老系统序列化后的数据依然可以被新的格式所解析，只不过需要处理新加字段的缺省值。 字段也可以被移除，但是建议Reserved这个字段，避免将来会使用这个字段 int32, uint32, int64, uint64 和 bool类型都是兼容的 sint32 和 sint64兼容，但是不和其它整数类型兼容 string 和 bytes兼容，如果 bytes 是合法的UTF-8 bytes的话 嵌入类型和bytes兼容，如果bytes包含一个消息的编码版本的话 fixed32和sfixed32, fixed64和sfixed64 enum和int32, uint32, int64, uint64格式兼容 嵌套类型通过协议缓冲区（Protobuf）可以在其他消息中嵌套消息定义。 下面的示例演示如何创建嵌套消息类型： repeated修饰符如果一个字段被repeated修饰，则表示它是一个列表类型的字段，如下所示： 如果希望可以预留一些数字标签或者字段可以使用reserved修饰符： 保留字段reservedProtobuf中的向后兼容性保证依赖于始终表示相同数据项的字段编号。如果从服务新版本中的消息中删除了字段，则不应重复使用该字段编号。 可以使用reserved关键字强制执行此情况。 如果定义Stock的消息中删除某字段，则应保留其字段编号，如以下示例所示。 还可以将reserved关键字用作将来可能添加的字段的占位符。 您可以使用to关键字将连续字段数表示为范围。 Any和OneOf字段Protobuf提供了两个用于处理可能属于多个类型的值的更简单选项。 Any类型可以表示任何已知的Protobuf消息类型。 使用oneof关键字来指定在任何消息中只能设置一个字段范围中的一个字段。 Any是Protobuf的”已知类型”：一系列有用的可重复使用的消息类型，具有所有支持语言的实现。若要使用Any类型，必须导入google/protobuf/any.proto定义 Oneof是一项语言功能：编译器在生成message类时处理oneof关键字。使用oneof指定ChangeNotification消息可能如下所示： 在整个消息声明中，oneof集内的字段必须具有唯一的字段编号。 Note: 设置属于oneof集一部分的任何字段都将自动清除该集中的任何其他字段。不能将repeated与oneof一起使用。相反，可以创建包含重复字段或oneof集的嵌套消息，以解决此限制。 oneof块中的字段不支持repeated。 枚举上面使用枚举来确定Oneof字段的类型。可以定义自己的枚举类型，Protobuf将它们编译为C#（或者其他语言）枚举类型。 由于Protobuf可以用于各种语言，因此枚举的命名约定与C#约定不同。 但是，代码生成器将名称转换为传统的C#大小写。如果字段名称的Pascal大小写以枚举名称开头，则将其删除。 例如，在下面的Protobuf枚举中，字段用预缀为ACCOUNT_STATUS。 第一个枚举值的数值必须是0且至少有一个枚举值，否则编译报错。编译后编译器会为你生成对应语言的枚举类。 由于编码原因，出于效率考虑，官方不推荐使用负数作为枚举值的数值。 类型默认值 string类型的默认值是空字符串 bytes类型的默认值是空字节 bool类型的默认值是false 数字类型的默认值是0 enum类型的默认值是第一个定义的枚举值 message类型的默认值与语言相关 repeated修饰的字段默认值是空列表 import public的传递引用功能 从这个例子中可以看到import关键字导入的定义仅在当前文件有效，不能被上层使用方引用（client.proto无法使用other.proto中的定义） 而import public关键字导入的定义可以被上层使用方引用（client.proto可以使用new.proto中的定义），import public的功能可以看作是import的超集，在import的功能上还具有传递引用的作用。 option选项选项不对message的定义产生任何的效果，只会在一些特定的场景中起到作用： option java_package = &quot;com.example.foo&quot;; 编译器为以此作为生成的Java类的包名，如果没有该选项，则会以pb的package作为包名。 option java_multiple_files = true; 该选项为true时，生成的Java类将是包级别的，否则会在一个包装类中。 option optimize_for = CODE_SIZE; 该选项会对生成的类产生影响，作用是根据指定的选项对代码进行不同方面的优化。 int32 old_field = 6 [deprecated=true]; 把字段标为过时的。 protoBuf缺点Protbuf相比XML来说，主要优点是性能高。也有不足之处，功能简单，无法用来表示复杂的概念。 由于文本并不适合用来描述数据结构，所以Protobuf也不适合用来对基于文本的标记文档（如HTML建模。另外，由于XML具有某种程度上的自解释性，它可以被人直接读取编辑，在这一点上Protobuf以二进制的方式存储，除非有.proto定义，否则无法直接读出Protobuf的任何内容。 参考文献 Google官方文档 Protobuf Github项目文档地址 Protobuf 保留字段 在Golang中安装使用Protobuf Protobuf3学习笔记 "},{"title":"Android ANR基本Log分析","date":"2020-08-06T13:52:00.000Z","url":"/Blog/2020/08/06/2020/200806_android_ANR_BaseLog/","tags":["android","graphics","display"],"categories":["android"],"content":" ANR（Application Not Responding），字面意思是应用无响应，即用户的一些操作无法从应用中获取反馈。关于发生ANR的trace.txt文件的请参考Android ANR traces.txt文件分析 触发原因Android系统中的应用被Activity Manager及Window Manager两个系统服务监控着，Android系统会在如下情况触发ANR： Input事件超过5s没有被处理完，即5秒内无法对输入事件（按键及触摸）做出响应 Service处理超时，前台20s，后台200s BroadcastReceiver（广播接收器）处理超时，前台10S，后台60s ContentProvider执行超时，比较少见 出现ANR之后一个直观现象就是系统会展示出一个ANR弹框。 从发生的原因分： 主线程有耗时操作，如有复杂的layout布局，IO操作等。 被Binder对端block 被子线程同步锁block Binder被占满导致主线程无法和SystemServer通信 得不到系统资源（CPU/RAM/IO） 从进程的角度分： 问题出在当前进程: 主线程本身耗时, 或则主线程的消息队列存在耗时操作; 主线程被本进程的其他子线程所blocked; 问题出在远端进程(一般是binder call或socket等通信方式) 基本log解读 系统耗时分析方案系统做一些耗时分析的操作会有一些Log标志： binder_sample： 功能说明: 监控每个进程的主线程的binder transaction的耗时情况, 当超过阈值时,则输出相应的目标调用信息，默认1000ms打开。 log格式: 52004 binder_sample (descriptor|3),(method_num|1|5),(time|1|3),(blocking_package|3),(sample_percent|1|6) log实例: 2754 2754 I binder_sample: [android.app.IActivityManager,35,2900,android.process.media,5] 从上面的log中可以得出: 主线程2754; 执行android.app.IActivityManager接口 所对应方法code =35(即STOP_SERVICE_TRANSACTION), 所花费时间为2900ms 该block所在package为 android.process.media，最后一个参数是sample比例(没有太大价值) dvm_lock_sample 功能说明: 当某个线程等待lock的时间blocked超过阈值,则输出当前的持锁状态 ; log格式: 20003 dvm_lock_sample (process|3),(main|1|5),(thread|3),(time|1|3),(file|3),(line|1|5),(ownerfile|3),(ownerline|1|5),(sample_percent|1|6) 进程名，主线程？线程名，锁等待时间，下个持有者文件名，行号，上个持有者文件名（如果和下个相同，则是-），行号，等待百分比 log实例: dvm_lock_sample: [system_server,1,Binder_9,1500,ActivityManagerService.java,6403,-,1448,0] 意思是system_server: Binder_9,执行到ActivityManagerService.java的6403行代码,一直在等待AMS锁, 而该锁所同一文件的1448行代码所持有, 从而导致Binder_9线程被阻塞1500ms. binder starved 功能说明:当system_server等进程的线程池使用完, 无空闲线程时, 则binder通信都处于饥饿状态, 则饥饿状态超过一定阈值则输出信息; 云控参数: persist.sys.binder.starvation (默认值16ms) log实例: 1232 1232 &quot;binder thread pool (16 threads) starved for 100 ms&quot; 解析: system_server进程的 线程池已满的持续长达100ms kswapd0 CPU占用率很高如果出现kswapd0 cpu 占用率很高，可以先查看内存使用情况。 /proc/meminfo内存使用信息例如以下，可用内存只有62MB。 dumpsys meminfo直接dumpsys meminfo，是查看整体的内存占用情况，具体的还是需要加上process name。 参考 应用与系统稳定性第一篇—ANR问题分析的一般套路 Android应用ANR分析 android 查看内存使用情况 Android内存占用分析 "},{"title":"Android 图形显示框架","date":"2020-07-30T13:52:00.000Z","url":"/Blog/2020/07/30/2020/200730_android_GraphicsFramework/","tags":["android","graphics","display"],"categories":["android"],"content":" 本篇对Android图形显示框架做一个概述，内容主要包含：SurfaceSession创建和销毁（添加/删除窗口），Surface创建和销毁，BufferQueue创建，以及BufferQueue的dequeueBuffer和queueBuffer、acquire和release大致流程梳理。 显示框架概述Android与用户进行图形界面的交互，例如各个应用程序，他们的对话框、按钮、菜单等图形窗口。这些窗口的管理都是由WindowManager负责，窗口管理位于Java层，真正的实现者是运行在System_server进程空间中的WindowManagerService。 frameworks/base/services/java/com/android/server/SystemServer.java 应用程序负责修改绘制窗口中的内容，而WindowManager负责窗口的生命周期、几何属性、坐标变换信息、用户输入焦点、动画等功能。他还管理着窗口状态的变化，如窗口位置、大小、透明度以及Z-order（前后遮盖顺序）等一系列的逻辑判断。这些WindowManager功能由一系列接口或类构成，包括ViewManager、WindowManager、WindowManagerImpl、WindowManagerService等。 SurfaceFlinger负责分配应用程序所需的图形缓冲区，并对系统中的整个图形窗口进行composition（合成）。 最终，图形窗口会更新显示到Display显示器上。 显示过程的三个进程Android显示的整个过程由App进程、System_server进程、SurfaceFlinger进程一起配合完成。 App进程： App需要将自己的内容显示在屏幕上，所以需要负责发起Surface创建的请求。同时触发对控件的测量、布局、绘制以及输入事件的派发处理，这些主要在ViewRootImpl中触发； System_server进程： 主要是WindowManagerService，负责接收App请求，同时和SurfaceFlinger建立连接，向SurfaceFlinger发起具体请求创建Surface，并且创建Surace的辅助管理类SurfaceControl（和window一一对应）(AMS作用是统一调度所有App的Activity)； SurfaceFlinger： 为App创建具体的Surface，在SurfaceFLinger对应成Layer，然后负责管理、合成所有图层，最终显示。 Activity、Window、PhoneWindow、DecorView、View的对应关系 Window：每一个Activity都包含一个Window对象（抽象类，提供了绘制窗口的一组通用API），通常由PhoneWindow实现。 在Activity.java中定义：private Window mWindow; 一个Activity对应创建一个Surface PhoneWindow:继承于Window，是Window类的具体实现。该类内部包含了一个DecorView对象，该DecorView对象是所有应用窗口（Activity界面）的根View。 简而言之，PhoneWindow类是把一个FrameLayout类，即DecorView对象进行一定的包装，将他作为应用窗口的根View，并提供一组通用的窗口操作接口。 PhoneWindow是Android中最基本的窗口系统，每个Activity都会创建一个PhoneWindow对象，是Activity和整个View系统交互的接口。 在Activity.java的attach函数实例化：mWindow = new PhoneWindow(this, window, activityConfigCallback); DecorView：PhoneWindow构造函数中定义，继承FrameLayout类，是所有应用窗口的根View。 在PhoneWindow.java中定义，构造函数中初始化：private DecorView mDecor; 相关debug方法： adb shell dumpsys activity adb shell dumpsys window ![window包含关系]](phonewindow.png) Activity生命周期 Activity onResume添加窗口 onCreate方法中调用setContentView来设置布局，此时只是完成了View Tree的创建。此处参考HWUI绘制文章 真正通知WMS添加窗口，是在回调onResume完成的。 调用onResume的方法在ActivityThread.java中是handleResumeActivity。之后调用到WMS.java的addWindow。 App进程中完成添加窗口操作 当一个新窗口(Window)被创建的时候，在ActivityThread.java的handleResumeActivity中调用addView(),然后调用到WindowManagerImpl的addView()函数。 frameworks/base/core/java/android/view/WindowManagerImpl.java 这个函数将实际操作委托给mGlobal成员完成，这个成员随着WindowManagerImpl的创建而被初始化：private final WindowManagerGlobal mGlobal = WindowManagerGlobal.getInstance(); WindowManagerGlobal是一个单例模式，即一个进程中最多仅有一个WindowManagerGlobal实例。 调用mGlobal的addView函数后，将会创建一个ViewRootImpl对象，并且将窗口的控件、布局参数、ViewRootImpl对象入参到setView函数中，这个动作将导致ViewRootImpl向WMS添加新的窗口、申请Surface创建、绘制动作等。这才真正意义的完成了窗口的添加操作。 frameworks/base/core/java/android/view/WindowManagerGlobal.java 窗口移除序列图（Activity destroy）窗口被删除，Activity执行了handleDestroyActivity函数： Surface Destroy（Activity pause或者stop状态） 可以结合以下Surface创建部分一起梳理，针对的情况是Surface被destroy，从framework/base到SurfaceFlinger模块Layer析构的流程。但是就Activity而言，并没有被销毁，而是类似按了home键返回桌面，或者在后台运行的状态，具体可以通过日志观察。 SurfaceSession创建 此处是接着上面添加窗口的流程，分为以下两部分。 mGlobal.addView中创建ViewRootImpl对象 新建ViewRootImpl对象的时候，调用构造函数，会从WindowManagerGlobal中获取一个窗口session。 mWindowSession = WindowManagerGlobal.getWindowSession(); 在WindowManagerGlobal中会通过Binder IPC跨进程创建一个session。 Session主要用于进程间通信，其他应用程序想要和WMS通信就需要经过Session，每个应用程序进程都会对应一个Session，WMS保存这些Session用来记录所有向WMS提出窗口管理服务的客户端。 frameworks/base/core/java/android/view/WindowManagerGlobal.java WMS继承IWindowManager.Stub，调用到openSessio函数，创建一个新的session对象, 返回值是IWindowSession类型。用于在APP进程和WMS之间建立联系。 frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java mGlobal.addView中调用ViewRootImpl.setView在前面mGlobal创建ViewRootImpl对象之后，会调用ViewRootImpl对象的setView，然后通知到WMS创建一个SurfaceSession，建立WindowManagerService和Surfacelinger的连接。 一个SurfaceSession代表着一个到SurfaceFlinger的连接会话，在这个连接会话里，可以创建一个或多个surface，最后这些surface被合成送到Display上显示。 大致过程：（查看下面的序列图） 在setView()中调用mWindowSession.addToDisplay, mWindowSession是IWindowSession接口类型，而Session.java实现了该接口； Session.java 中调用mService.addWindow(…), mService是WMS类型； WMS.java的addWindow()创建WindowState对象win，调用win.attach() frameworks/base/services/core/java/com/android/server/wm/WindowState.java 调用attach frameworks/base/services/core/java/com/android/server/wm/Session.java 调用windowAddedocked，创建SurfaceSession类型的mSurfaceSession frameworks/base/core/java/android/view/SurfaceSession.java 构造函数调用JNI，然后在android_view_SurfaceSession.cpp中的nativeCreate创建SurfaceComposerClient, 调用Refase的incStrong然后实现onFirstRef,通过调用CreateConnection()建立和SF的连接; SF.cpp 调用CreateConnection()返回SF的Client类的Binder代理BpSurfaceComposerClient; Surface创建App进程请求创建SurfaceSurface是Android图形系统的核心部分，图形界面上的一个窗口或对话框等都对应着一个Surface。 而这个Surface是一块绘制区域的抽象，它对应着Server服务端Surfacelinger中的一个图层Layer，这个图层的背后是一块图形缓冲区GraphicBuffer，Client客户端的应用程序的UI使用软件绘制、硬件绘制在Surface上各种渲染操作时，绘制操作的结果其实也就是在该图形缓冲区中。 这部分的内容是梳理Surface创建的过程。 在ViewRootImpl对象中，setView到requestLayout函数请求布局，到调用scheduleTraversals，该函数里面在Choreographer.java层层调用到Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action); 此处的action即是新的线程启动。 启动ViewRootImp中单独的线程TraversalRunnable，然后调用到关键函数performTraversals()。 这个关键函数有两个主要的函数: relayoutWindow() -&gt;布局窗口 performDraw() -&gt;绘制渲染 请求创建Surface就从relayoutWindow函数开始。 在这个方法中调用IWindowSession的relayout，会调用到Session.java，然后调用到WMS的relayoutWindow从而达到跨进程：（流程图查看下面单独章节的序列图） frameworks/base/core/java/android/view/ViewRootImpl.java System_server进程 —— WMS 跨进程到WMS后，从relayoutWindow函数调用到createSurfaceControl(outSurfaceControl)。 （1）然后先是在WindowStateAnimator创建一个WindowSurfaceController对象，作为调用到WindowStateAnimator.java的createSurfaceLocked函数的返回值。 在createSurfaceLocked函数中，会new一个WindowSurfaceController对象，从而调用他的构造函数。 在他的构造函数中会创建一个SurfaceControl内部类Builder对象，调用该对象的build函数； (2) WMS.java中调用WindowStateAnimator.java的createSurfaceLocked函数之后，会执行以下逻辑： a. 如果surfaceController不为空，调用WindowSurfaceController的getSurfaceControl； b. WindowSurfaceController.java调用getSurfaceControl, outSurfaceControl.copyFrom(mSurfaceControl);，而mSurfaceControl就是之前的构造函数创建的。此处的copyFrom会经过JNI调用到Native层, 然后读取SurfaeControl。 在Builder内部类的build函数中创建Java层的SurfaceControl对象，在SurfaceControl的构造函数中调用JNI层的nativeCreate函数； android_view_SurfaceControl.cpp的nativeCreate函数会调用SurfaceComposerClient.cpp的createSurfaceChecked函数，创建一个surface（实际上是SurfaceControl），然后将surface返回。 SurfaceFlinger进程SurfaceComposerClinet.cpp位于frameworks/native/libs/gui模块。而libgui库主要被JNI层中的代码调用，从而和Surfacelinger进程进行交互，可以看做是Java层的Bn端，是SurfaceFlinger的Bp端。 比如此处的SurfaceComposerClinet通过Binder IPC（ISurfaceComposerClinet.cpp），跨进程到SurfaceFlinger进程。 SurfaceComposerClinet作为Bp客户端调用： frameworks/native/libs/gui/SurfaceComposerClient.cpp Bn服务端是surfaceflinger模块的Client.cpp，此时跨进程到SurfaceFlinger进程，调用createSurface，从而请求到SurfaceFlinger创建Surface： frameworks/native/services/surfaceflinger/Client.cpp 在SurfaceFlinger::createLayer中创建Layer（创建surface的请求到SurfaceFlinger进程中就是创建Layer），创建的Layer有四种： （1）createBufferQueueLayer（2）createBufferStateLayer（3）createColorLayer（4）createContainerLayer 通常情况下创建的是第一种Layer——BufferQueueLayer（在P中是BufferLayer），会创建一个&lt;sp&gt;BufferQueueLayer强指针对象。 SF.cpp 序列图 该序列图包含上面部分的流程，包含APP进程和WMS进程之间的Session创建、SurfaceSession创建、Surface创建。 BufferQueue 关于BufferQueue只大致梳理他的创建流程，以及在渲染过程中的dequeuebuffer和queuebuffer流程、在合成过程中的acquire和release流程。关于和GraphicsBuffer和再底层的逻辑，暂时不梳理。 BufferQueue概述创建BuffeQueueLayer对象的onFirstRef中会创建一个BufferQueue。BufferQueue是buffer流转的中转站。具体分成四个步骤： 生产者dequeue一块buffer，buffer状态-&gt;DEQUEUED，持有者-&gt;Producer，之后生产者可以填充数据（渲染绘制）。在dequeueBuffer之前，buffer状态是free，持有者是BufferQueue； 生产者填充完数据后，进行queue操作，buffer-&gt;QUEUED，持有者-&gt;BufferQueue。操作后producer会回调BufferQueue的onFrameAvailable函数，通知消费者有可用的buffer; 消费者进行acquire取出Buffer，buffer-&gt;ACQUIRED，持有者-&gt;Consumer; 消费者消费完这块buffer（已经合成），进行release操作释放，归还给BufferQueue BufferQueue状态 DEQUEUED 状态： Producer dequeue一个Buffer后，这个Buffer就变为DEQUEUED状态，release Fence发信号后，Producer就可以修改Buffer的内容，我们称为release Fence。此时Buffer被Producer占用。 DEQUEUED状态的Buffer可以迁移到 QUEUED 状态，通过queueBuffer或attachBuffer流程。也可以迁移到FREE装，通过cancelBuffer或detachBuffer流程。 QUEUED 状态： Buffer绘制完后，queue到BufferQueue中，给Consumer进行消费。此时Buffer可能还没有真正绘制完成，必现要等对应的Fence发信号出来后，才真正完成。此时Buffer是BufferQueue持有，可以迁移到ACQUIRED状态，通过acquireBuffer流程。而且可以迁移到FREE状态，如果另外一个Buffer被异步的queue进来。 ACQUIRED 状态： Buffer已经被Consumer获取，但是也必须要等对应的Fence发信号才能被Consumer读写，找个Fence是从Producer那边，queueBuffer的时候传过来的。我们将其称为acquire fence。此时，Buffer被Consumer持有。状态可以迁移到FREE状态，通过releaseBuffer或detachBuffer流程。除了从acquireBuffer流程可以迁移到ACQUIRED状态，attachBuffer流程也可以迁移到ACQUIRED状态。 FREE 状态： FREE状态，说明Buffer被BufferQueue持有，可以被Producer dequeue，它将迁移到DEQUEUED状态，通过dequeueBuffer流程。 SHARED状态： SHARED状态是一个特殊的状态，SHARED的Buffer并不参与前面所说的状态迁移。它说明Buffer被用与共享Buffer模式。除了FREE状态，它可以是其他的任何状态。它可以被多次dequeued, queued, 或者 acquired。这中共享Buffer的模式，主要用于VR等低延迟要求的场合。 BufferQueue创建以及创建一个监听在BufferQueueLayer::onFirstRef调用BufferQueue::createBufferQueue()创建了bufferQueue、生产者、消费者，在创建生产者和消费者的过程中，将他们绑定到同一个BufferQueue上。 之后会创建一个BufferLayerConsumer对象mConsumer，这个对象继承了ConsumerBase类，所以会回调基类的构造函数，注册一个监听对象到BufferQueue（空对象）。 真正的监听是在mConsumer-&gt;setContentsChangedListener(this)基类构造函数中还会调用consumerConnect将消费者关联到BufferQueue中。此时监听对象就赋给了BufferQueue的mConsumerListener成员（调用BufferQueueConsumer的connect函数）。 这个监听对象会在queueBuffer是触发，由生产者回调注册到BufferQueue的帧可用通知。 DequeuBufferBufferQueue创建后，首先由生产者执行dequeueBuffer请求一块Buffer。 Dequeue和Queue的操作都是在硬件渲染(软件绘制暂不考虑)的过程中，在ThreadedRenderer::draw函数中，updateRootDisplayList创建好一个RootDisplayList后，开始渲染一帧，在这时调用父类的syncAndDrawFrame函数，这个函数层层调到CanvasContext::draw函数，然后依次调用三个函数： mRenderPipeline-&gt;getFrame 执行dequeueBuffer请求一块buffer draw 填充buffer mRenderPipeline-&gt;swapBuffers 执行queueBuffer送到BufferQueue 在此处dequeuBuffer和queueBuffer两个操作调到gui/Surface.cpp的两个对应函数，这个流程基本一样。 大致都从SkiaOpenPipeline.cpp -&gt; EglManager.cpp -&gt; eglApi.cpp -&gt; ANativeWindow.cpp，之后到Bp客户端libgui库的Surface.cpp，执行具体操作。 Surface::dequeueBuffer中调用IGraphicBufferProducer::dequeueBuffer。然后remote()-&gt;transact(DEQUEUE_BUFFER,data,&amp;reply)调用到Bn端BufferQueueProducer::dequeueBuffer函数。 首先查找mSlots[found]的序列号found，mSlots是存放Buffer的地方，他的数量是64。即至多存放64个buffer。 found是从waitForFreeSlotThenRelock中获取： 从非Free的buffer中统计dequeue和acquire的数量； 判断dequeueBufferCount数量不能大于最大允许dequeueBuffer的数量； slot的获取主要来自两个集合，mFreeSlots和mFreeBuffers；两者包含的所有状态都是free，区别在于前者没有attached，后者以及attached；如果调用来自dequeueBuffer优先选择前者，如果调用来自attachBuffer，优先选择后者； 如果没找到符合要求的buffer或者queue的buffer还有太多没有完成，就要等待这个buffer被acquired或者released，或者修改最大的buffer数量。 找到可用的slot，还要判断是否重新分配空间：如果Buffer（本质上是GraphicBuffer）是空，并且需要重新分配空间，则对这个mSlots[found]初始化； new GraphicBuffer为mSlots分配一个GraphicBuffer，赋值给BufferQueueCore中的变量mSlots[]的mGraphicBuffer； mSlots[*outSlot].mGraphicBuffer = graphicBuffer; Surface::dequeueBuffer从服务端申请到Buffer后，通过requestBuffer将客户端的buffer和服务端的buffer指向同一块物理内存。 具体是IGraphicBufferPruducer代理中通过REQUEST_BUFFER状态，在onTransact中将申请的GraphicBuffer，即mSlots[slot].mGraphicBuffer。将其写入reply，等待客户端读取。 QueueBufferqueueBuffer是在渲染一帧后通过mRenderPipeline-&gt;swapBuffers调用到Surface::queueBuffer。将填充完数据的buffer放入BufferQueue，并且通过监听者通知消费者对象开始消费。 在Bn端BufferQueueProducer::queueBuffer L977中调用：frameAvailableListener-&gt;onFrameAvailable(item); 通知消费者，在BufferQueueLayer::onFrameAvailable中调用：mFlinger-&gt;signalLayerUpdate(); 触发SurfaceFlinger的消息循环机制，开始处理SurfaceFlinger合成事件。 序列图 acquire &amp; release消费者SurfaceFlinger通过acquire从BufferQueue取出一块buffer消费。消费（合成）之后释放。 序列图"},{"title":"Android NE分析（二）","date":"2020-07-28T13:52:00.000Z","url":"/Blog/2020/07/28/2020/200727_android_NE_Two/","tags":["android debug","android"],"categories":["android"],"content":" 了解gcc将*.c/cpp编译成*.o，再将其链接为可执行程序或/lib库的过程，有助于我们将native从编译/加载/执行到崩溃一条路贯通起来。Android的Makefile只需要将source file填入LOCAL_SRC_FILES，然后include $(BUILD_SHARED_LIBRARY)或$(BUILD_EXECUTABLE)就可以将*.c/cpp/s编译为动态库或可执行程序。 native编译编译为obj 在build/core/definitions.mk有定义transform-c-or-s-to-o-no-deps和transform-cpp-to-o，分别将每个.c/s和.cpp编译成*.o，里面传了很多参数给gcc -fpic -fPIE PIC是Position-Independent Code的缩写，经常被用在共享库中，这样就能将相同的库代码为每个程序映射到一个位置，不用担心覆盖掉其他程序或共享库。 PIE是Position-Independent-Executable的缩写，只能应用在可执行程序中。PIE和PIC很像，但做了一些调整（不用PLT，使用PC相关的重定位）。-fPIE给编译用，-pie给链接(ld)用。 例如，一个程序没有使用PIC被链接到0地址，那么系统将其加载到0地址。 -fstack-protector 顾名思义就是保护堆栈，每一个函数在运行时都有自己的栈帧，如果代码没有写好，很可能将自己甚至是其他的栈帧踩坏，那如何防护呢？简单的方法就是在栈帧头部也就是在局部变量开始之前多存储一个stack_chk_guard值，用于在函数返回前取出来和_stack_chk_guard做对比，失败则调用stack_chk_fail函数，这个就是该参数完成的行为。 静态链接build/core/combo/TARGET_linux-arm.mk里有定义transform-o-to-static-executable-inner，将*.o链接成静态可执行程序，静态可执行程序是一个完整的程序，不需要额外的共享库即可执行，比如/init,/sbin/adbd等。 链接器用的是arm-linux-androideabi-g++ 动态链接build/core/combo/TARGET_linux-arm.mk里有定义transform-o-to-executable-inner和transform-o-to-shared-lib-inner，分别将*.o链接为动态可执行程序和共享库。动态可执行程序需要linker才能进一步运行的。 链接器也是用arm-linux-androideabi-g++ tombstone定位错误方法signum一般debuggerd关注的是SIGILL，SIGBUS，SIGABRT，SIGFPE，SIGSEGV，SIGPIPE等。而这里，估计九成都是SIGSEGV (即signal 11)，段错误，和非法内存访问等价。 *sigcode SEGV_MAPERR：访问一个没有映射到任何内容的地址，这种情况通常就是野指针，或者越界访问，访问空指针也是属于这类 SEGV_ACCERR：试图访问您无权访问的地址。说明访问出错地址，被map到地址空间来了，但是没访问权限。基本上是指针越界或野指针，比如写只读map的内存地址 例如： tombstone日志当中也提供了出错时寄存器地址里面的临近内存信息，信息量同样很丰富。查看0000007e44001c30附近的内存情况。 参考 Android Native/Tombstone Crash Log 详细分析： Android Native程序crash的一些定位方法简介： ARM64-memcpy.S 汇编源码分析： android bionic memcpy 汇编源码解析： PIC和PIE： "},{"title":"Android NE分析（一）","date":"2020-07-24T12:52:00.000Z","url":"/Blog/2020/07/24/2020/200724_android_NE/","tags":["android debug","android"],"categories":["android"],"content":" 任何软件都可能存在BUG，调试和修复BUG伴随着整个开发流程，因此异常分析非常重要。如果是native层发生异常，我们一般称之为叫NE（native exception） 异常可能发生任何一层，如果是： kernel层发生异常，叫KE（kernel exception） native层发生异常，叫NE（native exception） java成异常，叫JE（java exception） NE简介 Native层是由各种lib/binary组成，这一层发生异常，我们称之为NE（native exception）一般我们用offline调试，通过coredump借助gdb或trace32来调试。首先要先熟悉下linux信号和ptrace机制，coredump是通过信号触发生成的。coredump是进程空间保存到文件系统的镜像，因此能看到异常时刻的所有变量值，就可以知道问题出在哪里。Android是基于linux的，发生异常时，Android扩展了调试机制，这个机制是debuggerd机制。在没有coredump下，debuggerd以log或者tombstone的方式输出异常信息。 本地应用程序是指可以直接运行在操作系统上，并且处理器直接执行机器码的程序。 在Android上，OS是linux，因此各种bin程序就是所谓的natvie application，比如/system/bin目录下的所有文件。 这些应用程序都是由GCC(c/c++)编译生成。 在Android软件架构里，这些应用程序组成了native layer: native layer里的应用程序崩溃统称为Native Exception，即NE，比如空指针，非法指针，程序跑飞，内存踩坏等。 发生NE流程原始的linux，对于用户进程崩溃之后，处理方式有2种： 直接终止进程； 输出coredump再终止进程 而在Android，为了方便调试，在收到崩溃信号后，会先输出tombstone，然后在根据设置是否抓取coredump，最后再终止进程。 如果发生NE，内核会抛出信号，可以通过kernel log搜索sig 11/7等几个可以导致进程崩溃的关键字判断。 此处的信号注册是发生在动态链接程序加载的时候，链接器（linker）负责将应用程序所需的库加载到进程空间内，然后跑应用程序大妈。linker在执行期间会注册信号。 流程：__linker_init() -&gt; __linker_init_post_relocation() -&gt; debuggerd_init() 信号处理目前会产生native exception（NE）的几个信号需要特别掌握产生的原因，这样才能进一步分析问题所在。 内核发送信号过来后会执行debuggerd_init()里注册的函数debugger_signal_handler()，该函数会打印基本信息到main log： logSignalSummary()函数会输出基本异常信息，类似libc: Fatal signal 11(SIGSEGV) at 0x000 ...日志打印。 然后连接debuggerd的socket，将pid等信息发送给debuggerd，请它帮忙后续的处理。之后将对应的信号恢复为默认，等待debuggerd处理完后抓取coredump。 debuggerd服务关于上面的debuggerd服务，是由init.rc启动起来，具体代码在system/core/debuggerd/。 debuggerd起来后会创建1个socket，然后监听，等待别人通过socket请求服务，服务可以是生成tombstone或调用栈。 使用debuggerd命令查看指定tid的调用栈和tombstone adb shell debuggerd -b $tid：抓取指定tid的调用栈 adb shell debuggerd $tid：抓取指定tid的tombstone ptrace attach/detach通过socket拿到tid等资料后，使用ptrace attach上目标tid，之后就可以通过ptrace访问目标进程空间，然后打印一些NE相关的寄存器/调用栈等信息。 ptrace attach：ptrace attach会发送sig 19给对应的进程。在这里，我们将进程内所有线程都attach上，防止有线程提前退出。 ptrace cont：attach之后还不能直接访问目标进程，因为目标进程还处于信号处理函数里面，我们需要让它恢复到异常现场，因此需要用ptrace cont让其继续执行。 waitpid：程序接着往下跑必然会再次发生异常（如果是SIGABRT,SIGFPE,SIGPIPE,SIGSTKFLT，则会在信号处理函数重发一次信号），kernel会再次发出信号，只不过由于进程被ptrace了，信号会送给debuggerd。到这里，目标进程已经收到2次同样的信号了 tombstone:debuggerd收到信号后，就可以生成tombstone了 ptrace detach: 完成工作后，需要detach ptrace，然后发送sig 18让其继续奔跑。如果是访问空指针等错误，程序会再次发生异常，由于在信号处理函数里已经将对应信号恢复默认，因此可能会产生coredump。 产生db文件 debuggerd完成之后会通知aee，aee就开始了打包db的工作，具体生成在/data/aee_exp目录 1个完整的NE的db，里面除了coredump还有其他文件，包含log文件(main/event/radio)，详细的NE信息文件(_exp_main/_exp_detail)等，这些文件绝大部分是通过aee_dumpstate保存起来的。 PROCESS_MAPS文件描述进程空间db中有些文件对分析NE是至关重要的，比如PROCESS_MAPS，这文件就是/proc/$pid/maps，里面是对进程空间的描述。 例如以下部分截取的内容： Tombstone Android Native程序本质上就是一个Linux程序，因此当它在执行时发生严重错误，也会导致程序crash，然后产生一个记录crash的现场信息的文件，而这个文件在Android系统中就是tombstone文件。 从上面的分析看，发生NE的时候会创建tombstone文件，最多存在10个，如果已存在10个，会覆盖最旧的文件。 组成部分： 版本信息：主要是fingerprint，可以看出异常版本是eng还是user 寄存器信息：主要查看是哪个进程崩溃，信号是什么。寄存器信息需要配合下面的调用栈信息及数据信息结合GNU的工具（objdump -S反汇编）分析。 调用栈信息：是最直接可以看出异常的信息（可以使用addr2line定位地址的代码函数对应位置） 其他线程信息：如果异常线程和其他线程有逻辑关系的话，可以查看对应线程的信息 main log信息：全面的log建议还是查看main log 调用栈最直接查看栈的位置就是log和Tombstone文件中。 C/C++语言的过程调用都需要栈，正在执行的函数有属于自己的栈帧，函数内部的局部变量就放在栈帧里，当然还会存放函数的返回地址，这样函数执行结束之后才知道返回到哪里。 不同的栈帧关联在一起就会形成一个调用链，最顶端表示当前正在执行的函数，第2行表示调用它的函数，以此类推（先进后出）。 例如以下栈： 库里的偏移：库默认都加载在0地址的，由OS随机加载在mmap区域，因此实际上库函数的地址都是基址+偏移量，其中的基址就是库加载的地址，这个地址可以从/proc/$pid/maps看到每个库的基址。 addr2line命令针对发生Native Crash的堆栈，将地址转换为地址所在的文件及行数(显示所在函数) 该命令可以用来解析so动态链接库（Symbol目录），分析单个pc地址对应的函数，然后参照代码寻找问题发生处。 含有调试信息的库或程序必须和手机里的库或程序是同一次编译生成的，否则得到的PC值和库里的调试信息不匹配。 如何确定库或程序含有调试信息呢？或者说如何确定库能不能用来调试呢？是不是symbol目录下的库呢？ 用file命令即可查看：file xxx 如果没有含debug信息的话，会显示：xxx: ELF 32-bit LSB shared object, ARM, version 1 (SYSV), dynamically linked, stripped 含有调试信息的话，则显示：xxx: ELF 32-bit LSB shared object, ARM, version 1 (SYSV), dynamically linked, not stripped 例如：（需要在Symbol目录下） addr2line -Cfe .so address 解释：-e 后加上.so的文件名；-f 可同时输出函数名称 -e --exe=&lt;executable&gt;: 设置要查询地址的文件(默认: a.out)一般是.so/.a和可执行程序。此文件必须带有debug信息，在android codebase里是放在out/target/product/$project/symbols目录下 -f –functions: 显示地址所在的函数名 -C --demangle[=style]: 反重整函数名为可读方式 objdumpobjdump –S **.so &gt; **.asm 该命令是用来把相应的so变成汇编语言的asm文件，然后根据地址信息就可以找到更加详细的相关函数信息。 即查看对象文件(.so/.a或应用程序)的内容信息 或者 symbols/out/target/product/merlin/symbols$ objdump -tT system/lib64/libgui.so 后缀 含义 -S 或 –source 尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数 -t 或 –syms 显示文件的符号表入口。类似于nm -s提供的信息 -T 或 –dynamic-syms 显示文件的动态符号表入口，仅仅对动态目标文件意义，比如某些共享库。它显示的信息类似于`nm -D nm命令作用是：列出该文件的符号(函数，变量，文件等)，包含名字、地址、大小 ndk-stack 用来把log信息全部翻译成更加详细的带源码行数信息的log，相当于是在整个crash堆栈信息都执行addr2line命令。 ndk-stack -sym […/obj/local/{ABI类型}/] -dump crash.log readelf查看elf文件(.so/.a或应用程序)的内容信息，可以使用readelf -a [.so/.bin]解析库地址。 c++filt反重整C++符号为可读方式。 根据解析结果查询函数，C++在linux系统编译后会变成类似_ZNK...的修饰名。使用c++filt获取函数的原始名称。 c++filt [_ZNK...函数修饰名] 参考 关于不同版本aee db文件的抓取： coredump配置、产生、分析以及分析示例： Android Debuggerd 简要介绍和源码分析： "},{"title":"C++ 对象和类（案例代码）","date":"2020-07-15T15:52:00.000Z","url":"/Blog/2020/07/15/2020/200715_cpp_ObjAndClass/","tags":["cpp"],"categories":["cpp"],"content":" C++类的声明、实现和使用，以及构造函数和析构函数。包含案例代码，可编译运行。 类的声明、实现、使用类的成员访问控制：公有/私有无论类成员是数据成员还是成员函数，都可以在类的公有部分或私有部分中声明他。 而隐藏数据是OOP（面向对象）主要的目标之一，因此数据项通常放在私有部分，组成类接口的成员函数放在公有部分（否则就无法从程序中调用这些函数） 也可以把成员函数放在私有部分中，不能直接从程序中调用这种函数，但是公有方法却可以使用他们。通常，程序员使用私有成员函数处理不属于公有接口的实现细节。 类声明中的关键字private是类对象的默认访问控制，可以不用写出来。 Note：结构的默认访问类型是public，而类为private，可以不用再写出来。 类成员函数实现类声明后，需要具体实现原型表示的成员函数。成员函数有函数头和函数体，也可以有返回类型和参数，而其和常规函数的不同之处： 定义成员函数时，使用作用域解析运算符::来标识函数所属的类。例如void A::update(double price)...，这意味着update()函数是A类的成员。同时意味着可以将另一个类的成员函数也命名成update()，例如void B::update()...。因此作用域解析运算符确定了方法定义对应的类。 类方法可以访问类的private私有成员，即定义的私有变量这些。 案例 头文件： stock00.h 函数实现文件： stock00.cpp 类使用 usestock00.cpp 多个文件编译命令： 执行结果： 类的构造函数和析构函数声明构造函数构造函数专门用于构造新对象、将值赋给他们的数据成员。 例如:Stock::Stock(const string &amp; co, long n, double pr) {...} 此处构造函数的参数表示的不是类成员，而是赋给类成员的值。因此，参数名不能与类成员相同，否则会造成混乱。 常见的做法是在数据成员名中使用m_前缀或者使用后缀_。 例如： 或者 使用构造函数两种使用构造函数初始化对象的方式： 显式调用构造函数：Stock food = Stock(&quot;World&quot;, 250, 1.25); 隐式调用构造函数：Stock garment(&quot;Good&quot;, 50, 2.5);，等价于显式的方法：Stock garment = Stock(&quot;Good&quot;, 50, 2.5); 创建类对象的时候，C++都会使用类的构造函数：Stock *pstock = new Stock(&quot;Best&quot;, 18, 1.9); 此处创建了一个Stock对象，并调用构造函数初始化为参数提供的值，将对象的地址赋给pstock指针。此时对象没有名称，但是可以使用指针来管理该对象。 使用对象调用方法：stock1.show(); 析构函数如果构造函数使用new来分配内存，则析构函数将使用delete来释放这些内存。 如果Stock的构造函数没有使用new，则析构函数实际上没有需要完成的任务。在这种情况下，只需让编译器生成一个什么都不做的隐式析构函数即可。 析构函数可以没有返回值和声明类型。 和构造函数不同，析构函数没有参数。 例如Stock析构函数的原型：~Stock(); 或者： "},{"title":"Android HWUI绘制流程","date":"2020-07-07T13:12:00.000Z","url":"/Blog/2020/07/07/2020/200707_android_HWUI_Draw/","tags":["graphics"],"categories":["android"],"content":" Android中绘图的API有很多，比如2D的绘图skia；3D的绘图OpenGLES，Vulkan等。Android在后来完善3D API支持的同时，也在更新View Widget渲染机制，提出了硬件加速机制。 HWUI绘制的大致流程是先初始化绘制环境（创建rendernode、渲染线程RenderThread、Context上下文、RenderProxy代理对象），之后是创建DisplayList显示列表，然后开始视图绘制，视图绘制结束后开始同步帧数据。 硬件加速：作用：是将2D的绘图操纵转换为对应的3D绘图操纵。需要显示的时候，再用OpenGLES通过GPU渲染。过程：界面创建时，第一次全部渲染，后续界面如果只有部分区域的widget更新，只需要重新渲染更新的widget。渲染好的绘图保存在一个显示列表DisplayList中，需要真正显示到界面的时候，直接显示DisplayList中的绘图。好处：一方面利用GPU去渲染，比Skia要快；另一方面，采用DisplayList，再次渲染只更新部分区域，最大程度利用上一帧的数据，提高效率。 使用Android Q AOSP源码梳理流程。 GPU渲染（硬件加速）介绍在Android应用程序中是通过Canvas API来绘制UI元素的。在硬件加速渲染环境中,这些Canvas API调用最终会转化为OpenGL API调用(转化过程对应用程序来说是透明的)。由于OpenGL API调用要求发生在Open GL环境中,因此在每当有新的Activity窗口启动时,系统都会为其初始化好OpenGL环境。 这里的渲染,主要是Android硬件加速,即GPU渲染。android上就是通过libhwui调用OpenGL api来渲染, Android P上libhwui 会调用skia,再调用GLES相关的API进行渲染。 GPU作为一个硬件 , 用户空间是不可以直接使用的, 它是由GPU厂商按照Open GL规范实现的驱动间接进行使用的。也就是说 , 如果一个设备支持GPU硬件加速渲染, 那么当Android应用程序调用OpenGL接口来绘制UI时 ,Android应用程序的UI就是通过硬件加速技术进行渲染的。 名词介绍： GPU:一个类似于CPU的专门用来处理Graphics的处理器, 作用用来帮助加快栅格化操作, 当然, 也有相应的缓存数据(例如缓存已经光栅化过的bitmap等)机制。 OpenGL ES:是手持嵌入式设备的3DAPI, 跨平台的、功能完善的2D和3D图形应用程序接口API, 有一套固定渲染管线流程 DisplayList:在Android把XML布局文件转换成GPU能够识别并绘制的对象。这个操作是在DisplayList的帮助下完成的。DisplayList持有所有将要交给GPU绘制到屏幕上的数据信息。 栅格化:是将图片等矢量资源, 转化为一格格像素点的像素图, 显示到屏幕上。 垂直同步VSYNC:让显卡的运算和显示器刷新率一致以稳定输出的画面质量。它告知GPU在载入新帧之前,要等待屏幕绘制完成前一帧。 RefreshRate:屏幕一秒内刷新屏幕的次数, 由硬件决定, 例如60Hz Frame Rate:GPU一秒绘制操作的帧数, 单位是fps Android 5.0 之后的渲染框架在Android应用程序窗口中, 每一个View都抽象为一个Render Node, 而且如果一个View设置有Background, 这个background 也被抽象为一个Render Node 。 这是由于在OpenGLRenderer库中, 并没有View的概念, 所有的一切可绘制的元素都抽象为一个Render Node。 每一个Render Node都关联有一个DisplayList Renderer, Display List是一个绘制命令缓冲区。当View的成员函数onDraw被调用时, 我们调用通过参数传递进来的Canvas的drawXXX成员函数绘制图形时, 我们实际上只是将对应的绘制命令以及参数保存在一个Display List中。接下来再通过DisplayList Renderer执行这个Display List的命令, 这个过程称为Display List Replay。 Android应用程序窗口的View是通过树形结构来组织的。这些View不管是通过硬件加速渲染还是软件渲染, 或者是一个特殊的TextureView,在它们的成员函数onDraw被调用期间, 它们都是将自己的UI绘制在ParentView的DisplayList中。 其中, 最顶层的Parent View是一个Root View, 它关联的RootNode称为Root Render Node。也就是说, 最终Root Render Node的DisplayList将会包含一个窗口的所有绘制命令。 在绘制窗口的下一帧时, RootRender Node的Display List都会通过一个OpenGL Renderer真正地通过Open GL命令绘制在一个Graphic Buffer中。 最后这个 Graphic Buffer 被交给 SurfaceFlinger 服务进行合成和显示。 Android原生硬件绘制案例 这个案例是用的SurfaceView.java的流程。这个流程和实际上从ViewRootImpl.java中通过performDraw的流程类似。可以互相借鉴参考。 Android原生的硬件绘制案例，在frameworks/base/tests/HwAccelerationTest/src/com/android/test/hwui/HardwareCanvasSurfaceViewActivity.java： HardwareCanvasSurfaceViewActivity.java Java层相关流程（frameworks/base的View模块和graphics模块） 首先调用关键函数lockHardwareCanvas，在frameworks/base/core/java/android/view/SurfaceView.java： frameworks/base/core/java/android/view/SurfaceView.java 然后就调用Surface.java的lockHardwareCanvas函数，此处封装了一个HwuiContext对象，构造函数如下： frameworks/base/core/java/android/view/Surface.java 创建RenderNode RenderNode用以绘图操纵的批处理，当绘制的时候，可以store和apply。java层的代码如下：其实RenderNode就对应前面我们所说的ViewGroup，有一个RootView，同样也有一个RootNode。 在上面Surface.java调用HwuiContext构造函数的时候，会创建RenderNode对象： Surface.java 创建RenderNode对象： frameworks/base/graphics/java/android/graphics/RenderNode.java JNI层： frameworks/base/core/jni/android_view_RenderNode.cpp Native层，创建好RenderNode是提供给DisplayListCanvas。 frameworks/base/libs/hwui/RenderNode.cpp beginRecording初始化DisplayList 在Surface.java中通过lockCanvas调用RenderNode对象的beginRecording函数。 frameworks/base/graphics/java/android/graphics/RenderNode.java 接着调用RecordingCanvas的obtain函数： 类的继承关系： RecordingCanvas类继承DisplayListCanvas，而DisplayListCanvas继承BaseRecordingCanvas，BaseRecordingCanvas继承Canvas（继承BaseCanvas）。 frameworks/base/graphics/java/android/graphics/RecordingCanvas.java 查看测试案例代码中的canvas.drawColor和canvas.drawRect函数，是调用了其父类BaseCanvas的对应方法。 frameworks/base/graphics/java/android/graphics/Canvas.java 父类BaseCanvas.java： frameworks/base/graphics/java/android/graphics/BaseCanvas.java Native层Canvas创建（JNI和HWUI模块） 1.在上面RecordingCanvas.java的构造函数中调用了nCreateDisplayListCanvas函数，对饮的JNI实现： frameworks/base/core/jni/android_view_DisplayListCanvas.cpp 调用到frameworks/base/libs/hwui/hwui/Canvas.cpp，在Andorid Q中，此处只调用了SkiaRecordingCanvas函数。使用skia进行绘制。 frameworks/base/libs/hwui/hwui/Canvas.cpp 然后初始化DisplayList： frameworks/base/libs/hwui/pipeline/skia/SkiaRecordingCanvas.h frameworks/base/libs/hwui/pipeline/skia/SkiaRecordingCanvas.cpp Draw绘制操纵 正常流程的绘制是在frameworks/base/core/java/android/view/ThreadedRenderer.java的updateRootDisplayList函数中。调用到drawRnderNode函数绘制。 Java层：上面案例中的drawColor和drawRect实际调用的是在frameworks/base/graphics/java/android/graphics/BaseCanvas.java中： frameworks/base/graphics/java/android/graphics/BaseCanvas.java 调用JNI层在： frameworks/base/core/jni/android_graphics_Canvas.cpp Native层：因为class SkiaCanvas : public Canvas，所以调用到SkiaCanvas类中的具体实现： 调用 frameworks/base/libs/hwui/SkiaCanvas.cpp 调用到external/skia图形库模块： Skia是Google一个底层的图形、图像、动画、SVG、文本等多方面的图形库，是Android中图形系统的引擎。Skia作为第三方软件放在目录：external/skia/。 主要包含三个库： libcorecg.so: 包含/skia/src/core的部分内容，比如其中的Region、Rect是在SurfaceFlinger里面用来计算可视区域的； libsgl.so: 包含/skia/src/core|effects|images|ports|utils的部分和全部内容，这个实现了skia大部分的图形效果，以及图形格式的编解码； libskiagl.so: 包含/skia/src/gl里面的内容，主要用来调用opengl实现部分效果。 external/skia/src/core/SkCanvas.cpp HwuiContext和HwuiRendererJava层从上面的Surface.java中看到，nHwuiCreate创建HwuiRenderer。 Surface.java JNI层frameworks/base/core/jni/android_view_Surface.cpp 以下流程部分是和通常的HWUI环境初始化流程相同的。 *native层：调用RenderProxy.cpp构造函数该构造函数的几个重要成员变量： RenderProxy是一个代理者，严格的单线程。所有的方法都必须在自己的线程中调用。MainThread通过这个代理对象想Task Queue发送drawFrame命令； RenderThread（即构造函数中的mRenderThread）：渲染线程，是一个单例，也就是说，一个进程中只有一个，所有的绘制操纵都必须在这个线程中完成。应用端很多操纵，都以RenderTask的形式post到RenderThread线程中完成。（在Android 5.0之后独立出来的应用程序的OpenGL线程） CanvasContext（即构造函数中的mContext）：上下文，由于OpenGL是单线程的，所以，我们给到GPU的绘图命令都封装在各自的上下文中。这个和上层的HwuiRenderer是对应的。（将窗口绑定到Open GL渲染上下文中，从而使后面的渲染操作都是针对被绑定窗口的） DrawFrameTask（即构造函数中的mDrawFrameTask）：一个用来执行渲染任务的task，MainThread通过他向RenderThread线程发送渲染下一帧的命令。（比较特殊的一个RenderTask，可重复使用的绘制Task。） frameworks/base/libs/hwui/renderthread/RenderProxy.cpp 创建RenderThread渲染线程 从上面构造函数中的RenderThread::getInstance()调用下去。创建一个RenderThread线程。 而该类的父类是ThreadBase.h，父类的父类是Thread.h frameworks/base/libs/hwui/renderthread/RenderThread.cpp 父类创建looper循环和start函数实现，然后开始线程循环： frameworks/base/libs/hwui/thread/ThreadBase.h 开始线程循环，调用ThreadLoop开始工作。 frameworks/base/libs/hwui/renderthread/RenderThread.cpp CanvasContext渲染上下文该函数中会选择渲染绘制方式（渲染管线）。在Android Q中取消了OpenGL渲染。 Android P之前：enum class RenderPipelineType { OpenGL = 0, SkiaGL, SkiaVulkan, NotInitialized = 128 }; Android Q：enum class RenderPipelineType { SkiaGL, SkiaVulkan, NotInitialized = 128 }; frameworks/base/libs/hwui/renderthread/CanvasContext.cpp mRenderPipeline有几种类型，创建CanvasContext时（create函数），会根据pipeline的类型，创建对应的Pipeline。（即调用getRenderPipelineType函数） 渲染类型：enum class RenderPipelineType { SkiaGL, SkiaVulkan, NotInitialized = 128 }; frameworks/base/libs/hwui/renderthread/CanvasContext.cpp 在上面调用nHwuiCreate的JNI层，会创建ContextFactory，然后在此处的构造函数中会使用到。主要用来创建AnimationContext，即mAnimationContext(contextFactory-&gt;createAnimationContext(mRenderThread.timeLord())) AnimationContext主要用来处理动画Animation。 frameworks/base/core/jni/android_view_Surface.cpp CanvasContext实现了IFrameCallback接口，所以，CanvasContext能接收编舞者Choreographer的callback，处理实时动画。class CanvasContext : public IFrameCallback {...} RenderThread渲染线程 RenderThread渲染运行模型:空闲的时候, RenderThread睡眠在成员变量mLooper指向的一个Looper对象的成员函数pollOnceh中。当其他线程需要调度RenderThread, 会向他的任务队列添加一个任务, 然后唤醒RenderThread进行处理。RenderThread通过processQueue方法处理任务。 frameworks/base/libs/hwui/renderthread/RenderThread.h 调用构造函数中，同时启动了渲染线程RenderThread： frameworks/base/libs/hwui/renderthread/RenderThread.cpp 查看父类的构造函数： frameworks/base/libs/hwui/thread/ThreadBase.h 在渲染线程启动后，会调用RenderThread.cpp的threadLoop函数。 DrawFrameTask构造函数在RenderProxy调用构造函数时，会创建DrawFrameTask，同时调用其setContext函数： frameworks/base/libs/hwui/renderthread/DrawFrameTask.cpp syncAndDrawFrame绘制帧 从上面的分析看，DisplayList和RenderThread都创建好了，正常绘制的时候会调用到syncAndDrawFrame： 从ViewRootImpl的performDraw函数调用到draw，在调用到 ThreadedRenderer.java的draw函数。开始绘制： ThreadedRenderer.java frameworks/base/libs/hwui/renderthread/RenderProxy.cpp frameworks/base/libs/hwui/renderthread/DrawFrameTask.cpp 此时，drawFrame，也就通过RenderThread，post一个WorkItem到RenderThread的队列里面，在RenderThread线程中执行的。 然后RenderThread处理Queue时，执行的会是DrawFrameTask的run函数。 frameworks/base/libs/hwui/renderthread/DrawFrameTask.cpp prepareTree 调用函数prepareTree： frameworks/base/libs/hwui/renderthread/CanvasContext.cpp 遍历RenderNode的prepareTree方法： frameworks/base/libs/hwui/RenderNode.cpp prepareTreeImpl是RenderNode真正进行Prepare的地方。 damageAccumulator是从CanvasContext中传过来的，是CanvasContext的成员，damage的叠加器。主要是用来标记，屏幕的那些区域被破坏了，需要重新绘制，所有的RenderNode累加起来，就是总的。 frameworks/base/libs/hwui/RenderNode.cpp 调用pushTransform函数，damage累加器中，每一个元素由DirtyStack描述，分两种类型：TransformMatrix4和TransformRenderNode。采用一个双向链表mHead进行管理。 frameworks/base/libs/hwui/DamageAccumulator.cpp 此时prepare完成后，绘制一帧的数据就准备好了。 绘制帧数据 从syncAndDrawFrame绘制帧上面的章节，此处会调用到HardwareRenderer.java父类函数； 然后JNI到Native层，调用到RenderProxy.cpp的该函数， 再到frameworks/base/libs/hwui/renderthread/DrawFrameTask.cpp的drawFrame函数，开始绘制一帧数据， 此时启动RenderThread线程的run函数，调用到关键函数CanvasContext::draw() Android Q中，具体绘制是在各自的pipeline中进行的。（在frameworks/base/libs/hwui/pipeline/） 在Android P中，一般是执行的frameworks/base/libs/hwui/renderthread/OpenGLPipeline.cpp 在Android Q中，可以看出Google在慢慢用Vulkan替代OpenGL。 frameworks/base/libs/hwui/renderthread/CanvasContext.cpp 绘制完成后unlockCanvasAndPost流程回到绘制案例，此时，RenderThread，DrawFrameTask，CanvasContext等已经就绪，绘制操纵已经被添加到了DisplayList中。 绘制完成，然后会在frameworks/base/tests/HwAccelerationTest/src/com/android/test/hwui/HardwareCanvasSurfaceViewActivity.java中调用到方法unlockCanvasAndPost。 SurfaceHolder直接调的Surface的unlockCanvasAndPost。 frameworks/base/core/java/android/view/Surface.java 上面代码看到，在lockHardwareCanvas的时候有相同流程，会调用mRenderNode.beginRecording。 此处就对应的调用到mRenderNode.endRecording();，结束RenderNode，保存数据。 frameworks/base/graphics/java/android/graphics/RenderNode.java 首先finishRecording函数通过JIN层android_view_DisplayListCanvas.cpp调用到Native层。 返回录制好的mDisplayList。 frameworks/base/libs/hwui/pipeline/skia/SkiaRecordingCanvas.cpp 第二步的nSetDisplayList通过JNI层android_view_RenderNode.cpp调用到Native层。 将displayList给到RenderNode的mStagingDisplayList。 frameworks/base/libs/hwui/RenderNode.cpp Activity HWUI渲染环境初始化流程（RenderThreadc创建） 主要是通过setView创建rendernode，渲染线程RenderThread，Context上下文，RenderProxy代理对象等。 附序列图 Java层 Activity.java开始设置view： frameworks/base/core/java/android/app/Activity.java PhoneWindow继承Window抽象类调用setContentView函数： frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java 此处的mContentParent.addView(view, params);，mContentParent是ViewGroup类型对象。 ViewGroup实现接口ViewManager，而interface WindowManager extends ViewManager，WindowManagerImpl.java又是接口WindowManager的实现类。所以会同时调用WindowManagerImpl类的addView函数。 WindowManagerImpl.java调用addView函数。 frameworks/base/core/java/android/view/WindowManagerImpl.java 调用windowManagerGlobal的addView函数。 frameworks/base/core/java/android/view/WindowManagerGlobal.java ViewRootImpl.java中调用流程： frameworks/base/core/java/android/view/ViewRootImpl.java 在ThreadedRenderer的create函数中new了一个该对象，从而调用其构造函数。构造函数的super()调用基类HardwareRenderer的构造函数。 frameworks/base/graphics/java/android/graphics/HardwareRenderer.java Native层 从上面的nCreateRootRenderNode函数调用到JNI层的android_view_ThreadedRenderer.cpp文件中。 创建一个窗口的Root Render Node。 之后创建RenderProxy对象。 之后调用RenderProxy构造函数，就同上面Google原生绘制案例的流程分析相同RenderProxy::RenderProxy(){...}，负责从MainThread向RenderThread发送命令。 参考上面的native层：调用RenderProxy.cpp构造函数和CanvasContext渲染上下文章节 ThreadedRenderer架构图 Activity 窗口绘制流程 由ViewRootImpl的成员函数performTraversals发起。 在绘制之前，首先需要创建一个Surface，即描述一个窗口（创建Surface的流程后续单独整理） 一旦获得对应的Surface， 就需要将其绑定到RenderThread中。 Activity窗口对应的Surface是通过ViewRootImpl类的成员函数relayoutWindow向WindowManagerService服务请求创建和返回的，并且保存在ViewRootImpl类的成员变量mSurface中。 如果Surface是新创建的，将调用ViewRootImpl类的成员变量mAttachInfo指向的AttachInfo函数。对象的成员变量mHardwareRenderer描述的一个HardwareRenderer对象的成员函数initialize将它绑定到RenderThread中。 最后, 如果需要绘制当前的Activity窗口, 那会调用 iewRootImpl类的另外一个成员函数performDraw 此处在performTraversals函数中，先是用relayoutWindow创建mSurface，将Native层之前通过构造函数创建的Surface copy过来。而后是三个主要流程：performMeasure测量、performLayout布局、performDraw绘制 绘制序列图 ViewRootImpl中的软/硬件绘制区分在ViewRootImpl.java的draw函数中： frameworks/base/core/java/android/view/ViewRootImpl.java drawSoftware中会调用到Surface.java的lockCanvas和unlockCanvasAndPost函数。 frameworks/base/core/java/android/view/Surface.java 初始化DisplayList updateRootDisplayList方法的作用是先初始化DIsplayList（即调用beginRecording，流程同上面案例中的分析），然后绘制整个树型视图结构，从顶层视图开始，每个视图节点逐一绘制，最终目的是触发每个视图的Canvas#draw***方法。 syncAndDrawFrame查看上面章节绘制准备，同步帧 updateRootDisplayList方法分成两步： 先顶层视图结构遍历绘制，更新DisplayList数据， 第二步是ThreadedRenderer的根RenderNode绘制，同样，通过根RenderNode创建DisplayListCanvas，通过它的drawRenderNode方法，负责绘制顶层视图DecorView的RenderNode节点。 frameworks/base/core/java/android/view/ThreadedRenderer.java 绘制view视图 参考上面目录beginRecording初始化DisplayList小节 updateViewTreeDisplayList方法，从顶层视图DecorView开始，遍历树形视图结构的每一个节点，利用视图内的RenderNode创建Canvas，绘制。 利用ThreadedRenderer的根RootRenderNode创建Canvas，绘制顶层RenderNode节点 frameworks/base/core/java/android/view/ThreadedRenderer.java 每个视图的流程是一样的，都有三个步骤，第一次绘制时，每个视图都要建立Canvas。 通过视图RenderNode节点start方法，创建DisplayListCanvas画布对象（调用beginRecording，流程同上面案例中的分析） 通过View的draw(canvas)方法，实现具体记录绘制操作，(绘制自身与派发)，draw方法包括很多步骤，包括递归到子视图的updateDisplayListIfDirty方法。 最后，RenderNode结束记录endRecording方法。 draw实现视图绘制六个步骤第二步的draw实现视图绘制。参数就是上面创建的DisplayListConvas画布，视图有一些公用绘制，例如背景，滚定条，修饰等。 frameworks/base/core/java/android/view/View.java 具体视图绘制六个步骤： 绘制背景:drawBackground(canvas) 这里会先得到一个mBGDrawable对象 然后根据layout过程确定的视图位置来设置背景的绘制区域 之后再调用Drawable的draw()方法来完成背景的绘制工作 必要时保存canvas的layers，绘制边缘fade onDraw方法：绘制视图内容，调用Canvas API，此处是空方法，子类会实现。例如TextView、ImageView等类的源码，它们都有重写onDraw()这个方法，并且在里面执行了相当不少的绘制逻辑。绘制的方式主要是借助Canvas这个类，它会作为参数传入到onDraw()方法中，供给每个视图使用，可以将其当成一块画布 下面有个APP代码案例 dispatchDraw派发绘制子视图，空方法，容器类视图会重写。如果有跳过标志，将不会来到draw方法，直接去dispatchDraw。 frameworks/base/core/java/android/view/ViewGroup.java 此处调用View.java的三个参数的draw函数中，也会调用updateDisplayListIfDirty()函数。并且如果是硬件绘制会重新判断mRecreateDisplayList。 这样就实现了View视图的递归绘制。 如有绘制fading edges，恢复canvas’ layers。 绘制修饰，如滚动条。 APP绘制案例代码 假如APP代码中创建一个非常简单的视图，并且用Canvas随便绘制了一点东西，代码如下所示： 此处创建了一个自定义的MyView继承自View，并在MyView的构造函数中创建了一个Paint对象。Paint就像是一个画笔一样，配合着Canvas就可以进行绘制。 绘制逻辑比较简单，在onDraw()方法中先是把画笔设置成黄色，然后调用Canvas的drawRect()方法绘制一个矩形。然后在把画笔设置成蓝色，并调整了一下文字的大小，然后调用drawText()方法绘制了一段文字。 然后在XML布局假如这个视图，将MyView的宽度设置成200dp，高度设置成100dp。 关闭硬件加速android提供了以下四个级别的硬件加速控制： Application：&lt;application android:hardwareAccelerated=&quot;true&quot; ...&gt; Activity：例如启用全局的硬件加速，但却禁止了一个Activity的硬件加速： Window：针对给定的Window来启用硬件加速： View级别：针对一个独立的View对象使用下列代码来禁止硬件加速：myView.setLayerType(View.LAYER_TYPE_SOFTWARE, null); android关闭硬件加速的方法： APK中，在AndroidManifest.xml中设置android:hardwareAccelerated=&quot;false&quot;，这是关闭整个app的硬件加速，慎用！ View有个方法支持单独的View关闭硬件加速，可以设置mView.setLaterType(View.LAYER_TYPE_SOFTWARE);，或者关闭某一个控件的硬件加速功能使用findViewById(R.id.btn).setLayerType(View.LAYER_TYPE_SOFTWARE,null); 总结 在Java层，硬件渲染由ThreadedRenderer负责，每个窗体根视图ViewRootImpl下都有一个ThreadedRenderer，保存在AttachInfo，它的draw方法是硬件渲染绘制的入口。 从ViewRootImpl开始，一般视图会创建ThreadedRenderer，启用硬件渲染，关键点在遍历每一个视图，根据视图RenderNode创建画布，有效绘制记录存储在RenderNode关联的底层DisplayListData 绘制架构包含RenderNode节点，DisplayListCanvas画布，底层DisplayListData对象，CanvasState状态存储对象，做完这些初始化工作，就可以在Java层画布上执行绘制操作方法。树形视图结构每一节点都有一个DisplayListCanvas，利用Canvas#drawXxx方法分别记录一些绘制操作，drawXxx画点、圆、矩形等操作，将这些操作存储在一个DisplayList集合中，这是App的UI线程负责的任务 onDraw方法自己在APP中重写，View和ViewGroup有什么自己需要的绘制在这里完成。 View的dispatchDraw是空方法，不做任何操作。ViewGroup重写dispatchDraw方法，实现绘制派发到子视图。容器视图一般没有自己要绘制的东西，可能在updateDisplayListIfDirty方法就已经选择dispatchDraw了； 顶层视图绘制入口是draw(一个参数)方法，在draw(一个参数)中，包含六个步骤，第四步会派发每个子视图，子视图绘制入口是draw(三个参数)，在draw(三个参数)中，会根据硬件渲染，进入每个子视图updateDisplayListIfDirty方法，实现递归绘制； 当走到RenderNode的endRecording方法时，表示视图本身以及子视图已经全部绘制完毕，也就是说当DecorView的RenderNode#end方准备执行时，所有draw已经完成 View构造方法创建每一个视图的RenderNode。每一个RenderNode都会创建DisplayListCanvas，使用时是一一对应关系； 相关参考 Android Q AOSP：  Android P 图像显示系统（三）Android HWUI 绘制流程：  硬件渲染一绘制阶段上层基本流程： Android视图绘制流程之onDraw()： Android硬件加速（译文）： "},{"title":"Android ANR traces.txt文件分析","date":"2020-06-11T15:52:00.000Z","url":"/Blog/2020/06/11/2020/200611_android_tracetxt/","tags":["display"],"categories":["android"],"content":" trace.txt生成:当APP(包括系统APP和用户APP)进程出现ANR、应用响应慢或WatchDog的监视没有得到回馈时,系统会dump此时的top进程,进程中Thread的运行状态就都dump到这个Trace文件中了。 ANR:Application Not Responding，即应用无响应 ANR类型一般有三种类型: KeyDispatchTimeout(5 seconds) –主要类型：按键或触摸事件在特定时间内无响应 BroadcastTimeout(10 seconds) –BroadcastReceiver：在特定时间内无法处理完成 ServiceTimeout(20 seconds) –小概率类型：Service在特定的时间内无法处理完成 另外还有ProviderTimeout和WatchDog看门狗等导致的ANR。 还有当系统内存或CPU资源不足时容易出现ANR， 一般这种情况会有lowmemorykill的log打印。 应用ANR产生的时候，在ActivityManagerService中会调用appNotResponding方法, 然后在/data/anr/traces.txt文件中写入ANR相关信息。 trace.txt获取 adb shell进入手机的/data/anr文件目录下面查看生成的trace.txt文件(如果ls查看文件列表没有权限,可以先adb root一下) adb pull /data/anr/ 将该文件导出,然后分析 log打印了ANR的基本信息(adb shell top查看进程, adb logcat -v process |grep PID查看日志), 可以分析CPU使用率得知ANR的简单情况; 如果CPU使用率很高,接近100%,可能是在进行大规模的计算更可能是陷入死循环; 如果CUP使用率很低,说明主线程被阻塞了,并且当IOwait很高,可能是主线程在等待I/O操作的完成。 对于ANR只是分析Log， 很难知道问题所在,我们还需要通过Trace文件分析stack调用情况,在log中显示的pid在traces文件中与之对应, 然后通过查看堆栈调用信息分析ANR的代码。 注:trace 文件的分析参考  Trace分析Traces中显示的线程状态都是C代码定义的，可以通过查看线程状态对应的信息分析ANR问题。 如: TimedWaiting对应的线程状态是TIMED_WAITING； kTimedWaiting, // TIMED_WAITING TS_WAIT in Object.wait() with a timeout执行了无超时参数的wait函数； kSleeping, // TIMED_WAITING TS_SLEEPING in Thread.sleep()执行了带有超时参数的 sleep 函数； ZOMBIE 线程死亡,终止运行 RUNNING/RUNNABLE 线程可运行或正在运行 TIMED_WAIT 执行了带有超时参数的 wait、sleep 或 join 函数 MONITOR 线程阻塞,等待获取对象锁 WAIT 执行了无超时参数的 wait 函数 INITIALIZING 新建,正在初始化,为其分配资源 STARTING 新建,正在启动 NATIVE 正在执行 JNI 本地函数 VMWAIT 正在等待 VM 资源 SUSPENDED 线程暂停,通常是由于 GC 或 debug 被暂停 "},{"title":"Android 开发者选项的“指针位置”坐标值","date":"2020-06-10T15:52:00.000Z","url":"/Blog/2020/06/10/2020/200610_android_pointerDraw/","tags":["display"],"categories":["android"],"content":" 打开开发者选项中的“指针位置”，界面上方状态栏处会显示当前触屏的X/Y坐标，那么这个坐标值是怎么打印出来的呢？ 代码分析在frameworks/base/core/java/com/android/internal/widget/PointerLocationView.java的onDraw方法中，在触屏的时候会实时打印底层读取的X/Y值。 如下代码（Android Q AOSP源码）,ps.mCoords.x和ps.mCoords.y是底层传递读取的坐标值，float类型。 最后会显示成类似X:500.5 Y:200.6 PointerLocationView.java 问题案例问题描述 如果此时设备的分辨率是1080x2340，“指针位置”坐标值边缘滑动需要显示到1079x2339。而现在出现了问题：在竖屏的时候只能显示到1078x2338，横屏（两种横屏情况）只能显示到1079x2338和1078xz2339？此处如何进行修改？ 分析首先要对此处读取的ps.mCoords.x和ps.mCoords.y值打印，发现在滑动到边缘的时候，应该显示1079，打印的值大约是1078.0001；应该显示2339的时候，打印的值大约是2038.0001。 所以在此处需要判断，在大于1078或2339的时候，使用进一法，将其作加一操作。 同时还要考虑到横屏和竖屏两种状态。 修改因为PointerLocationView.java继承view.java，可以使用getResources().getConfiguration();来获取设备参数，从而获取到当前横竖屏的状态。 "},{"title":"Android 屏幕旋转流程","date":"2020-06-01T15:52:00.000Z","url":"/Blog/2020/06/01/2020/200601_android_rotation/","tags":["display"],"categories":["android"],"content":" Android支持横屏和竖屏，用户可以选择锁定(rotation lock)也可以选择让传感器来自动转屏。而转屏时为了使用户体验更流畅，会对屏幕截屏，然后使用截屏的图来做转屏动画，直到转屏动作结束。 参考：参考： 调试方法打开debug log开关frameworks/base/services/core/java/com/android/server/wm/WindowManagerDebugConfig.java adb logcat -v threadtime|grep -Ei &quot;rotation|ActivityTaskManager|WindowOrientationListener&quot; Settings设置开启/关闭自动旋转屏幕是否要自动转屏是在Setting中设置的。为了监听Setting中的改动，系统启动时，PhoneWindowManager的init()函数中创建了SettingsObserver对象。 它的observe()方法会监听Settings.System.USER_ROTATION的值（Android Q中此处没有这个property了）。 当用户在Setting中设置自动转屏后，会触发以下流程： public boolean onPreferenceTreeClick(Preference preference)：packages/apps/Settings/src/com/android/settings/accessibility/AccessibilitySettings.java handleLockScreenRotationPreferenceClick()：被调用 setRotationLockForAccessibility(Context context, final boolean enabled) frameworks/base/core/java/com/android/internal/view/RotationPolicy.java setRotationLockForAccessibility frameworks/base/core/java/com/android/internal/view/RotationPolicy.java setRotationLock(final boolean enabled, final int rotation)调用wm.freezeRotation或者wm.thawRotation frameworks/base/core/java/com/android/internal/view/RotationPolicy.java thawRotation()，此处在Android Q中有变化。 frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java 而freezeRotation函数，只是调用PhoneWindowManager的setUserRotationMode的参数不一样，这里是Locked，而thawRotation传下去的参数是free。 frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java setUserRotationMode(int mode, int rot)：此处是设置property（即Settings数据库），然后会触发到上面初始化的mSettingsObserver对象的onChange函数。 触发监听SettingsObserver.onChange()， 其中主要调用了updateSettings()和updateRotation()两个函数。 简单地说，主要的工作是根据需要监听传感器数据，据此判断是否要转屏。如果需要就是对configuration的各种更新。过程中会冻结屏幕，同时截屏并以此作为转屏动画。另外还需要将新configuration传给AMS，广播该事件给需要的模块，同时App也会被调度来响应变更。 frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java 第一个函数updateSettings()如它的名字主要更新设置信息。 如果UserRotation（朝向信息，如Surface.ROTATION_0）和UserRotationMode（USER_ROTATION_FREE vs. USER_ROTATION_LOCKED）有更新，就设置标记updateRotation为true，表示接下去需要更新rotation相关信息。 此外，如果UserRotationMode的配置有变，由于需要传感器信息的配合，还需调用updateOrientationListenerLp()来设置或取消监听传感器。 这里假设设置为自动旋转，那么PhoneWindowManager会通过MyOrientationListener来监听传感器信息。MyOrientationListener是WindowOrientationListener的继承类。它的enable()函数中调用SensorManager提供的registerListener()接口来设置Sensor信息的listener。 updateOrientationListenerLp()：作用是enable和disable传感器 其中的mOrientationListener.enable和mOrientationListener.disable是注册传感器回调和去除传感器回调。 mOrientationListener是MyOrientationListener对象，而MyOrientationListener类继承父类WindowOrientationListener，从而会调用父类的enable函数。 该函数中会调用registerListener向SensorManager注册一个监听。 frameworks/base/services/core/java/com/android/server/policy/WindowOrientationListener.java registerListener()的具体实现在frameworks/base/core/java/android/hardware/SensorManager.java中。 然后调用SystemSensorManager.java的registerListenerImpl()，其中会创建SensorEventQueue对象（基类为BaseEventQueue），它是传感器事件的队列，记录需要监听哪些传感器信息。 SensorEventQueue queue = mSensorListeners.get(listener); 同时它也负责与SensorService的连接和通信，可以说是SensorEventListener与SensorService间的桥梁。 SensorEventListener和SensorEventQueue之间是1:1的关系，它们的映射关系保存在成员mSensorListeners中。如果这里注册的SensorEventListener还没有相应的SensorEventQueue，则新建一个，然后通过addSensor()方法将要关注的传感器进行注册。这个过程中addSensor()调用了enableSensor()，它最终是通过SensorService的enableDisable()方法来完成注册工作的。 这样，SensorService就开始监听该Sensor，当底层有传感器数据来时，SensorService主线程中会调用相应SensorEventConnection的sendEvents()将之发给对应的Client。 前面初始化SensorEventQueue时会创建Receiver，它是一个Looper的回调对象，在Client端收到从SensorService来的数据后被回调。 当有数据收到时Receiver的handleEvent()被调用，继而通过JNI调用到SystemSensorManager::dispatchSensorEvent()。 接着就调到了WindowOrientationListener的onSensorChanged()函数。该函数计算是否需要转屏。如果需要转屏，将计算结果传给onProposedRotationChanged()。 比如以下函数的日志打印，在旋转手机，传感器会触发屏幕旋转打印这部分log： frameworks/base/services/core/java/com/android/server/policy/WindowOrientationListener.java 另一处updateRotation(false)函数会调用到WMS.java，然后调用到updateRotationUnchecked函数。 最终在该函数中调用rotationChanged = displayContent.updateRotationUnchecked(); 屏幕旋转假设现在用户转了屏幕，期望转屏事件发生。如上面第九步的代码，onProposedRotationChanged()被调用。 最后就调用其run函数，run函数先会提升性能（cpu频率），然后调用了updateRotation，这个函数一样就到WMS的updateRotationUnchecked函数。 frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java updateRotation()中主要是执行两个函数：updateRotationUnchecked()（displayContent.updateRotationUnchecked()）和sendNewConfiguration()。前者执行转屏动作，包含转屏动画等。后者使AMS获取当前新的configuration，并且广播该事件给所有相应的listener。 frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java Note:: 其它途径可能会触发转屏，比如应用请求转屏。例如需要横屏的游戏（通过frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java的updateOrientationFromAppTokensLocked()方法）。 updateRotationUnchecked函数frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java updateDisplayAndOrientation函数还会调用到updateDisplayAndOrientation函数，会把各种数据更新下放到DisplayInfo中，最后调用了DisplayManagerService的setDisplayInfoOverrideFromWindowManager函数。 frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java setDisplayInfoOverrideFromWindowManager会调用setDisplayInfoOverrideFromWindowManagerInternal，然后调用display.setDisplayInfoOverrideFromWindowManagerLocked(info)函数，最后到LogicalDisplay的setDisplayInfoOverrideFromWindowManagerLocked函数中，把DisplayInfo数据放到了mOverrideDisplayInfo中。 frameworks/base/services/core/java/com/android/server/display/LogicalDisplay.java performTraversal处理显示Layer的大小宽高尺寸调用到DisplayManagerService.java中，然后调用performTraversalInternal函数。 frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java configureDisplayLocked函数的这部分代码就是设置layer的显示大小，例如viewport，通过Dump SF可以查看layer。 frameworks/base/services/core/java/com/android/server/display/LogicalDisplay.java setProjectionLocked会调用SurfaceControl的SurfaceControl函数。然后在SurfaceControl中调用nativeSetDisplayProjection函数，通过JNI调用到Native层。 frameworks/base/services/core/java/com/android/server/display/DisplayDevice.java 此时Java层的updateRotationUnchecked函数分析完。 sendNewConfiguration函数从上面的updateRotation()函数中看到，除了调用updateRotationUnchecked()（即displayContent.updateRotationUnchecked()），还会调用sendNewConfiguration()。 frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java 应用强制设置屏幕方向之前提过，其它途径可能会触发转屏，比如应用请求转屏。例如需要横屏的游戏（通过frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java的updateOrientationFromAppTokensLocked()方法）。 首先调用AMS的setRequestedOrientation函数，然后调用到ActivityRecord的setRequestedOrientation函数。 frameworks/base/services/core/java/com/android/server/am/ActivityRecord.java 其中调用到frameworks/base/services/core/java/com/android/server/wm/AppWindowContainerController.java的mWindowContainerController.setOrientation函数。 frameworks/base/services/core/java/com/android/server/wm/AppWindowContainerController.java 该函数调用到WMS的updateOrientationFromAppTokensLocked函数。这个函数先调用另一个updateOrientationFromAppTokensLocked函数，根据这个函数的返回值，返回true代表要旋转，就调用computeNewConfigurationLocked计算Configuration返回。 WMS.java 应用Activity强制设置方向 Activity： 如果要强制设置一个Activity的横竖屏可以通过Manifest去设置，跟Activity相关的信息都会保存在ActivityInfo当中。 Window 如果是要强制设置一个Window的横竖屏可以通过LayoutParams.screenOrientation来设置。在通过WindowManager.addView的时候把对应的LayoutParams传递给WMS。 "},{"title":"Android InputDispatcher获取点击事件","date":"2020-05-20T15:52:00.000Z","url":"/Blog/2020/05/20/2020/200520_android_input_notifyMotion/","tags":["display","input"],"categories":["android"],"content":" Input点击事件从InputReader会传到InputDispatcher进行处理。针对一些点击调试方式和日志打印，来分析InputDispatcher获取点击事件的部分流程。参考上一篇《Android 触控事件分析》： Input down/up事件查看在开发者选项打开“显示点按操作反馈”和“指针位置”，通过adb shell getevent -lrt命令，然后点击屏幕可以查看到控制台的打印。 查看帮助：adb shell getevent -h 打印结果包含Input的down/up事件，以及点击点的坐标（十六进制）: systrace分析抓取Systrace可以查看到触屏的整个事件，从InputReader开始，然后到deliverInputEvent触发APP绘制。关于报点可以重点关注inputflinger模块的log打印，会打印input的坐标。(参考：) input debug开关打开抓取日志分析 然后抓取log可以看到类似InputDispatcher: notifyMotion、dispatchMotion这些日志打印。 日志打印分析代码流程inputReader通过QueuedInputListener负责读取触摸事件交给 InputDispatcher 进行事件派发。 首先在构造函数中new一个QueueListener对象： frameworks/native/services/inputflinger/InputReader.cpp 在InputReader::loopOnce()循环等待消息 flush刷新将遍历QueuedInputListener中mArgsQueue的数组元素，触发每一个元素NotifyArgs的notify方法，交给内部InputDispatcher，清空数组。 frameworks/native/services/inputflinger/InputListener.cpp 结构体NotifyMotionArgs/NotifySwitchArgs/NotifyDeviceResetArgs继承自NotifyArgs，所以执行NotifyArgs的notify函数。调用派发者InputDispatcher的通知notifyMotion，将自己交给派发者。 frameworks/native/services/inputflinger/InputListener.cpp InputDispatcher获取数据 触发InputDispatcher.cpp的notifyMotion函数，读取线程InputReaderThread在处理事务，notifyMotion方法之后会唤醒分发线程，接下来的任务就由分发线程处理。 frameworks/native/services/inputflinger/InputDispatcher.cpp Note：注意：mLooper属于InputDispatcher，InputManager创建InputDispatcher时，在其构造方法同时创建mLooper，创建的线程是服务线程，并非读取或分发线程这里只是借用了Looper提供的epoll唤醒与休眠机制，在分发线程中InputDispatcherThread中使用mLooper休眠，读取线程负责唤醒。 数据封装成MotionEntry，然后作为enqueueInboundEventLocked函数的入参，插入到mInboundQueue队列尾部。 frameworks/native/services/inputflinger/InputDispatcher.cpp InputDispatcherThread分发线程被唤醒 参考： 在InputDispatcherThread线程threadLoop循环中，触发InputDispatcher的dispatchOnce方法。然后调用dispatchOnce方法。 frameworks/native/services/inputflinger/InputDispatcher.cpp 利用Looper在epoll_wait处进入休眠，休眠timeoutMillis时间仍无事件，threadLoop会一直循环，继续dispatchOnce。当被唤醒时，执行switch循环进入dispatchOnceInnerLocked取出队列中的事件。 frameworks/native/services/inputflinger/InputDispatcher.cpp Notes:Looper借助epoll机制实现线程休眠，它本身内部有套接字mWakeEventFd，在rebuildEpollLocked建立时，注册到epoll_ctl监听。因此wake方法就是向mWakeEventFd套接字发送一段字符，促使epoll_wait处的线程能监听到，从而InputDispatcherThread线程被唤醒。 InputDispatcher事件处理 InputDispatcher#dispatchMotionLocked处理MotionEntry。此处函数开头会有类似InputDispatcher: dispatchMotion - eventTime= ...的日志打印。 frameworks/native/services/inputflinger/InputDispatcher.cpp InputTarget结构体InputTarget结构体可以说是inputDispatcher与目标窗口的转换器。其分为两大部分： 一个是枚举中存储的inputDispatcher与目标窗口交互的标记， 另一部分是inputDispatcher与目标窗口交互参数，比如： inputChannel，它实际上是一个SocketPair，SocketPair用于进程间双向通信，这非常适合inputDispatcher与目标窗口之间的通信，因为inputDispatcher不仅要将事件分发到目标窗口，同时inputDispatcher也需要得到目标窗口对事件的响应。 xOffset和yOffset，屏幕坐标系相对于目标窗口坐标系的偏移量，MotionEntry(MotionEvent)中的存储的坐标是屏幕坐标系，因此就需要注释2和注释3处的参数，来将屏幕坐标系转换为目标窗口的坐标系。 frameworks/native/services/inputflinger/InputDispatcher.h 处理点击事件findTouchedWindowTargetsLocked 参考：在函数dispatchMotionLocked中，会分别对Motion事件中的点击形式事件和非触摸形式事件做了处理。其中点击事件调用函数findTouchedWindowTargetsLocked。 函数末尾会打印类似日志InputDispatcher: findTouchedWindow finished: injectionResult=0, injectionPermission=1, timeSpentWaitingForApplication=0.0ms，injectionResult=0是succeed，injectionPermission=1是允许。 frameworks/native/services/inputflinger/InputDispatcher.cpp dispatchEventLocked向目标窗口发送事件 上面函数dispatchMotionLocked的末尾，会执行dispatchEventLocked函数，将事件分发给inputTargets列表中的分发目标（目标窗口）。 frameworks/native/services/inputflinger/InputDispatcher.cpp 开始事件发送，最终会通过inputTarget中的inputChannel和窗口进行进程间通信，最终将Motion事件发送给目标窗口。 然后调用startDispatchCycleLocked（在函数dispatchMotionLocked末尾处），最终调用两种事件的connection-&gt;inputPublisher...函数，至此，InputDisapatcher结束。 "},{"title":"Android Input事件ANR流程","date":"2020-05-10T15:32:00.000Z","url":"/Blog/2020/05/10/2020/200510_android_inputANR/","tags":["display","input"],"categories":["android"],"content":" Android Input体系中，大致有两种类型的事件：实体按键key事件，屏幕点击触摸事件。如果根据事件类型的不同，还能细分为基础实体按键的key(power，volume up/down，recents，back，home)，实体键按键，屏幕点击(多点，单点)，屏幕滑动等事件。在Android整个Input体系中有三个格外重要的成员：Eventhub，InputReader，InputDispatcher。它们分别担负着各自不同的职责，Eventhub负责监听/dev/input产生的Input事件；InputReader负责从Eventhub读取事件，并将读取的事件发给InputDispatcher；InputDispatcher则根据实际的需要具体分发给当前手机获得焦点实际的Window。常说的Input ANR超时，都是指的是Input事件分发超时。 参考：参考：参考： 问题日志从下面的log可以看到超过了5s导致发生Input ANR事件。 main log： system log： 代码分析循环读取分发Input事件在frameworks/native/services/inputflinger/InputDispatcher.cpp中，流程从InputDispatcherThread::threadLoop()线程循环开始，方法体只调用循环一个函数mDispatcher-&gt;dispatchOnce()。 如果没有等待的命令，则会循环运行主要函数dispatchOnceInnerLocked不断的读取并分发Input事件： frameworks/native/services/inputflinger/InputDispatcher.cpp 该函数最后调用了dropInputEvent事件dropInboundEventLocked(mPendingEvent, dropReason); 若case EventEntry::TYPE_KEY如果是Key事件，则会执行InputDispatcher::dispatchKeyLocked函数。然后在该函数中调用findFocusedWindowTargetsLocked 在函数findFocusedWindowTargetsLocked中开始就会进行判断，当focusedWindowHandle == nullptr但是focusedApplicationHandle != nullptr的时候调用handleTargetsNotReadyLocked报出ANR的错误日志。 frameworks/native/services/inputflinger/InputDispatcher.cpp InputDispatcher::handleTargetsNotReadyLocked执行代码： frameworks/native/services/inputflinger/InputDispatcher.cpp ANR的函数调用onANRLocked最后发生ANR调用InputDispatcher::onANRLocked frameworks/native/services/inputflinger/InputDispatcher.cpp 分析方法 抓取systrace分析：可以分析Input事件的部分 系统的Trace log：系统生成的Trace文件保存在data/anr,可以用过命令adb pull data/anr/取出。 抓取日志分析 可能导致ANR的原因 怀疑是不是在Activty oncreate和onstart耗时太多，导致窗口还未创建好，input事件超时5s应用窗口是在onResume中才去向WindowManager添加注册的。因此在注册添加窗口之前，application或者启动的Activity的生命周期onCreate，onStart的任意方法，做了耗时操作，或者他们加载一起的执行时间过长，都是能够导致无窗口，有应用类型的Input ANR问题发生的。所以实际开发应用的时候，就要尽可能的把耗时的操作，异步处理。具体异步实现思路可以使用new thread + handler，Asynctask，HandlerThread等等，这里推荐使用HandlerThread，因为google封装的接口，使用起来简单。 可能是UI主线程做了耗时的操作。 "},{"title":"C++字符串比较函数strcmp和strstr的用法","date":"2020-04-14T15:32:00.000Z","url":"/Blog/2020/04/14/2020/200413_cpp_strstrTostrcmp/","tags":["cpp"],"categories":["cpp"],"content":" 今天碰到一个细节bug，使用strcmp来比较两个字符串是否完全相同。但是忽略了一个问题，如果存在一个字符串包含在另一个字符串呢？此时就会发现需要用strstr函数。 strcmp函数比较字符串大小设这两个字符串为str1、str2， 若str1 == str2，则返回零； 若str1 &lt; str2，则返回负数； 若str1 &gt; str2，则返回正数。 测试类： testFunc_strcmp.cpp 运行： strstr函数比较字符串是否相同或者存在包含关系如果两个字符串可能存在相同，并且可能会有包含关系，则需要使用strstr函数来比较字符串。如果不包含（或相同），则返回NULL。 测试类： testFunc_strstr.cpp 运行： "},{"title":"Android HWC2硬件合成","date":"2020-04-01T15:32:00.000Z","url":"/Blog/2020/04/01/2020/200401_android_HWC2_Display/","tags":["graphics"],"categories":["android"],"content":" 转载夕月风大佬博客： 参考Android P AOSP源码添加修改部分内容参考源码：  显示屏Display 显示屏Display是合成的另一个重要单元，系统可以有多个显示设备，并且在正常系统操作期间可以添加/删除显示设备。该添加/删除操作可以对应HWC设备的热插拔请求，或者应客户端的请求进行，这允许创建虚拟显示设备，其内容会渲染到离屏缓冲区（而不是物理显示设备）。 可以通过Dump SF查看display的layer信息，同时也可以根据layerstack异同判断多个display是否用的同一个layer。 HWC中，SurfaceFlinger中创建的Layer，在合成开始时，将被指定到每个Display上，此后合成过程中，每个Display合成指定给自己的Layer。 SurfaceFlinger前端，每个显示屏用DisplayDevice类描述，在后端显示数据用DisplayData描述。而在HWC2的Client端，定义了Display类进行描述。对于HWC2服务端则用hwc2_display_t描述，他只是一个序号，Vendor具体实现时，才具体的去管理Display的信息。 HWC2提供相应函数来确定给定显示屏的属性，在不同配置（例如4K/1080分辨率）和颜色模式（例如Native颜色或者真彩sRGB）之间切换，以及打开/关闭显示设备或者将其切换到低功率模式（如果支持）。 HWC设备composerDeviceNote:注意显示屏Display和合成设备的区别，HWC合成设备只有一个，定义在头文件： hardware/libhardware/include/hardware/hwcomposer2.h HWC合成服务hardware/interfaces/graphics/composer/2.1/default这个HWC的的默认服务。SurfaceFlinger初始化时，可以通过属性debug.sf.hwc_service_name来制定，默认为default。在编译时，manifest.xml中配置的也是default。 HWC服务分两部分： 可以执行程序android.hardware.graphics.composer@2.1-service（在目录/vendor/bin/hw/） 其main函数如下，通过defaultPassthroughServiceImplementation函数注册IComposer服务。 对应.rc文件： 实现库android.hardware.graphics.composer@2.1-impl.so hwc的执行程序中，注册的IComposer，将调到对应的FETCH函数，FETCH函数实现及是so库中。FETCH如下： FETCH函数中，才正在去加载Vendor的实现，通过统一的接口hw_get_module根据IDHWC_HARDWARE_MODULE_ID去加载。加载完成后，创建HAL描述类似HwcHal。 如果是FrameBuffer驱动，通过initWithFb初始化。如果是HWC驱动，通过initWithHwc初始化。我们需要的是HWC2的接口，如果不是HWC2的HAl实现，那么需要做适配。 Client和Server的通信SurfaceFlinger和HWC服务之间，很多函数，并没有直接的调用，而是通过Buffer的读写来实现调用和参数的传递的。所以，Client端和Server端通信，基本通过以下相关的途径： 通过IComposerClient.hal接口 通过IComposer.hal接口 通过command Buffer Server端回调Client端，通过IComposerCallback.hal接口。 hal接口的方式，其本质就是Binder。又加了一个command Buffer的方式，其实这是为了解决Binder通信慢的问题。 HWC2中Fence的更改HWC 2.0 中同步栅栏的含义相对于以前版本的HAL已有很大的改变。 在 HWC v1.x 中，释放Fence和退出Fence是推测性的。在帧 N 中检索到的Buffer的释放Fence或显示设备的退出Fence不会先于在帧 N + 1 中检索到的Fence变为触发状态。换句话说，该Fence的含义是“不再需要您为帧 N 提供的Buffer内容”。这是推测性的，因为在理论上，SurfaceFlinger 在帧 N 之后的一段不确定的时间内可能无法再次运行，这将使得这些栅栏在该时间段内不会变为触发状态。 在 HWC 2.0 中，释放Fence和退出Fence是非推测性的。在帧 N 中检索到的释放Fence或退出Fence，将在相关Buffer的内容替换帧 N - 1 中缓冲区的内容后立即变为触发状态，或者换句话说，该Fence的含义是“您为帧 N 提供的缓冲区内容现在已经替代以前的内容”。这是非推测性的，因为在硬件呈现此帧的内容之后，该栅栏应该在 presentDisplay 被调用后立即变为触发状态。 Notes: 关于Fence同步机制需要单独拎出来梳理学习。"},{"title":"智能健身车","date":"2020-04-01T13:32:00.000Z","url":"/Blog/2020/04/01/2020/200401_diary_exerciseBike/","tags":["diary"],"categories":["diary"],"content":" 市面上关于智能健身车的款式还是太少了，以智能健身车品牌KM1930实景智能健身车来看，价钱也是偏贵。大部分都还只能算是普通的动感单车。 但是提到顽鹿竞技、zwift，就有很多骑手会用骑行台、自己的自行车等设备在家模拟骑行，智能健身车目前的方向就是将这些一体化，而且更偏向智能、简约、便捷。 智能健身车智能健身车可以具备接入互联网（一般都是通过蓝牙）、能够进行独立数据采集处理运算能力的健身车。也就是说，健身车成了像手机、智能手表等等一样的智能硬件。当下的智能健身车一般会具备以下智能体验，最起码包括： 运动数据检测以及采集、运算、反馈的体验（比如说心率、踏频这些运动数据的获取）； 在线社交的体验，比如国内的顽鹿竞技，国外的zwift，健身车可以通过蓝牙连接到这些APP，通过数据的传输，模拟骑车，而且能够多人一起竞赛； 自动调节阻力，能够根据路况调节阻力。 两千内的智能健身车这两天一直想入手一辆智能健身车，下班之余可以在家运动运动。通过一些模拟骑行APP更有趣，边骑车边玩游戏，和VR眼镜打游戏一样，让运动更加游戏性。在网上查了资料，比较倾向于2000以内的几种款型，以下这三种：骑纪智能健身车、小米NEXGIM智能健身车、顽鹿健身车。 - 骑纪智能健身车 小米NEXGIM智能健身车 顽鹿游戏功率健身车（京东众筹） 价钱 1578 1699 999（众筹活动） 尺寸 长86高110宽44，折叠后长63高54宽44 长88宽50.5高121 长85宽54高127 电源 插电 插电 内置两节5号电池 重量 N/A 28kg 25.1kg 阻力 精密电机磁控,32档智能阻力控制，自动换挡，根据上下坡度自动调节 自动调节电机阻力 磁控阻力调节，非自动换挡，8级速度档位匹配 蓝牙 智能蓝牙5.0 蓝牙 普通蓝牙连接 心率测量 有 无 N/A 踏频记录 有 测量踩踏功率 有 静音磁控 有 静音 有 实时功率 有 有 有 功率精度 N/A 50W以上&gt;=90% 50W以上+-5% 车身 车把角度可以调整 多功能控制旋钮，手动调节阻力大小、档位高低、，可查看时间、扭力、功率、踏频等 飞轮 全包金属 全包活飞 全包 传动方式 N/A 皮带传动 皮带传动 游戏模式 自己微信小程序、zwift,Kinomap,Ride Social,Trainer Road,FulGaz，顽鹿 zwift,顽鹿，自己的APP-NEXGIM 顽鹿、zwift 其他 卡路里、距离、速度，智能芯片手动升级，可折叠 N/A 坐凳可以前后调节 "},{"title":"Android 两种实时获取FPS的方法","date":"2020-03-31T15:32:00.000Z","url":"/Blog/2020/03/31/2020/200330_android_getFPS/","tags":["android"],"categories":["android"],"content":" 通过ADB命令实时获取FPS帧率有两种方式，一种是dump gfxinfo，一种是dump SF --latency。其他还可以通过三方APP GameBooster（Google PlayStore可以下载）打开实时FPS监控查看。如果是查看动画是否丢帧，可以通过视频工具QuickTime Player逐帧查看需要测试的动画的拍摄视频。一般每4帧会出现一个新的动画，录制视频查看这个过程是有动画虚影的。 dumpsys gfxinfo dumpsys是一款运行在设备上的Android工具，将 gfxinfo命令传递给dumpsys可在logcat中提供输出，其中包含各阶段发生的动画以及帧相关的性能信息。但是gfxinfo不统计SurfaceView。 步骤： 打开开发者选项中的HWUI呈现模式分析，选择“在adb shell dumpsys gfxinfo中” 在需要测试的界面获取包名，可以使用dump SF/activity获取 清空后台任务，操作UI滑动，然后执行获取adb shell dumpsys gfxinfo &lt; PACKAGE_NAME &gt; framestats信息和frame耗时信息通常为2s收集一次（一次120帧，一帧16ms，耗时约2s）。如果要重置所有计数器重新收集帧率数据，执行adb shell dumpsys gfxinfo &lt; PACKAGE_NAME &gt; reset 案例例如测试我的设备一加六滑动桌面的帧率，执行上述的前两步： 然后滑动桌面执行adb shell dumpsys gfxinfo net.oneplus.launcher，获取到128帧的数据。 解析： Draw：构建java显示列表DisplayList的时间，也就是执行每一个View的onDraw方法,创建或者更新每一个View的DisplayList对象的时间。 Prepare：准备函数的执行耗时 Process：小号在Android的2D渲染器执行显示列表的时间，view越多，要执行的绘制命令就越多，耗时越长 Execture：消耗在排列每个发送过来的帧的顺序的时间.或者说是CPU告诉GPU渲染一帧的时间,这是一个阻塞调用,因为CPU会一直等待GPU发出接到命令的回复。所以这个时间，一般都很短。 Draw + Prepare+Process + Execute = 完整显示一帧 ，这个时间要小于16ms才能保存每秒60帧。 参数framestats如果需要获取详细的帧信息，可以使用Android 6引入的新参数framestats，执行adb shell dumpsys gfxinfo &lt; PACKAGE_NAME &gt; framestats 结果会打印额外的信息，以CSV格式输出。每一行代表应用程序生成的一帧。每一行的列数都相同，每列对应描述帧在不同的时间段的耗时情况。 解析： flags：FLAGS列为’0’的行可以通过从FRAME_COMPLETED列中减去INTENDED_VSYNC列计算其总帧时间。如果非零，则该行应该被忽略，因为该帧的预期布局和绘制时间超过16ms，为异常帧。 *IntendedVsync：帧的的预期起点。如果此值与VSYNC不同，是由于UI线程中的工作使其无法及时响应垂直同步信号所造成的； Vsync：花费在vsync监听器和帧绘制的时间（Choreographer frame回调，动画，View.getDrawingTime（）等）； OldestInputEvent：输入队列中最旧输入事件的时间戳，如果没有输入事件，则输入Long.MAX_VALUE。此值主要用于平台工作，对应用程序开发人员的用处有限。 NewestInputEvent：输入队列中最新输入事件的时间戳，如果帧没有输入事件，则为0。此值主要用于平台工作，对应用程序开发人员的用处有限。然而，通过查看（FRAME_COMPLETED - NEWEST_INPUT_EVENT），可以大致了解应用程序添加的延迟时间。 HandleInputStart：将输入事件分派给应用程序的时间戳（deliverInputEvent函数）。通过查看这段时间和ANIMATION_START之间的时间，可以测量应用程序处理输入事件的时间。如果这个数字很高（&gt; 2ms），这表明程序花费了非常长的时间来处理输入事件。例如View.onTouchEvent（），也就是说此工作需要优化，或者分发到不同的线程。请注意，某些情况下这是可以接受的，例如发起新活动或类似活动的点击事件，并且此数字很大。 AnimationStart：运行Choreographer注册动画的时间戳。通过查看这段时间和PERFORM_TRANVERSALS_START之间的时间，可以确定评估运行的所有动画器（ObjectAnimator，ViewPropertyAnimator和常用转换器）需要多长时间。如果此数字很高（&gt; 2ms），请检查您的应用是否编写了自定义动画以确保它们适用于动画。 PerformTraversalsStart：计算PERFORM_TRAVERSALS_STAR-DRAW_START，则可以获取到布局和测量阶段完成的时间。（注意，在滚动或动画期间，希望这应该接近于零） DrawStart：performTraversals的绘制阶段开始的时间。这是录制任何无效视图的显示列表的起点。这和SYNC_START之间的时间是在树中所有无效视图上调用View.draw（）所花费的时间。 SyncQueued：同步请求发送到RenderThread的时间。如果此时间和SYNC_START之间的时间很长（&gt; 0.1ms左右），则意味着RenderThread忙于处理不同的帧。在内部，这被用来区分帧做了太多的工作，超过了16ms的预算，由于前一帧超过了16ms的预算，帧被停止了。 SYNC_START：绘图的同步阶段开始的时间。如果此时间与ISSUE_DRAW_COMMANDS_START之间的时间很长（&gt; 0.4ms左右），则通常表示有许多新的位图必须上传到GPU。 IssueDrawCommandsStart：硬件渲染器开始向GPU发出绘图命令的时间。这段时间和FRAME_COMPLETED之间的时间间隔显示了应用程序正在生产多少GPU。像这样出现太多透支或低效率渲染效果的问题。 SwapBuffers：eglSwapBuffers被调用的时间。 *FrameCompleted：帧的完整时间。花在这个帧上的总时间可以通过FRAME_COMPLETED - INTENDED_VSYNC来计算。 这些数据可以直接通过修改开发者选项的HWUI呈现模式分析为在屏幕显示为条形图，如图： dumpsys SurfaceFlinger –latency adb shell dumpsys SurfaceFlinger --latency LayerName命令主要用于获取游戏/视频应用的fps数据。 第一行数据，表示刷新的时间间隔refresh_period，我的机器打印出来的间隔期是。即Dump SF里面的VSYNC period。剩下的127行（127帧）数据分为三部分，每一列表是一种类型。 第一列：表示应用绘制图像的时间点 第二列：SF将帧提交给H/W(硬件)绘制之前的垂直同步时间。 第三列：在SF将帧提交给H/W的时间点，算是H/W接受完SF发来数据的时间点，绘制完成的时间点。s 计算方式：一般打印出来的数据是129行（部分机型打印两次257行，但是第一部分是无效数据，取后半部分），取len-2的第一列数据为end_time，取len-128的第一列数据为start_time。 fps = 127/((end_time - start_time) / 1000000.0) 除以1000000是因为命令打印出来的是纳秒单位，要转为毫秒进行计算，127就是因为命令一次打印出来127帧的数据而已。 参考： 参考： 参考： "},{"title":"想把我唱给你听","date":"2020-03-26T12:32:00.000Z","url":"/Blog/2020/03/26/2020/200326_diary_our/","tags":["diary"],"categories":["diary"],"content":" 输入密码，查看文章  "},{"title":"Android SELinux权限笔记","date":"2020-03-25T14:32:00.000Z","url":"/Blog/2020/03/25/2020/200325_android_sepolicy_study/","tags":["android"],"categories":["android"],"content":" 在新增一个HIDL Service后，需要对其进行权限配置，不然通过adb shell ps -A|grep NAService会发现该service无法启动，也会通过抓取log发现一堆的avc: denied权限问题。关于SELinux可以推荐文档：， 非常详细，本文只是作为记录部分常用的笔记。 Android sepolicy，SEAndroid是一种基于安全策略的MAC安全机制。SEAndroid安全机制中的安全策略就是在安全上下文的基础上进行描述的，也就是说，它通过主体和客体的安全上下文，定义主体是否有权限访问客体。 例如添加一个service，在.rc文件定义了service，还需要在sepolicy的file_context中添加权限。 selinux相关命令 查看selinux开关状态：adb shell getenforce 可能返回结果有三种：Enforcing、Permissive 和 Disabled。Disabled 代表 SELinux 被禁用，Permissive 代表仅记录安全警告但不阻止可疑行为，Enforcing 代表记录警告且阻止可疑行为。 一般调试通过以下命令关闭SELinux权限（需重启生效）： 抓取SELinux Log 抓kernel log，adb shell dmesg 抓kernel log，使用命令,可以直接提出avc的log：adb shell &quot;cat /proc/kmsg | grep avc&quot; &gt; avc_log.txt adb logcat –b events,搜索关键字：avc: denied File_contexts 用于声明文件的安全上下文，plat前缀的文件用于声明system、rootfs、data等与设备无关的文件。Nonplat 用于声明vendor、data/vendor等文件。 domain.te 该策略文件会限制一些特征文件的权限，一般不建议修改。 selinux没有对某个文件的权限（有neverAllow）处理方法 参考： 意思是说明install_revovery没有block_device的权限 只要在install_recovery.te中加入下面权限就可以了。 allow install_recovery recover_block_device:blk_file { open read write }; Service_contexts 用于声明java service 的安全上下文， O上将该文件拆分为plat和nonplat前缀的两个文件，但nonplat前缀的文件并没有具体的内容（vendor和system java service不允许binder操作）。 Property_contexts 用于声明属性的安全上下文，plat 前缀的文件用于声明system属性，nonplat前缀的文件用于声明vendor 属性。ril.开头的属性的安全上下文为u:object_r:radio_prop:s0，这意味着只有有权限访问Type为radio_prop的资源的进程才可以访问这些属性。 Hwservice_contexts新增文件，用于声明HIDL service 安全上下文。 te语法 allow signal： 参考文档：   "},{"title":"Android RC文件分析","date":"2020-03-20T15:32:00.000Z","url":"/Blog/2020/03/20/2020/200320_android_rcFile_study/","tags":["android"],"categories":["android"],"content":" Android中最熟知的RC文件就是init.rc了，而在Hal接口服务定义中也会创建.rc文件。init.rc的语法分为行为(Actions),、命令(Commands) 、服务(Services)、选项(Options)。.rc文件是资源文件，包括比如对话框、菜单、图标、字符串等资源信息。使用.rc资源文件的目的是为了对程序中用到的大量的资源进行统一的管理。 android rc文件分析模板 结构：service关键字声明了你要定义一个service，而test就是这个service的名字，至于后面的目录则是这个service对应的可执行文件在系统中的位置（adb shell，即编译后的系统目录）。 init是分段(section)解析init.rc的，在keywords.h中可以查看关键字的定义。结合init.rc的内容，可以看出，init是以on 和 service来分段标记的。 例如： 关键字解释： 语法 关键字 说明 SECTION on 触发条件 同上.. service 解析service COMMAND chdir 更改当前工作目录 同上.. chroot 更改参考的根目录位置 .. class_start 开启class start all services(启动某个设置了class名称的服务) .. class_stop 停止某个设置了class名称的服务 .. domainname 域名 .. exec [ [ [ ] * ] ] – [ ] * 调用程序并转移进程(Fork一个进程然后执行命令) .. export 提交变量 .. hostname 主机名 .. ifup 激活网卡 .. insmod 挂载模块(安装一个module) .. import 引入init文件，比如etc下的一些rc文件，和java中的import差不多 .. mkdir [mode] [owner] [group] 建立目录 .. mount 挂载文件系统 .. setkey 从源码看，应该是设置一个命令的关键字缩写，比如可以将domainname映射为dn .. setprop 设置一个属性 .. setrlimit 设置当前程序可以打开的最大文件数到系统规定程序可以打开的最大文件数 .. start 启动服务 .. stop 停止服务 .. symlink 建立软链接 .. sysclktz 设置基准时间 .. loglevel Log输出级别，低于这个级别的就输出 .. restart 重启服务,类似stop 但是不会disable service .. bootchart_init 开启bootcharting .. chmod 改变文件执行权限 .. chown 改变文件的owner group .. enable 将一个disabled的service变成enabled。且start .. load_all_props 加载system vendor的属性 .. load_persist_props 加载data下面的persist属性 .. mount_all 挂载fstab中的设备 .. mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [ &lt;flag&gt; ]* [&lt;option&gt;] 挂载设备 .. powerctl 对sys.powerctl属性的respond .. restorecon &lt;path&gt; [ &lt;path&gt; ] * 恢复文件到sercurity context在file_contexts配置的 .. restorecon_recursive &lt;path&gt; [ &lt;path&gt; ]* 递归的恢复目录中的文件到sercurity context .. trigger &lt;event&gt; 触发触发器 .. wait &lt;path&gt; [ &lt;timeout&gt; ] poll for 给定的文件 或者 timeout时间到。如果时间没有设定，默认为5秒 .. write &lt;path&gt; &lt;content&gt; 打开文件，write string到给定文件。没有文件会被创建。有的话，会truncated OPTION(用来初始化Service的) capability 能力，也就是系统对进程的一种权限控制。 同上.. class 设置class name .. console 启用控制台 .. critical 是否关键，也就是4分钟之内重启超过4次的话，重启之后就进入recovery模式 .. disabled 当它的class启动时，Service不会自动开启。必须显示的started by name(用其名字) .. group [ ]* 组归属（改变username当执行这个Service之前） .. oneshot 只启动一次，意外退出后不必重启 .. onrestart 执行一个命令，当Service重启时 .. setenv 增加环境变量 .. socket 申请socket资源 .. user 用户归属（改变username当执行这个Service之前） .. ioprio io调度优先级 .. writepid &lt;file…&gt; 当fork一个子进程时，写子进程的pid到一个给定的文件。是给cgroup/cpuset使用 .. Triggers Triggers被用来匹配事件，然后加入执行队列。 .. boot 当init开启时，这是第一个执行的trigger class &lt;name&gt; class &lt;name&gt;意思是为该服务定义一个类名，所有在这个类名下的服务都将一起启动和停止、如果没有定义class选项，则默认class deafult。 定义为核心service，当class core服务启动时，这个vold启动。如果是定义class hal，是不会自动启动的。可以定义为class main能够自动启动。 通过adb shell ps -A|grep 关键字查看进程服务。 on &lt;name&gt; on属于行为。 on early-init: init之前、加载完所有rc文件后即执行，init.rc在early-init执行的是start ueventd，根据keywords.h的定义，start是个命令(COMMAND)。 on init: 加载propety各项属性文件之前执行，在init变为propety service之前都属于init阶段。 on early-boot: 启动属性服务后即执行。 on boot: boot的时候执行。 on property:xxxxx=x: 当某个属性设置为预期值时执行。 "},{"title":"Android 触控事件分析","date":"2020-03-17T14:32:00.000Z","url":"/Blog/2020/03/17/2020/200317_adnroid_touchEvent/","tags":["display","input"],"categories":["android"],"content":" 我们常见的触摸事件除了按下，弹起，移动之外还有很多，诸如长按，双击，Scroll，Fling等，他们是怎么判断的，还有这些长按，双击等事件的时间能否自由设置。可以在开发者选项中打开“显示点按操作反馈”和“指针位置”，同时可以打开inputflinger模块的log开关做一些调试，分析TP报点。 一般当我们需要处理触摸事件时有两种方式： 委托式 ： 将事件委托给监听器来进行处理。即定义一个View.onTouchListener()子类的监听器，由其onTouch()方法来处理。 回调式 ： 通过重写View类自己的onTouchEvent()方法来处理，在执行时会回调该方法，在其中执行自定义的代码。 关于主触点，副触点：发送触屏事件的时候，除了此触屏事件所对应的触点之外，如果当前触点多于一个或者等于一个，则此事件为副触点事件，发送此事件的触点叫做副触点。否则为主触点事件，发送此事件的触点为主触点。 MotionEvent对象事件处理在MotionEvent.java中,ACTION动作事件定义 （1） 首先当点击下屏幕，触屏事件从View.java的onTouchEvent()开始处理： （2） 事件响应是先有按下才会有后续事件。因此先查看ACTION_DOWN。在此case中判断如果是在scrollingContainer中则等待一段时间执行检查是否为Tap事件。因为可能按下之后可能会有scroll操作，如果有将丢弃长按检测。而如果不在container中，则立即执行长按检测。 view.java （3） 在其中执行了setPressed()操作，其后执行checkForLongClick()，即等待500ms-180ms 来执行longPress操作。 在其中执行performLongClick()。在该函数中处理长按需要做的事情，例如长按监听器中流程，显示contextMenu，处理长按震动反馈： Note: 此处有两个时间数据： tapTimeout 和 longPressTimeout。 定义在frameworks/base/core/java/android/view/ViewConfiguration.java，时间是可以自定义的，但最好采用google提供的，这是经过大量积累得来的数据。而此处的longTimeout是设置辅助功能界面中’触摸和按住延迟’选项可设置的，如果没有设置那就是用默认的500ms。 MotionEvent底层事件获取（触控事件分发机制）（1） 在onResume时会将view显示出来，跟踪代码到执行时会调用ActivityThread的handleResumeActivity()。可以看到获取window的DecorView，即整个window的顶层View。调用流程为:（创建窗口） WindowManager.addView()； 在实现类WindowManagerImpl中实现addView()； 最后一行通过root.setView()； 在ViewRootImpl中实现setView()； 在其中调用windowSession.add()。 windowSession为客户端，而服务器端为Session.java,在Session中转而调用WindowManagerService的addWindow()来实现add方法。 （2）WindowManagerService中addWindow这里实现了事件信息传递和交互的通道，内部采用socketpair，通过InputChannel来实现。 Note：openInputChannelPair(), 在其中创建socketpair,一个匿名的已连接套接字，一个为发送端，一个为接收端，可以进行双工通讯（UNIX网络编程）。 获取InputChannel, 一个置为Input，一个置为output。RegisterInputChannel中调用nativeRegisterInputChannel。 （3）在WindowManagerService中创建InputManagerService类（InputManagerService.java）对象，并start。 之后通过JNI流程在native中执行，并执行InputManager的start方法。 （4）在创建InputReader时会将dispatcher传入。即InputReader的成员变量mQueuedListener为dispatcher的执行者，具体代码分析flush函数，关注Args，例如MotionArgs, flush执行后，将调用dispatcher-&gt;notifyMotion(); 如果只关注Motion的话，那么就是调用InputDispatcher-&gt;notifyMotion()。 从抓取Systrace可以查看到触屏的整个事件，从InputReader开始，然后到deliverInputEvent触发APP绘制。关于报点可以重点关注inputflinger模块的log打印，会打印input的坐标。 systrace查看Input事件流程 参考： 参考：  触摸屏每隔几毫秒（如果是60刷新率，则一秒扫描屏幕120次，大概8ms扫描一次）扫描一次，如果有触摸事件，那么把事件上报到对应的驱动。 InputReader 读取触摸事件交给 InputDispatcher 进行事件派发。 InputDispatcher 将触摸事件发给注册了 Input 事件的 App。 App 拿到事件之后，进行 Input 事件分发，如果此事件分发的过程中，App 的 UI 发生了变化，那么会请求 Vsync，则进行一帧的绘制。 详细分析所以systrace从InputReader开始：（前面还有一点很短的“binder transaction”的时间） frameworks/native/services/inputflinger/InputReader.cpp 然后会到InputDispatcher的dispatchMotionLocked函数，并且InputDispatcher会从InboundQueue中取出Input事件派发到各个App(连接)的OutBoundQueue(OutboundQueue区域oq) frameworks/native/services/inputflinger/InputDispatcher.cpp 然后到deliverInputEvent，说明APP UI Thread被Input事件唤醒；（起始点可以看到当前APP的Launcher是1，value=1表示有一个input事件，如果主线程卡顿没法及时处理Input事件，这里的Value会堆积） 之后则是APP的UI线程启动，然后再触发APP的绘制线程进行绘制等等。"},{"title":"Android Systrace如何抓取分析问题","date":"2020-02-22T12:32:00.000Z","url":"/Blog/2020/02/22/2020/200222_android_systrace_study/","tags":["graphics"],"categories":["android"],"content":"UI流畅平滑的systraceSystrace获取：Android\\Sdk\\platform-tools\\systrace systrace.py：python systrace.py --time=10 -o trace.html gfx input view webview wm am sm audio video hal res dalvik bionic power pm ss pdx sched freq idle load binder_driver binder_lock 默认Tag with: sched freq idle res ss gfx input view am 常用：./systrace -t 3 -b 10240 -o test.html sched freq idle res ss gfx input view am hal power wm 需要开的Tag 需求 tags cpu信息 sched/freq/idle 测试列表滑动，桌面滑动等流畅性问题 gfx/view/input/hwui 测试app launch，点击某个应用，点击进入某个界面 gfx/view/input/dalvik/disk 怀疑有power问题（亮灭屏，电量相关） gfx/view/input/res/am/wm/power time和buffer size一般我给的是-t 3 -b 8000 如果抓5s，-b可以给20480（kb） 如果时间再长，-b可以给30720（kb） 视频获取动画过程:指手机画面开始动的前一帧到画面停止动(完全显示，最后一帧)的过程，所以动画过程时间，依据动画不同，记录的时间也会不同。在播放高清视频时，影格数就表示画面所更新的次数，需要仔细观察视频画面。其中一影格就是手机更新画面时动一次，一般在fps为60的平台上，通常是一帧画面就会动一次，也就是一影格，而对于fps为30的平台，通常是两帧表示一影格。 FPS:表示每秒刷新的帧数，是画面流畅性的一个重要指标,那它是如何计算出来的呢（影格数除以动画时间） FPS:特定的区段时间内,每秒平均更新画面的次数。 数值的高低不能代表画面的流畅度 流畅度还是会跟画面的内容有关系（例如分辨率） 目前常用的FPS计算方法： systrace所录到的queuebuffer个数计算区段时间内的刷新次数 高速摄影机在区段时间内的刷新次数 从绘图流程的角度来看,这些FPS的意义是类似的：如果只有单一图层更新的情况,表示从APP画图到display显示的频率。 常见FPS TestCase： App 界面滑动换页的流畅性 browser浏览网页的流畅性 包含列表控件(list menu)界面卷动的流畅性 Contact list界面卷动的流畅性 Launch app 过场动画流畅性 Status bar下拉的流畅性 systrace查看绘制过程是否有问题（FPS）如图： 首先查看VSYNC周期是否正常，是否有进行vsync tunning； 查看是否queuebuffer成功？ 绘制之前调用dequeuebufffer从BufferQueue获取一个buffer，绘制完成会调用queuebuffer放回BufferQueue。 如果正常queuebufffer,则查看SF合成 如果queuebufffer不正常，则查看是否是queuebuffer阻塞？ 如果queuebuffer阻塞，则看GPU 若不是，查看HWUI绘制是否成功？ 如果HWUI没有绘制，则检查UIThread（UI线程） 如果UIThread调用了runnable，则查看SS（不清楚具体表示什么？） 如果skia耗费太长时间，则查看skia的代码（绘制API） 如果是view耗费太长时间，则查看view模块的代码 如果UI线程状态正常，则查看第三方APP是否有问题？ 如果HWUI绘制了，则检查UIThread和RenderThread（绘制线程） UIThread同上 如果HWUI耗时过长，检查是否阻塞在GL？（openGL） 如果是，则检查GPU 如果不是，则检查HWUI模块 上层到底层的模块图(Buffer流程)如图： 从APP开始 –》 然后到View（触发setView，测量布局绘制等操作） –》 然后到绘制，如果是软件绘制就是skia，如果是硬件绘制就是到HWUI，再到OpenGL –》 接着绘制完成，通过BufferQueue，调用queuebuffer函数 –》 触发SF合成 –》 查看合成方式，如果是GPU合成还是观察OpenGL，然后两种合成方式再调用到HWC模块 –》 然后到底层驱动Display Driver模块 –》 然后到硬件LCD Panel屏幕 Note: queubuffer的查看可以分两部分分析： Queue的速度有没有达到预期值？是否时间太长，一直在Queue？ 时间点是否正确，是否绘制完成？是否下一个时间点开始触发SF模块合成流程？ FPS问题关注点如图： APP在收到SW Vsync之后，开始产生新的frame 查看抓取APP的UIThread， 首先是Choreographer#doFrame进行绘制之前的测量、布局，以及reDraw重绘的判断，然后触发HWUI绘制； 查看DrawFrame部分，开始调用dequeubuffer获取buffer，以及其他GL Function； 绘制完成后调用eglSwapBuffers，然后再调用queuebuffer将Buffer放回bufferqueue； SF在收到下一个SW Vsync之后，从bufferqueue取出buffer，调用onMessageReceived，然后在函数latchBuffer到更新纹理updateTextImage（纹理数据可以通过GAPID工具抓取trace查看），再到acquireBuffer取Buffer； 合成完成后，HWC将SF传下来的工作排进内部thread（可以查看Dispatcher_0和DispSync） HWC处理合成之后，传到底层驱动display driver，然后触发驱动driver（可以查看OverlayEngine_0） 然后查看当前的DispSync，在当前的sen_sw_sync结束后将frame送到LCD Vsync周期是否正常如图： 如果是标准60fps刷新率，查看VSYNC的周期是否是16.6ms，绘制是否在这个周期内完成？ 绘制queuebuffer和下一帧合成的时间是否正常？ 底层硬件的FPS是否正常如图： 如果是标准60fps刷新率，查看底层的FPS（HW_VSYNC）是否是16.6ms正常的周期？ 查看queuebuffer周期是否规律如图： hasClientComposition对比hasDeviceComposition两种合成方式。 硬件绘制和软件绘制如何查看硬件绘制 HWUI draw会有Record View#draw() 如图： 软件绘制 SWUI draw会有drawSoftware lockCanvas 如图： view耗时太久如图： 可以分别查看测量、布局、以及软件/硬件绘制的过程。 Draw绘制太长 注意：systrace (don’t turn on hwui/gfx tag) 如图： 查看Choreographer#doFrame时长。 如图： 然后查看draw的耗时（注意是软件绘制SWUI） DrawFrame耗时 注意：systrace (don’t turn on hwui/gfx tag) 如图： 如果是标准60FPS帧率，则该函数耗时不要超过16.6ms OpenGL API绘制是否正常需要以下的函数被systrace抓取到，则需要开启GL trace开关： adb shell setprop debug.egl.trace systrace adb shell stop adb shell start (or make sure your app restart) Run systrace (需要加上tag：view,input,freq,res,hwui/gfx) 如图： 查看systrace的进程状态如图： 选中一个函数的区域（使用箭头）查看进程状态如图： 可以选择整个function的process state并确认统计信息,判断是否有runnable/sleep(D/S)过长的现象。 如图： 以下是确定是哪个部分异常，进一步详细调查的方式。 APP Owner（view模块异常） 如果已经确定Measure/Layout 占的时间很多。 adb shell setprop debug.view.systraceMeasure true adb shell setprop debug.view.systraceLayout true adb shell stop adb shell start (or make sure your app restart) 抓取systrace again 例如下面的例子， 可以发现ListView layout耗时过长。如图： APP Owner（HWUI模块异常） 到这一步已经没有异常耗时的draw operation, 所以主要是分析APP画图的行为。抓取方式： adb shell setprop debug.hwui.log.systrace 1 adb shell dumpsys gfxinfo 抓取 systrace again (must turn on view,input,freq,res,hwui/gfx) 如图： App owner (Consult SS) 进入此状态大多是因为当下系统资源不足而导致，需要case by case 确认可以解决的方案。 如图： 系统配置信息： 需要先确定对比机和测试机的系统配置信息CPU cores/freq 可以直接参考systrace (需确认CPU_FREQUENCY event有打开) 如图： App owner (Consult SF合成) 需要看trace判断具体问题方向，例如以下几种问题： Buffer是新的，但是内容还是和上一帧相同Mali GPU有种smart partial update机制（局部更新）, 不会整个buffer重刷。可以利用debug property先关闭, 视觉上比较容易看： adb shell setprop debug.gpu.hwcrc_disabled 1 adb shell stop adb shell start 如图： 检查buffer fence time同步时间如图： 强制GPU合成检查在开发者选项中打开GPU强制合成，如果关掉就正常, 问题方向转回到 HWC/driver。"},{"title":"Android LCD背光驱动节电技术LABC/CABC","date":"2020-01-05T12:32:00.000Z","url":"/Blog/2020/01/05/2020/200105_android_lcd_cabc/","tags":["display"],"categories":["android"],"content":"LCD背光驱动节电技术LABC/CABC 手机屏幕大部分是LCD（还有OLED屏幕），而手机的部分电量就是LCD背光消耗的。随着分辨率/尺寸的增大，LCD的背光驱动电路也越来越复杂。而高分辨率、高显示颜色、大尺寸的LCD，需要大的背光系统、大的TFT-LCD 面版、高运算速度的驱动IC，这些都造成了高的功率消耗。主要了解一下背光驱动节电技术CABC的概念和功能。参考博客 *OEM和ODMNote: OEM：自主加工，英文全称Original Equipment Manufacturer，即原设备生产商。原始设备生产商(OEM)是指拥有自己的产品或产品理念，但有时会为了开发和/或制造这些产品而购买某些服务的公司。 ODM：自主设计，即ORIGINAL DESIGN MANUFACTURER，意为“原始设计制造商”，是指一家公司根据另一家公司的规格来设计和生产一个产品。例如，计算机公司如HP公司可能会就其想推向市场的一款笔记本电脑作出具体规格。它们会具体地列明产品的外观要求，如屏幕的尺寸和技术要求、输入/输出端口、键盘的前倾度、电脑包的外形和颜色、扬声器的位置等。它们还通常会具体列明对产品的主要内部细节如CPU或视频控制器的规格要求。但是，它们并不设计图样，不具体列明电源用的交换晶体管的型号，也不对背光变流器频率加以选择。这些都是ODM的工作。ODM根据计算机公司提出的规格要求来设计和生产笔记本电脑。有时候，ODM也可根据现有样品来生产。ODM方式往往更加注重合作，而在OEM的情形下，购买方对产品的具体规格基本不参与意见。 OBM：自主品牌 OEM和ODM的区别: OEM和ODM两者最大的区别不单单是名称而已。OEM产品是为品牌厂商度身订造的，生产后也只能使用该品牌名称，绝对不能冠上生产者自己的名称再进行生产。而ODM则要看品牌企业有没有买断该产品的版权。如果没有的话，制造商有权自己组织生产，只要没有企业公司的设计识别即可。 在工业社会中，OEM和ODM可谓司空见惯。因为出于制造成本、运输方便性、节省开发时间等方面的考虑，知名品牌企业一般都愿意找其他厂商OEM或ODM。在找别的企业进行OEM或ODM时，知名品牌企业也要承担不少责任。毕竟产品冠的是自己的牌子，如果产品质量不佳的话，少则有顾客找上门投诉，重则可能要上法庭。所以，品牌企业在委托加工期间肯定会进行严格的质量控制。但代工结束后，质量不敢保证。故此，当有的商家告诉你某件产品的生产商是某大品牌的OEM或ODM产品时，绝不要相信其质量就等同于该品牌。你唯一能够相信的，是这家制造商有一定的生产能力。 背光节电技术显示屏在移动设备里一直的是耗电大户。目前手机背光节电技术，即对应性背光控制技术（Adaptive Brightness Control- ABC），主要有下面2种： LABC：(LightAdaptive Brightness Control) 环境光侦测适应背光控制。根据环境光的变化来控制背光亮度。需要一个光传感器，感应环境光强。 CABC：(ContentAdaptive Brightness Control）显示内容对应背光控制。根据显示内容来调节背光和gamma值，从而降低了背光LED的功耗。其中C是内容的意思，驱动IC新增了一个内容分析器电路。 LABCLABC技术需要搭配光传感器实现，主机端处理器读取光感数值，然后处理器对数值进行处理，直接控制PMIC(MT6329)输出PWM控制背光的亮度。在比较暗光线下，降低背光达到省电效果 CABCCABC功能需要在LCD驱动IC内新增一个内容分析器(imagecontent analyzer)电路，当手机处理器传送了一张图片数据到驱动IC，内容分析器会计算并统计图片的数据后依据设定与算法自动的将其灰阶亮度提高30%（此时图片变亮），再将背光亮度降低30%（此时图片变暗）。由于我们事先已经将图片经过分析器电路补偿亮度，因此使用者可以得到与原先电路相差无几的显示效果，但减少了30%的背光功耗。 简单来说，CABC功能就是根据显示内容来降低背光，然后通过调节gamma(gamma越高灰度越低图像越暗)来补偿显示亮度。CABC就是通过增加内容灰阶标准同时降低背光亮度来达到省功耗的目的。 CABC主要有四种状态： Off Mode，CABC功能全部关闭； UI Image Mode，优化显示UI图片时的功耗，尽可能的保证图片质量的同时可省10%的功耗； Still Image Mode，优化显示静态图片时的功耗，该模式下图片质量损耗在可接受的范围内，同时可省30%的功耗； Moving Image Mode，优化显示动态图片时的功耗，该模式下会最大限度的降低功耗，但是会带来图片质量的损耗，可省30%+的功耗。 自然对应Off Mode，标准对应UI Mode，照片对应UI Mode，电影对应Still Image Mode。用户可根据实际情况自行选择。 三种模式省电级别依次降低: UI mode &lt; Movie mode &lt; Still mode， 也就是说Still mode是最省电的模式。 工作流程工作流程如下： 使能PMIC(MT6329)CABC功能; 设置LCD驱动IC的相关配置(使能CABC和配置gamma参数，需要FAE协助)； CABC模块分析显示内容输出LED_PWM信号给PMIC，PMIC通过一定算法控制driver模块BL_DRV信号的输出波形； 预期结果是背光亮度降低，LCD驱动IC降低gamma值以补偿屏幕亮度。 CABC模块分析显示内容输出PWM波形，占空比越大，表示需要输出的电流越大。"},{"title":"Android SurfaceFlinger和HWC2概述","date":"2019-12-22T15:32:00.000Z","url":"/Blog/2019/12/22/2019/191222_android_HWC2/","tags":["graphics"],"categories":["android"],"content":" 转载夕月风大佬博客： 参考Android Q AOSP源码添加修改部分内容参考源码：  SurfaceFlinger概述大多数APP在屏幕通常显示三个部分： 屏幕顶部的状态栏 底部或者侧边的导航栏 应用的界面 有些应用会显示更多或者更少的层。例如主屏幕会有一个单独的壁纸层；全屏幕的游戏可能会隐藏状态栏目。这些可以通过Dump Surfacelinger查看BufferLayers部分的信息来获取具体信息（adb shell dumpsys SurfaceFlinger）。从Dump结果看，layer呈树形结构(Tree)分布。 每个层都可以单独更新。状态栏和导航栏由系统进程渲染，而应用层由应用渲染，两者之间不进行协调。 SurfaceFlinger类定义frameworks/native/services/surfaceflinger/SurfaceFlinger.h 继承BnSurfaceComposer，实现ISurfaceComposer接口；实现ComposerCallback；继承辅助类PriorityDumper，主要提供SurfaceFlinger的Dump信息，并且提高提供信息的分离和格式设置。 ISurfaceComposer接口实现ISurfaceComposer是提供给上层Client端的接口（Bp端），此处的SurfaceFlinger是Server端（Bn端）。接口内容包括： frameworks/native/include/gui/ISurfaceComposer.h 接口在SurfaceFlinger中都有对应的方法实现。Client端通过Binder跨进程调到SurfaceFlinger中。获取Display的信息，其实现就是SurfaceFlinger的getDisplayConfig函数。 ComposerCallback接口实现ComposerCallback是HWC2的callback接口，包括以下接口： frameworks/native/services/surfaceflinger/DisplayHardware/HWC2.h Callback提供了注册接口registerCallback，在SurfaceFlinger初始化的时候注册： 此处registerCallback的this就是SurfaceFlinger对ComposerCallback接口的实现。 onHotplugReceived： 热插拔事件的回调，显示屏幕连接或者断开时回调。 onRefreshReceived： 接收底层HWComposer的刷新请求。在repaintEverythingForHWC中，mRepaintEverything为true的时候，将触发一次刷新，重新进行合成显示。重新绘制说明底层配置、参数等有变动，SurfaceFlinger前面给的数据不能用，需要重新根据变动后的配置进行合成，给适合当前配置的显示数据。 frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp onVsyncReceived： Vsync事件上报，接收底层硬件上报的垂直同步信号。此处可以通过抓取Systrace的方式查看具体的Vsync的信息（底层硬件、SurfaceFlinger、APP三部分的Vsync，一般Android版本升级的时候会进行vsync的tuning） 显示周期Vsync： 设备显示会按照一定速率更新（一般是一秒60帧，即16.6ms刷新一次）。如果显示内容在刷新期间更新，则会出现撕裂现象，因此必须在周期之间更新（这也是vsync tunning的必要性，保持SurfaceFlinger和draw frame都在vsync周期里面，并且不重叠）在可以安全更新内容时，系统便会接收来自显示设备的信号。 刷新率可能会随时间而变化，例如一些设备的刷新范围在58fps至62fps之间，具体视当前条件而定。对于连接了HDMI的电视，刷新率在理论上可以下降到24Hz或者48Hz，以便和视频匹配。由于每个刷新周期只能更新屏幕一次，因此以200fps的刷新率为显示设备提交缓冲区并没有必要性，因为大部分桢不能被看到（人眼合适的是60fps）。SurfaceFlinger不会在应用提交缓冲区时进行操作，而是在显示设备准备好接收新缓冲区的时候才会唤醒。 当Vsync信号到达的时候，SurfaceFlinger会遍历层列表，以寻找新的缓冲区。如果找到会获取该缓冲区，否则会使用以前获取的缓冲区。SurfaceFlinger总是需要可显示的内容，因此会保留一个缓冲区。如果在某个层没有提交缓冲区，则该层会被忽略。 此处会在合成调用到handlePageFlip函数，函数中先调用latchBuffer从BufferQueue取Buffer，然后等待Vsync信号更新到FrameBuffer。 合成方式： 目前SurfaceFlinger支持两种合成方式：一种是Device合成，一种是Client合成。SurfaceFlinger在收集可见层的所有缓冲区之后，便会询问HardwareComposer应该如何进行合成。 Client合成：之前称之为GLES合成，也可以称之为GPU合成，该合成方式是相对于硬件合成来说的，将各个Layer的内容用GPU渲染到暂存缓冲区中，最后将暂存缓冲区传送到显示硬件Client合成采用RenderEngine进行合成。 Device合成： 用专门的硬件合成器进行合成HWComposer，所以硬件合成的能力就取决于硬件的实现。其合成方式是将各个Layer的数据全部传给显示硬件，并告知它从不同的缓冲区读取屏幕不同部分的数据。HWComposer是Device合成的抽象。 合成方式可以从Dump SurfaceFlinger中查看到Layer的具体合成方式，GPU合成一般可以通过开发者选项中启动，强制GPU合成；而Device合成在Dump信息中一般显示成SDE合成。 GPU合成数据后，作为一个特殊的Layer传给显示硬件。 SurfaceFlingerBE: 从Android P上分离出来，定义上看是将Surfacelinger分离为前后端。 消息队列和主线程： 和应用进程类似，SurfaceFlinger也有一个主线程，主要是进行显示数据的处理，即合成。Surfacelinger是一个服务，将会响应上层的请求，各个进程的请求都在SurfaceFlinger的各个Binder线程中，如果线程很耗时，那么应用端就会被block。主线程将他们分离开来，各干各的。 Note： SurfaceFligner有两个状态，Layer也有两个状态，一个是mCurrentState，一个是mDrawingState。 两个EventThread，一个是给SurfaceFlinger本身使用，一个是为了给应用分发事件的。 mCurrentState和mDrawingState 这两个成员是Layer类中Layer::State的类型。 Layer.h Surfacelinger创建Surface的时候，会调用createLayer，然后调用addClientLayer函数，这里会把Layer对象放在mCurrentState的layerSortedByZ对象中。 Surfacelinger合成的时候，调用preComposition函数，会先调用mDrawingState的layerSortedByZ来获取上次绘图的Layer层列表（并不是所有layer都参与屏幕图像的绘制，因此通过State对象记录参与绘制的Layer对象） Layer对象在绘制图形时，使用的是mDrawingState变量；用户调用接口设置Layer对象属性时，设置的值保存在mCurrentState中。这样就不会因为用户的操作而干扰Layer对象的绘制了。 Layer::doTransaction函数会比较这两个成员变量，如果有不同的地方，说明上次绘制后，用户改变了Layer的属性，要把这种变化通过flags返回。 layerStack字段是用户指定的一个值，用户可以给DisplayDevice指定一个layerStack值，只有Layer对象和DisplayDevice对象的layerStack相等，这个Layer才能在这个显示设备输出。这样的好处可以让显示设备只显示某个Surface的内容。例如，可以让HDMI显示设备只显示手机上播放的Surface窗口，但是不显示Activity窗口。 Layer::doTransaction最后会调用commitTransaction函数，就是将mCurrentState赋值给mDrawingState。 以上的是在Layer.cpp中的两个成员变量，而在SurfaceFlinger.cpp也有同名的mCurrentState和mDrawingState两个成员变量（定义在SurfaceFlinger.h中），定义不一样，只是名字相同。 SF.h SF.cpp中的handleTransactionLocked函数会根据eTraversalNeeded标志决定是否要检查所有的Layer对象。如果某个Layer对象有这个标志，将会调用他的doTransaction函数。Layer::doTransaction函数返回的flags如果有eVisibleRegion说明这个Layer需要更新，就把mVisibleRegionDirty设置为true。 Note: handleTransaction的作用是处理系统在两次刷新期间的各种变化。Surfacelinger模块中不管是SurfaceFlinger类和Layer类 硬件合成HWC2概述Hardware Composer HAL(HWC)是指硬件完成图像数据组合并显示的能力。 SurfaceFlinger是一个系统服务（系统启动时启动），作用是接收来自多个源的Buffer数据，并进行合成，然后发送到显示设备进行显示。 SurfaceFlinger和HWC的相互配合，实现Android系统的合成和显示（非GPU合成）。 Android 7.0包含新版本的HWC（HWC2），Android需要自行配置。 Android 8.0，HWC2正式开启，并且版本升级为2.1。（/frameworks/native/services/surfaceflinger/DisplayHardware/） HWC2是SurfaceFlinger用来与专门的窗口合成硬件进行通信（Device合成方式）。SurfaceFlinger包含使用3D图形处理器（GPU）执行窗口合成任务的备用途径，但是此路径并不理想（GPU合成方式），因为： 通常，GPU没有针对此进行优化，因此能耗可能大于执行合成所需的能耗； 每次SUrfaceFlinger使用GPU合成时，应用都无法使用处理器进行自我渲染，因此应尽可能使用专门的硬件而不是GPU进行合成。 GPU（Client合成）和HWC（Client合成）两种方式对比： 合成类型 耗电情况 性能情况 Alpha处理 DRM内容处理 其他限制 Device合成（HWC） 耗电低 性能高 很多Vendor的HWC不支持Alpha的处理和合成 基本都能访问DRM内容 能合成的Surface层数有限，对每种Surface类型处理层数有限 Client合成（GPU） 耗电高 性能低 能处理每个像素的Alpha及每个Layer的Alpha 早期版本GPU不能访问DRM的内容 目前的处理层数没有限制 Note: Alpha处理： 图片的透明度（0～255或者0.0f~1.0f），数值越小透明度越高 DRM内容处理：（Digital Rights Management）一种业界使用广泛的数字内容版权保护技术。 HWC常规准则Hardware Composer抽象层后的物理显示设备硬件可因设备而异。但是一般来说，遵循以下规则： HWC应至少支持4个叠加层（状态栏、系统栏、应用、壁纸/背景） 层可以大于屏幕，因此HWC应能处理大于显示屏的层（例如壁纸） 应该同时支持预乘每个像素Alpha混合和每个平面Alpha混合 HWC应能够处理GPU、Camera、视频解码器（Video Decoder）生成的相同缓冲区，因此支持以下某些属性会很有帮助： RGBA打包顺序 YUV格式 Tiling,swizzling和步幅属性 为了支持受保护的内容（Secure layer），必须提供受保护视频播放的硬件路径 Note： RGBA是一种颜色值 YUV是一种颜色编码格式，可以说YUV流媒体是原始流数据，大部分的视频领域都在使用。他与RGB类似，但RGB更多的用于渲染时，而YUV则用在数据传输，因为它占用更少的频宽。当然，实时通讯为了降低带宽都会采用H264/H265编码。从字面意思理解，YUV的含义:Y代表亮度信息（灰度），UV分别代表色彩信息。YUV的常用名称有许多，如YUV422这是大部分镜头出来的数据，还有许多（yuv420,yuv444等） Tiling简单来说就是将image进行切割，切成M * N小块，最后用的时候再进行拼接，类似铺瓷砖 swizzling是一种拌和技术，这是向量的单元可以被任意的重新排放或重复 HWC专注于优化，智能的选择要发送到叠加硬件的Surface，以最大限度减轻GPU的负载。另一种优化是检测屏幕是否正在更新；如果不是，这将合成委托给OpenGL而不是HWC，以节省电量。但屏幕再次更新时，继续将合成分发给HWC。 为常见的用例做准备，比如： 纵向和横向模式下的全屏游戏 带着字幕和播放控件的全屏视频 主屏幕（状态栏、系统栏目、应用、动态壁纸） 受保护的视频播放 多显示设备支持 HWC2框架从Android 8.0开始的Treble项目，对Android架构做了调整，让制造商以更低的成本更加轻松快速的将设备更新到Android系统。这就对HAL层有了很大的调整，利用提供给Vendor的接口，将Vendor的实现和Android上层分离开来。 这样的架构也使得HWC架构变得复杂，HWC属于Binderized的HAL类型。Binderized类型的HAL将上层Android和底层HAL分别采用两个不同的进程实现，中间采用Binder进行通信，为了和前面的Binder进行区别，这里采用HWBinder。 可以将HWC分为以下几个部分： Binder 1： SurfaceFlinger Service HWC2 Client Binder 2： HWC2 Server HWC2 Vendor Impl 具体解释： Client端：Client就是指SurfaceFlinger。不过SurfaceFlinger采用前后端设计，以后和HWC相关的逻辑应该会放到后端（SurfaceFlingerBE），即/frameworks/native/services/surfaceflinger/ HWC Client端： 这一部分属于SurfaceFlinger进程，直接用过Binder通信，和HWC2的HAL Server交互。在SurfaceFlinger中采用namespace HWC2的命名空间，即frameworks/native/services/surfaceflinger/DisplayHardware/HWComposer.cpp。 HWC2 Server端: 这里将建立一个进程实现HWC的Server端。服务端再调用底层Vendor的具体实现。并且，对于底层合成的实现不同，此处会做一些适配（适配HWC1.x），和FrameBuffer的实现。这部分包含三部分：接口、实现、服务，以动态库的形式存在：（hardware/interfaces/graphics/composer/2.1/default/） android.hardware.graphics.composer@2.1.so android.hardware.graphics.composer@2.1-impl.so android.hardware.graphics.composer@2.1-service.so HWC Vendor实现： 这部分是HWC的具体实现，由硬件厂商完成，（例如高通QCOM），代码一般是hardware/qcom/display/。HWC必须采用Binderized HAL模式，但是不一定要实现HWC2的HAL版本。HWC2的实现需要配置，以Android 8.0为例，包含： 添加宏定义TARGET_USERS_HWC2 编译打包HWC2相关的so库 SELinux相关的权限添加 配置manifest.xml： HWC2数据结构 HWC2的一些常用接口定义在头文件hardware/libhardware/include/hardware/hwcomposer2.h中，一些共用的数据定义是HAL的接口中: hardware/interfaces/graphics/common/1.0/ hardware/interfaces/graphics/composer/2.1/ 图层Layer每个Layer都有一组属性，用来定义和其他Layer的交互方式。他在每一个模块（层）代码定义的实现不一样，但是Layer的理念是一样的。 SurfaceFlinger中 HWC2中 在HAL中实现时，定义为hwc2_layer_t，是在头文件hwcomposer2.h中定义的:typedef uint64_t hwc2_layer_t; HIDL中定义为Layer，这个Layer和hwc2_layer_t是一样的：typedef uint64_t Layer; Layer按照类型划分大致分为BufferLayer和COlorLayer（在SF中createLayer中），BufferLayer就是有Buffer的Lyaer（Bufferueue，GraphicsBuffer），需要上层应用Producer生长；ColorLayer可以绘制一种制定的颜色和透明度Alpha（取代之前的Dim Layer）。 Layer按照数据划分大致分为RGB Layer和YUV Layer，前者是RGB格式，比较常见的就是UI界面的数据；后者的Buffer是YUV类型的，平常播放Video，Camera预览等，都是YUV类型的。 Layer属性* Layer的属性定义他和其他模块（层）的关系，和显示屏（DeisplayDevice）的关系等。Layer包含的属性类别如下（上述也有部分内容）： 位置属性 定义层在其显示设备上的现实位置，包含层边缘的位置和其相对于其他层的Z-Order等，并且还定义了很多个区域Region： frameworks/native/services/surfaceflinger/Layer.h Region中是很多个Rect的集合，即一个Layer的visibleRegion可能是几个Rect的集合（rect对象用来存储一个矩形框的左上角坐标、宽度和高度。描述矩形的宽度、高度和原点） SurfaceFlinger中定义的Region都是从上层（WMS）传递过来的。而在HWC中，是用的下面的结构描述： hardware/libhardware/include/hardware/hwcomposer_defs.h Transform，这个在SurfaceFlinger中定义的一个重要的结构，意思是变换矩阵，是一个3*3的矩阵。 联系流程：Rect &lt;- Region &lt;- Layer &lt;- State &lt;- Geometry &lt;- Transform &lt;- mat33 Layer的两个状态：mCurrentState和mDrawingState，前者是给SurfaceFlinger的前段准备数据，后者是将数据给到合成。每个状态有两个Geometry的描述request（上层请求的）和active（当前正在使用的）。每个Geometry中有一个Transform矩阵，一个Transform包含一个mat33的整列。 Transform中包含两部分，一部分是位置Postion，另一部分是真正的2D的变换矩阵。通过下面两个函数设置：（对应Layer中的setPostion和setMatrix函数，这是上层WMS设置下来的） frameworks/native/libs/ui/Transform.cpp 内容属性 定义显示的内容如何呈现（即Buffer）。Layer的显示，除了之前的几个区域Region描述，还有很多结构进一步描述才能显示，例如裁减（用来扩展内容的一部分以填充层的边界）和转换（用来显示旋转或者翻转的内容）等信息。HWCInfo结构体中包括了一些这样的信息： frameworks/native/services/surfaceflinger/CompositionEngine/include/compositionengine/impl/OutputLayerCompositionState.h 关系图： 解释： Layer区域和屏幕区域，就是Layer和屏幕本身的大小区域 sourceCrop：剪切区域，sourceCrop是对Layer进行剪切的，值截取部分Layer的内容进行显示；sourceCrop不超过Layer的大小，超过没有意义。 displayFrame：显示区域，displayFrame表示Layer在屏幕上的显示区域，具体说来，是sourceCrop区域在显示屏上的显示区域。displayFrame一般来说，小于屏幕的区域。而displayFrame可能比sourceCrop大，可能小，这都是正常的，只是需要做缩放，这就是合成时需要处理的。 visibleRegion：可见区域，displayFrame 区域不一定都能看到的，如果存在上层Layer，那么displayFrame区域可能部分或全部被盖住，displayFrame没有被盖住的部分就是可见区域visibleRegion。 damageRegion 受损区域，或者称之为更新区域。damageRegion表示Layer内容被破坏的区域，也就是说这部分区域的内容变了，所以这个属性一般是和上一帧相比时才有意义。这算是对合成的一种优化，重新合成时，我们只去合成damageRegion区域，其他的可见区域还是用的上一帧的数据。 visibleNonTransparentRegion：可见非透明区域。透明区域transparentRegion是可见区域visibleRegion的一部分，只是这一部分透明的看到的是底层Layer的内容。在SurfaceFlinger的Layer中定义visibleNonTransparentRegion，表示可见而又不透明的部分。 coveredRegion：被覆盖的区域。表示Layer被TopLayer覆盖的区域，一看图就很好理解。从图中，你可以简单的认为是displayFrame和TopLayer区域重合的部分。 注意： 这里之所以说简单的认为，这是因为HWC空间的区域大小是SurfaceFlinger空间的区域经过缩放，经过Transform旋转，移动等后才得出的，要是混淆了就理解不对了。 合成属性（确认用哪种合成方式） 定义层应如何与其他层合成。包括混合模式和用于Alpha合成的全层Alpha值等信息。总的说来，合成分为两个大类：GPU合成和HWC合成。根据具体的情况，分为下列几类： hardware/libhardware/include/hardware/hwcomposer2.h 释义： Client 相对HWC2硬件合成的概念，主要是处理BufferLayer数据，用GPU处理。 Device HWC2硬件设备，主要处理BufferLayer数据，用HWC处理 SolidColor 固定颜色合成，主要处理ColorLayer数据，用HWC处理或GPU处理。 Cursor 鼠标标识合成，主要处理鼠标等图标，用HWC处理或GPU处理 Sideband Sideband为视频的边频带，一般需要需要硬件合成器作特殊处理，但是也可以用GPU处理。 在合成信息HWCInfo中，包含成的类型。通过Layer的setCompositionType方法进行指定： frameworks/native/services/surfaceflinger/Layer.cpp 确定合成类型分成三步： SurfaceFlinger制定合成类型，此时callIntoHwc=true，将类型制定给HWC HWC根据实际情况看SurfaceFlinger制定的合成类型是否可以执行，如果不满足，作出修改 SurfaceFlinger根据HWC的修改情况再作出调整，最终确认合成类型，此时callIntoHwc=false 优化属性 提供一些非必须的参数，以供HWC进行合成的优化。包括层的可见区域以及层的哪个部分自上一帧以来已经更新等信息。也就是前面说到的visibleRegion，damageRegion等。 小结 本篇主要是SurfaceFlinger概述，和HWC2的概述，还有Layer的属性和类型，合成方式的内容。另外还有关于HWC的内容，和Display显示设备的信息重新划分单独的一篇学习。 "},{"title":"Android Binder实例","date":"2019-11-24T07:59:40.000Z","url":"/Blog/2019/11/24/2019/191124_android_binder_example/","tags":["graphics"],"categories":["android"],"content":" Binder通信是Android用的比较多的一种通信机制，它是一种client-server的通信结构。Binder通信具有以下特点： 用驱动程序来推进进程间的通信； 可以通过共享内存的方式来提供性能； 可以为进程请求分配每个进程的线程池； 针对系统中的对象引入了引用计数和跨进程的对象引用映射； 可以方便的进行进程同步调用。 以下简单的Binder实例参考一位大佬。 文件目录 cmds/helloWorld/Android.mk cmds/helloWorld/BpHelloWorldService.h 客户端Service头文件，声明BpHelloWorldService函数 cmds/helloWorld/BnHelloWorldService.h Bn服务端Service头文件，声明onTranscat接口 cmds/helloWorld/HelloWorldService.h Bn服务端实现类的头文件，声明helloworld和onTransact函数，和私有类构造函数和析构函数和另一个库的文件同名，继承Bn服务端接口 cmds/helloWorld/IHelloWorldService.h Bp和Bn端的中间接口头文件 cmds/helloWorld/main_helloworldclient.cpp cmds/helloWorld/main_helloworldservice.cpp libs/helloWorld/Android.bp libs/helloWorld/BnHelloWorldService.h libs/helloWorld/BnHelloWorldService.cpp libs/helloWorld/BpHelloWorldService.h libs/helloWorld/BpHelloWorldService.cpp libs/helloWorld/HelloWorldService.h libs/helloWorld/HelloWorldService.cpp libs/helloWorld/IHelloWorldService.h libs/helloWorld/IHelloWorldService.cpp"},{"title":"Android Graphics 调试技巧（十一月份更新）","date":"2019-11-23T15:52:00.000Z","url":"/Blog/2019/11/23/2019/191121_android_debug2/","tags":["graphics"],"categories":["android"],"content":"更新adb 更新命令： sudo apt-get install android-tools-adb 查看当前adb指令的目录: which adb 查看版本：adb version adb shell相关ps（正在运行的进程） top（CPU使用率） top命令提供了实时的对系统处理器的状态监视。它将显示系统中CPU最“敏感”的任务列表。该命令可以按CPU使用，内存使用和执行时间对任务进行排序。 VIRT：这个内存使用就是一个应用占有的地址空间，只是要应用程序要求的，就全算在这里，而不管它真的用了没有。写程序怕出错，又不在乎占用的时候，多开点内存也是很正常的; RES：resident memory usage。常驻内存。这个值就是该应用程序真的使用的内存，但还有两个小问题，一是有些东西可能放在交换盘上了（SWAP），二是有些内存可能是共享的; SHR：shared memory。共享内存。就是说这一块内存空间有可能也被其他应用程序使用着; DATA：数据占用的内存。这一块是真正的该程序要求的数据空间，是真正在运行中要使用的。 vmstat（显示系统信息的）vmstat是一个显示系统信息的命令。例如，它显示主存储器的可用容量和CPU的操作状态。如果按原样执行vmstat命令，则会显示有关当前进程，内存，交换，设备，中断和CPU的信息。此外，如果附加“ - d”或“ - p”选项，将显示分区和磁盘上的读/写状态等。指定“-f”选项时，从系统启动到命令执行将显示创建进程的次数。 如果在vmstat之后指定以秒为单位的时间间隔，则每隔指定时间显示一次系统状态。此外，当您指定次数时，会显示指定的信息次数。 对于容量，可以使用“-S”选项指定单位。指定“-SM”时，容量单位以M字节显示。 例如：以10秒为间隔显示内存和CPU信息三次： vmstat 10 3 meminfo（内存系统信息）cat /proc/meminfo free（显示内存使用情况） 可以知道当前的内存使用情况。 strace（跟踪进程执行时的系统调用和所接收的信号） strace常用来跟踪进程执行时的系统调用和所接收的信号。在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通 过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。 通用的完整用法：strace -o output.txt -T -tt -e trace=all -p 12345 上面的含义是跟踪28979进程的所有系统调用（-e trace=all），并统计系统调用的花费时间，以及开始时间（并以可视化的时分秒格式显示），最后将记录结果存在output.txt文件里面。 time（linux命令，ADB通用） 测量从调用指定命令到结束所花费的时间，用户CPU时间和系统CPU时间。在指定命令的输出结果之后，将测量结果输出到标准错误输出。命令代码实际使用CPU的时间是用户CPU时间。因此，如果将不存在的命令作为time命令的参数，则用户CPU时间变为0。睡眠时间不计算在内。 例如：显示ls命令的执行时间： time ls -a size 显示一个目标文件或者链接库文件中的目标文件的各个段的大小(可执行文件段的大小,默认为a.out) 例如（linux下）： size libui.so text表示正文段大小，data表示包含静态变量和已经初始化（可执行文件包含了初始化的值）的全局变量的数据段大小，bss由可执行文件中不含其初始化值的全局变量组成。 file（辨识文件类型） file确定并显示文件类型，例如可执行文件或文本或其他数据。 例如：file libui.so或者 adb shell file …… fastboot相关 重启进入Recovery界面： adb reboot recovery 重启进入bootloader界面： adb reboot bootloader 进入Recovery模式 查看设备： adb devices adb root adb shell 进入fastboot： adb reboot fastboot fastboot devices 查看当前使用分区： fastboot getvar current-slot 接着擦除分区和用户数据，然后flash烧录 如果不能识别或者没权限，优先检查lsusb添加序列号到/etc/udev/rules.d/ 如果出现错误:no permissions fastboot 用fastboot命令查看设备提示无权限，如下： 因为权限问题，是fastboot没有权限， 解决步骤： 将fastboot的所有者属性改成root,用which fastboot命令找到fastboot所在的目录，然后进入此目录 用命令chown改其属性:sudo chown root:root fastboot 将其权限更改一下：sudo chmod +s fastboot 还存在一种可能性，就是adb版本过低。 部分参数 fastboot [options] Notes -w 清空用户数据分区和缓存分区.相当于recovery中的”wipe data/factoryreset” -s &lt;串口号&gt; 指定要操作的设备的串口号 -p &lt;产品名&gt; 指定要操作的设备的产品名.比如hero,bravo,dream… -c &lt;命令行&gt; 用命令行替换系统的启动命令行 解析so文件addr2lineaddr2line [address] -e test.so -f或者readelf -a [.so/.bin] 根据解析结果查询函数C++在linux系统编译后会变成类似_ZNK...的修饰名。使用c++filt获取函数的原始名称： c++filt [_ZNK...函数修饰名] 跳过开机向导adb shell settings put global device_provisioned 1（默认是0） Android 10 AOSP源码打开模拟Vsync（Systrace可查看） 源码： Android 10的AOSP 方法： 修改surfaceflinger/Scheduler/DispSync.cpp的static const bool kEnableZeroPhaseTracer = false;为True 另外在查看ZeroPhaseTracer还需要打开mTraceDetailedInfo，即const bool mTraceDetailedInfo = true; 对比文件和文件夹区别（可用于git解决冲突）meld 文件/文件夹 比较文件: vimdiff a.txt b.txt repo Android代码包含几百个git库，下载和管理都需要一个方便的工具，Google开发了repo用来管理多个git库，通过manifest.xml文件将一个个的git库管理起来,形成一个系统。 Gerrit Gerrit是Google开发的一个代码审核工具。它是一个Web工具,它靠git来存放代码,靠repo这个接口来提交和下载修改。 提交到Gerrit时,每个Git库的修改都会变成一次提交,每个提交可以有一个或多个人来review和verify。当你的修改被批准之后,Gerrit会把修改真正提交到指定的分支中。 Gerrit上代码提交的三种状态：Open、Merged、Abandoned Open: 状态的代码需要经过Review,Verify,Submit操作后才会真正入库,即成为Merged状态 Merged: 状态的代码已经入库,不能再Abandoned,只能Revert Open: 状态的代码由于各种原因不能入库的可以放弃,即Abandoned状态。Abandoned 状态的代码不能再入库,如有需要,可以“Restore”。 Jenkins一个持续集成工具,一个运行任务的平台。能实施编译、监控集成中存在的错误，提供详细的日志文件和提醒功能。能用图表形象地展示项目构建的趋势和稳定性。 repo链接指定版本的manifest.xmlrepo init -m manifest_TEST.xml然后可以在目录查看结果，再同步代码。 ssh生成publickey（指定邮箱）ssh-keygen -t rsa -C ****@mail.com Git相关命令git用户设置 git config --global user.name *** git config --global user.email ****@mail.com 查看config： git config -l 生成补丁git format-patch -1 [最近的提交CommitID] 生成指定某个commit提交的补丁git format-patch abc123d^..abc123d 获取补丁 申请生成在本地，但是没有加入暂存区： git apply [PatchA] 直接申请生成提交： git am [PatchB] git add用法 git add .:提交所有修改的文件,包括新增文件,不包括删除文件 git add -u:提交所有修改文件,包括删除文件,不包括新增文件 git add -A:提交包括新增和删除文件的所有文件 从暂存区域移除等其他命令 Command Notes git rm 从暂存区域移除,并连带从工作目录中删除指定的文件 git rm -f 如果删除之前修改过并且已经放到暂存区域的话,则必须要用强制删除选项-f git reset HEAD … 取消对文件的修改,把之前版本的文件复制过来重写此文件。 git checkout – … 取消已经暂存的文件 git clean 删除未暂存的文件 git diff 查看尚未暂存的文件更新了哪些部分(和暂存区中) git diff –cached 看已经暂存起来的文件和上次提交时的快照之间的差异 git log –graph 显示图形表示的分支合并历史 git log –since=2.weeks 列出所有最近两周内的提交 git log –p 以patch形式显示提交 git log -p -2 常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新 git log –stat 仅显示简要的增改行数统计。 GDB命令 Command Notes bt 查看各级函数调用及参数 bt full 详细堆栈信息 bt PID 查看PID信息 frame 选择栈帧 info locals 查看当前栈帧局部变量的值 info registers 可以看函数入参 thread n 切换到线程n info threads 查看线程 disassemble 反汇编（默认范围是选择帧的pc附近的函数） info frame 选择堆栈帧 info args 显示函数参数和局部变量的内容 info reg（或者i r） 查看地址 disas 反汇编查看函数（包含地址信息） i proc m （info proc mappings 的简写） 核查零是不是有效地址 Bt 跟踪堆栈的信息: bt [-a|-g|-r|-t|-T|-l|-e|-E|-f|-F|-o|-O] [-R ref] [-I ip] [-S sp] [pid | task] mod命令 用来加载调试符号，有时一些结构或者函数的符号信息不在调试版本内核里面，需要用gcc -g选项编译自己的模块，然后用mod命令加载里面的调试信息。这样sym和whatis命令就能正确解释我们自己模块里面自定义的结构等信息。 ffmpeg 转换jpg和png格式ffmpeg -i test.png test1.jpg 远程服务器使用ssh链接并且映射在用户根目录的.bashrc添加： 链接：alias sshTest=&#39;function _ssh() { echo &quot;提示信息&quot;; ssh -p 端口 服务器用户名@IP; unset -f ssh; }; _ssh&#39; 映射：alias sshreferenceTest=&#39;echo &quot;提示信息&quot;;sshfs -p 端口 -o cache=yes,reconnect 服务器用户名@IP:/home/服务器映射目录 /home/user/本地映射目录&#39; 执行source .bashrc生效 如果服务器映射报错bad mount point/mnt/‘: Transport endpoint is not connected` 解决方法： sudo umount --all（或者指定目录） 重新mount，即sudo mount --all linux下修改图片尺寸（jpg、png…） sudo apt-get install imagemagick convert example.png -resize 200×100 example.png //按照原有比例缩放 convert example.png -resize 200×100! example.png 查看网络地址情况route -n 文件压缩、解压 zip文件：zip -r a.zip /dir 直接unzip解压 tar.bz：Linux下压缩比率较tgz大，即压缩后占用更小的空间，使得压缩包看起来更小。但同时在压缩，解压的过程却是非常耗费CPU时间。 打包压缩格式，举例：tar -jcvf file.tar.bz2 dir #dir目录 解压，举例：tar -jxvf file.tar.bz2tar -jxvf file.tar.bz2 -C /temp ls 命令 Command Notes ls -a 列出文件下所有的文件，包括以“.“开头的隐藏文件（Linux下文件隐藏文件是以.开头的，如果存在..代表存在着父目录）。 ls -l 列出文件的详细信息，如创建者，创建时间，文件的读写权限列表等等。 ls -F 在每一个文件的末尾加上一个字符说明该文件的类型。”@”表示符号链接、” ls -s 在每个文件的后面打印出文件的大小。 size(大小) ls -t 按时间进行文件的排序 Time(时间) ls -A 列出除了”.”和”..”以外的文件。 ls -R 将目录下所有的子目录的文件都列出来，相当于我们编程中的“递归”实现 ls -L 列出文件的链接名。Link（链接） ls -S 以文件的大小进行排序 ls -h 显示文件大小 firefox修改中文 打开浏览器，在地址栏中输入about:config，然后按下回车。 在列表中找到“general.useragent.locale”，然后双击，将内容改为”zh-CH” 重启之后就会默认为中文了（注：如果想改回英文就改为: en-US ) Ubuntu系统log路径/var/log查看: ls -tl hidl接口生成命令hidl-gen是Android架构HIDL编译工具，可以手动将哈希加到current.txt中，也可以使用以下命令添加：hidl-gen -L hash -r .../interfaces -r android.hidl:..."},{"title":"Android @hide接口注释","date":"2019-11-03T04:32:00.000Z","url":"/Blog/2019/11/03/2019/191103_android_hideDoc/","tags":["android"],"categories":["android"],"content":"@hide和{@hide}类或API是否开放是通过doc的注释｛＠hide｝来控制的 比如android.media.Metadata这个类就是android没有公开的类 因为在frameworks\\base\\media\\libmedia\\Metadata.java文件中，定义Metadata类之前有/*｛＠hide｝/doc注释，所以Metadata类被定义为了非公开类，即在android应用程序中无法直接访问的类 google 给了两个选择： 在你添加的API或者变量前面增加javadoc 注释＠hide，但是要注意并不是简单写个＠hide或者 /@hide/就可以了，这些都是错误的javadoc注释格式。标准的javadoc都是这样的 /** / 而且对于 format 变量应该加上 { }，所以我们应该这样写/* {@hide} */ 想要生成的javadoc里面出现这个方法或者变量，你必须输入:make update-api。但是如果修改的是google没有开放出来的类，比如RIL、PhoneFactory，就不会出现这个问题。 访问被@hide的API（android 如何引用@hide（隐藏）的类，方法和常量）直接将@hide标记去掉，将重新编译了的android.jar包换掉不过强烈的建议不要这样做，别人隐藏起来的类或者方法肯定是不安全的，如果你把@hide放出来可能引起一些程序不可预知的错误。 利用反射机制使用@hide方法，这种方法在网上看到一篇不错的，简单易懂，要深入的自己再到网上搜修改android.mk文件删除LOCAL_SDK_VERSION := current 将LOCAL_SDK_VERSION 注释掉之后提到服务器编译出现了代码混淆错误。这个时候可以在android.mk文件中将LOCAL_PROGUARD_ENABLED := disabled加上。LOCAL_PROGUARD_ENABLED := disabled不使用代码混淆的工具进行代码混淆,如果不设置，默认使用LOCAL_PROGUARD_ENABLED := full.即将该工程代码全部混淆。 Android 10的变化在Android 10对非SDK接口进行了限制，因而@hide注释的方法被列入黑名单，外部不能访问。 但是可以通过adb shell settings put global hidden_api_policy 1命令打开权限访问。 通过adb shell settings delete global hidden_api_policy解除设置。（）"},{"title":"Android Shell脚本应用","date":"2019-10-23T15:52:00.000Z","url":"/Blog/2019/10/23/2019/191023_android_shell/","tags":["shell"],"categories":["android"],"content":"基本结构.sh（系统中文.ch.sh）#!/bin/bash 脚本开头 #!/bin/csh 是 C shell 的命令解 export 功能说明：设置或显示环境变量。语 法：export [-fnp][变量名称]=[变量设置值]补充说明：在 shell 中执行程序时，shell 会提供一组环境变量。export 可新增，修改或删除环境变量，供后续执行的程序使用。export 的效力仅限于该次登陆操作。 用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令或声明变量，也可以创建并运行 shell 脚本程序。 运行shell脚本程序时，系统将创建一个子shell。此时，系统中将有两个shell，一个是登录时系统启动的 shell，另一个是系统为运行脚本程序创建的shell。 当一个脚本程序运行完毕，脚本shell将终止，返回到执行该脚本之前的shell。从这种意义上来说，用户可以有许多shell，每个shell都是由某个 shell（称为父 shell）派生的。 在子shell中定义的变量只在该子shell内有效。 如果在一个shell脚本程序中定义了一个变量，当该脚本程序运行时，这个定义的变量只是该脚本程序内的一个局部变量，其他的 shell 不能引用它，要使某个变量的值可以在其他 shell 中被改变，可以使用 export 命令对已定义的变量进行输出。 export命令将使系统在创建每一个新的shell时，定义这个变量的一个拷贝。这个过程称之为变量输出。 用语句给变量赋值，如将/etc下目录的文件名循环出来 使用$符号来取一个变量的值，常见的就是$VAR 变量定义：app_name=”test” $、$0、$1、$2..$0就是你写的shell脚本本身的名字，$1是你给你写的shell脚本传的第一个参数，$2是你给你写的shell脚本传的第二个参数。 ps -ef |grep surfaceFlinger |awk ‘{print $2}’的含义 $2：表示第二个字段 print $2：打印第二个字段 -e: 显示所有进程。 -f:全格式 awk &#39;{print $2}&#39; $fileName: 一行一行的读取指定的文件， 以空格作为分隔符，打印每行的第二个字段（即 pid）。 ps: 打印的信息： 字段含义如下： 两种方式声明函数 ”function”不可以省略(建议) 不得添加参数 两种声明方式效果等价。注意：（1）函数名和”{“之间必须有空格；（2）不得声明形式参数；（3）必须在调用前声明；（4）无法重载；（5）后来的声明会覆盖之前的声明 while 语句while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为： 以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1运行上述脚本，返回数字1到5，然后终止。 $android_serial=$(adb shell getprop “re.serialno”)获取设备序列号adb shell input swipe 359 1600 359 340 500input后可以跟很多参数，text相当于输入内容，keyevent相当于手机物理或是屏幕按键，tap相当于touch事件，swipe相当于滑动。input/swipe模拟的是滑动事件，input swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen)，需要将起始的坐标传进去。 向左滑动：shell@lentk6735_66t_l1:/ $ input swipe 600 800 300 800 向右滑动：shell@lentk6735_66t_l1:/ $ input swipe 300 800 600 800 滑动：adb shell input swipe 100 100 200 200 300 //从 100 100 经历 300 毫秒滑动到 200 200 长按：adb shell input swipe 100 100 100 100 1000 //在 100 100 位置长按 1000 毫秒 if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi（适合中断，写成一行） -eq:等于 -ne:不等于 -le:小于等于 -ge:大于等于 -lt:小于 -gt：大于 -a: 双方都成立（and） 逻辑表达式 –a 逻辑表达式 -o: 单方成立（or） 逻辑表达式 –o 逻辑表达式 sed -i ‘s/^.\\{15\\}//g’ tmp.txtadb shell wm size &gt; tmp.txt //分辨率导出文件 sed -i ‘s/^.\\{15\\}//g’ tmp.txt //此处 \\{是转义成 `{ wm_size=$(cat tmp.txt) sed -i就是直接对文本文件进行操作sed -i &#39;s/原字符串/新字符串/&#39; /home/1.txt sed -i &#39;s/原字符串/新字符串/g&#39; /home/1.txt 正则 ^: 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配\\n或\\r之后的位置。 .: 匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符，请使用像“(.|\\n)”的模式。 \\: 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，n匹配字符n。\\n匹配一个换行符。串行\\\\匹配\\而\\(则匹配(。 {n}:n是一个非负整数。匹配确定的n次。例如，o{2}不能匹配Bob中的o，但是能匹配food中的两个o。 sed -n：只打印模式匹配的行 -e：直接在命令行模式上进行 sed 动作编辑，此为默认选项 -f：将 sed 的动作写在一个文件内，用–f filename 执行 filename 内的 sed 动作 -r：支持扩展表达式（配合正则表达式） -i：直接修改文件内容 例如： 删除该行的第一个字符：sed -r &#39;s/^.//g&#39; &lt;&lt;&lt; $line 删除文件每行的第二个字符: sed -r &#39;s/^(.)(.)/\\2/g&#39; passwd 删除文件每行的倒数第二个字符: sed -r &#39;s/(.)(.)$/\\2/g&#39; passwd 交换每行的第一个字符和第二个字符:sed -r &#39;s/^(.)(.)/\\2\\1/g&#39; passwd 交换每行的第一个单词和最后一个单词:sed -r &#39;s/^([a-Z0-9]+)([^a-Z0-9]+)(.+)([^a-Z0-9]+)([a-Z0-9]+)/\\5\\2\\3\\4\\1/g&#39; passwd 多选择语句case adb shell pidof ”mediaserver“按名称检查正在运行的进程，可以使用pidof命令：adb shell pidof com.android.phone 如果找到此类进程，则返回PID,否则返回空字符串。 adb shell am start -nadb shell am start -n com.android.camera... //使用组件名方式启动照相机功能 可以使用adb shell activity|grep ACTIVITY 或者dump SF获取Activity名称 adb shell input tap x y模拟点击事件（点击屏幕），可以用来进入清除任务。 adb shell dumpsys window windows |grep Current |tee tmp.txt实现功能： 获得当前活动窗口的信息，包名以及活动窗体。 过滤Current信息，获得window的dump信息。 |tee的作用：输出到控制台 date + %Y%m%d_%H%M%S输出日期输入格式：20181128_174323 date + %N | cut -c -3%N: 纳秒 cut： 从指定的范围中提取字节（-b）、或字符（-c）、或字段（-f） cut -b -3//-3 表示从第一个字节到第三个字节 cut -b 3-//3-表示从第三个字节到行尾 cut -b -3,3- //输出整行，不会出现连续两个重叠的 cat **systrace.html |grep postComp |wc -l （linux 命令）WC：wc - print newline, word, and byte counts for each file 参数及含义： -c: print the byte counts 统计字节数 -l: print the newline counts：统计行数 -m: print the character counts：将每个文件的字符数及文件名输出到屏幕上，如果当前系统不支持多字节字符其将显示与-c 参数相同的结果 -w: print the word counts：统计字数 （视频播放时）旋转屏幕adb shell settings put system user_rotation 1 //获取参数是get shell判断数组中是否包含某个元素 解决播放结束后，判断当前activity然后重新播放 adb shell dumpsys activity top | grep &quot;ACTIVITY&quot; //获得当前的 activity adb shell am start -n com.home... //返回桌面 activity 包含关系 查找手机文件adb shell find /storage -name &quot;*.mp4&quot; | grep FileName 播放视频adb shell am start -a android.intent.action.VIEW -d &quot;; -t &quot;video/&quot; 逐行读某个文件"},{"title":"Android色彩空间（ColorSpace）","date":"2019-10-21T15:52:00.000Z","url":"/Blog/2019/10/21/2019/191021_android_basis/","tags":["android"],"categories":["android"],"content":"色彩空间Color Space广色域WCGWCG（Wide Color Gamut），是Adobe System开发的一种RGB色彩空间，使用纯光谱原色提供较大的色域。与Adove RGB和sRGB相比，能够存储更大范围的颜色值。相比之下，WCG包含CIELAB色彩空间可见颜色的77.6%，而Adobe RGB色彩空间仅覆盖52.1%，sRGB仅覆盖35.9%。 Note：CIELAB色彩空间（也称为CIE Lab，抑或Lab色彩空间），是国际照明委员会（CIE）于1976年定义的色彩空间。它将色彩表示为三个值： 符号 释义 L* 为从黑色（0）到白色（100）的亮度 a* 为从绿色（-）到红色（+）的亮度 b* 为从蓝色（-）到黄色（+）的亮度 CIELAB被设计为从这些值中相同数量的数字变化对应于大致相同数量的视觉感知变化。 sRGB色彩空间sRG色彩空间是惠普和微软于1996年一起开发的用于显示器、打印机、因特网的一种标准RGB色彩空间。最初的目的是作为生成在因特网以及万维网上浏览的图像的通用色彩空间，最后选择的是使用Gamma校准（伽马）系数为2.2的色彩空间，即CRT显示器在这种情况下的平均线性电压响应。 sRGB定义了红色、绿色、蓝色三原色的颜色（又称三基色，用于电视机、投影仪等显示设备，对应RGB），即在其他两种颜色值都为零时该颜色的最大值。在CIE xy（Lab色彩空间）坐标系中坐标如下表。对于任何RGB色彩空间来说，非负的R、G、B都不可能表示超出原色定义的三角形即色域范围，它刚好在人眼的色彩感知范围之内。 颜色 X Y 红色 0.6400 0.3300 绿色 0.3000 0.6000 蓝色 0.1500 0.0600 白色（D65） 0.3127 0.3290 sRGB定义了原色强度与实际保存的数值之间的非线性变化，曲线类似于CRT显示器的伽马响应。这个非线性变化意味着sRGB非常搞笑的使图像文件中的整数值标识了人眼可以分辨的颜色。 但是由于它的色域不够大，尤其是蓝绿颜色色域无法表示SMYK印刷中的所有颜色。所以印刷行业的经常使用的是Adobe RGB色彩空间。 Note:伽马校正（伽马非线性变化、伽马编码），是用来正对影片或者影像系统里对于管线的辉度或者三色刺激值所进行非线性的运算或反运算。 Adobe RGB色彩空间Adobe RGB色彩空间是一种由Adobe System于1998年开发的色彩空间。开发的目的是为了尽可能在CMYK彩色印刷中利用计算机显示器等设备的RGB颜色模式上囊括的更多的颜色。 在Adobe RGB标准中，色彩被指定为（R,G,B）三个组员，其中R，G，B每个的值介于0和1之间。但在显示器显示出来时，白色点(1,1,1)，黑色点（0,0,0），原色点（1,0,0）的准确值会被指定。 与sRGB相比，Adobe RGB中的RGB色彩分量和亮度并不是呈线性关系，他的伽马值是563/256结果是2.19921875。并且三原色点坐标只有绿色坐标不同。 颜色 X Y 红色 0.6400 0.3300 绿色 0.2100 0.7100 蓝色 0.1500 0.0600 白色（D65） 0.3127 0.3290 ProPhoto RGB色彩空间ProPhoto RGB色彩空间（抑或ROMM RGB色彩空间），专为摄影输出所开发设计。该色彩空间的色域十分宽裕，甚至包含CIE Lab色彩空间中90%以上的表面色彩和1980年Poniter所记录的可能出现的表面色彩。该色域的表现范围甚至比WCG色彩空间还要大 标准参考白点由CIE标准光源D50的色度决定。 颜色 X Y 红色 0.7347 0.2653 绿色 0.1596 0.8404 蓝色 0.0366 0.0001 白色（D50） 0.3457 0.3585 缺点是该色彩空间包含大约13%的通常不存在色彩。 DCI-P3色彩空间DCI-P3（抑或DCI/P3）是美国电影行业推出的一种色彩空间。在CIE 1931xy色彩空间中，覆盖了45.5%的全色于和86.9%的常见色域。在CIE 1976uv色度图覆盖率分别是41.7%和85.5%。 DCI-P3将来应该会在电视系统和家庭影院领域有更广泛的应用。 颜色 X Y 红色 0.6800 0.3200 绿色 0.2650 0.6900 蓝色 0.1500 0.0600 白色（D65） 0.3127 0.3290 Display P3色彩空间Display P3使用DCI-P3的原色，但是使用D65白点，这在计算机显示色彩空间中（sRGB,AdobeRGB都使用D65）更为常见。和DCI-P3的纯伽马曲线不同。Display-P3使用sRGB曲线。 Android中启用/禁止WCG功能APP获取设备是否支持WCGAPP通过以下两种API来决定设备是否支持WCG： android.content.res.Configuration::isScreenWideColorGamut：如果display和设备能够支持WCG则返回true。 android.view.Display::isWideColorGamut()：返回显示display设备是否可用于WCG显示。这个并不意味着设备自己可以渲染WCG内容。 "},{"title":"C++ 单例模式","date":"2019-10-20T15:39:00.000Z","url":"/Blog/2019/10/20/2019/191020_cpp_singletonMode/","tags":["cpp"],"categories":["cpp"],"content":"懒汉式单例模式 缺点是延迟加载，比如配置文件，只有在使用的时候才会加载。 多线程下的懒汉模式 使用double-check来保证线程安全。但是如果处理大量数据时，该锁才成为严重的性能瓶颈。 饿汉式单例模式 一开始就创建实例对象并且加载，每次使用的时候直接返回就好了。饿汉式会出现线程安全问题，在多线程下，或个线程都初始化一个单例，得到的指针并不是指向同一个地方，就不满足单例类的定义，此时就需要进行修改。 "},{"title":"Java 单例模式","date":"2019-10-20T14:59:00.000Z","url":"/Blog/2019/10/20/2019/191020_java_singletonMode/","tags":["java"],"categories":["java"],"content":" 单例：保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式是一种常用的软件设计模式之一，其目的是保证整个应用中只存在类的唯一个实例。比如我们在系统启动时，需要加载一些公共的配置信息，对整个应用程序的整个生命周期中都可见且唯一，这时需要设计成单例模式。如：spring容器，session工厂，缓存，数据库连接池等等。 保证实例的唯一: 防止外部初始化 由类本身进行实例化 保证实例化一次 对外提供获取实例的方法 线程安全 饿汉式单例模式 线程安全，调用效率高，但是不能延时加载 直接创建单例对象，使用的时候直接返回即可。缺点是单例在未使用的时候就已经初始化完成，如果程序一直没有使用，单例对象还是会创建，从而造成不必要的资源浪费。 懒汉式单例模式 线程安全，调用效率不高，但是可以延时加载 双重锁判断机制（DCL）即Double CheckLock实现单例模式（由于JVM底层模型原因，偶尔会出现问题，不建议使用） 静态内部类实现单例模式 线程安全，调用效率高，可以延迟加载 枚举类实现单例模式 线程安全，调用效率高，不能延时加载，可以天然防止反射和反序列化调用） "},{"title":"Android Property","date":"2019-10-16T15:52:00.000Z","url":"/Blog/2019/10/16/2019/191016_adndroid_property_setTypes/","tags":["android"],"categories":["android"],"content":"property的相关生成文件和设置 android通过SystemProperties的set和get方法来控制很多东西，一般上层添加一个控制开关可以使用这个方法，在系统里面存在很多个prop文件。它们分别是system/build.prop,system/etc/prop.default,vendor/build.prop,vendor/default.prop。下面分别来说下这几个文件的构成。 system/build.prop 这个主要是由device\\mediateksample\\product/system.prop,还有在build目录下添加的ADDITIONAL_BUILD_PROPERTIES system/etc/prop.default 主要是系统添加的PRODUCT_SYSTEM_DEFAULT_PROPERTIES vendor/build.prop（比较重要） 主要是系统添加的PRODUCT_PROPERTY_OVERRIDES，添加在device.mk的这个属性会被编译到这里，但是在9.0的系统，加到这里会无效，获取不到值。 vendor/default.prop（会被同目录的build.prop相同property覆盖） 主要是系统添加的PRODUCT_DEFAULT_PROPERTY_OVERRIDES"},{"title":"Android Graphics 调试技巧（十月份更新）","date":"2019-10-12T15:52:00.000Z","url":"/Blog/2019/10/12/2019/191012_android_debug1/","tags":["graphics"],"categories":["android"],"content":"readelf命令查看ELF格式的文件信息常见的文件比如动态库(*.so)、静态库（*.a），常用命令：readelf -a libgui.so | grep test_string 查看手机内存 adb logcat缓存管理 linux离线翻译工具sdcv apt-get命令列出版本号sudo apt-cache madison openssh-client Linux安装tar.xz软件包 JNI的jlong类型打印不使用%lld和%ld，而是先将其转换成long，然后%ld打印。 monkey测试指令参数 示例(1) adb shell monkey -p PackageName -v -v -v -s 12 –throttle 500 1000 &gt; monkey.txt随机数种子是12，log详细程度最高，单步延时500ms，总执行1000步，日志输出到monkey.txt (2) adb shell monkey -p PackageName –throttle 200 –ignore-security-exceptions -v 100000000 (3) adb shell monkey -p PackageName –throttle 200 –ignore-crashes –ignore-timeouts –ignore-security-exceptions –ignore-native-crashes –monitor-native-crashes -v -v -v 1000000 &gt; monkeylog.txt (4) 不指定包：adb -s DeviceID shell monkey –throttle 200 –ignore-crashes –ignore-timeouts –ignore-security-exceptions –ignore-native-crashes –monitor-native-crashes –ignore-security-exceptions -v -v -v 100 &gt; monkeylog.txt (5) 正常测试验证问题使用（不忽略crash,压力测试，所以不指定间隔时间）：adb -s DeviceID shell monkey -p PackageName –throttle 200 –ignore-security-exceptions -v 100000000 &gt; monkeyLog.txt 停止monkey测试 重现monkey测出的bugmonkey日志搜索ANR exception，将之前的事件重新操作。尤其是seed值要一样，如monkey -p PackageName -v seed(-s) 100(seed的值) 500(随机时间次数) dump meminfo kernel使用printk调试 打印调试log printk(&quot;%d&quot;,intA); 打印变量所占内存大小 printk(&quot;sizeof(*intA)=%d&quot;,sizeof(*intA); 查看设别是否支持Project TeableProject Treble是在最新的Android上应用兼容的芯片驱动，加快最新系统适配的速度。 adb shell getprop ro.treble.enabled 查看cpu架构adb shell getprop ro.product.cpu.abi Service服务命令 测试CtsMediaTestCases需要CTS媒体文件（连接外网）Google官网下载，例如CTS媒体文件1.4，解压后阅读README文件，按照提示copy文件到device。 当前活动Activiy获取当前ACTIVITYadb shell dumpsys activity top|grep ACTIVITY 命令启动指定Activityadb shell am start -n ActivityName Android SDK抓取systrace 打开模拟Vsync，从Systrace查看到 源码： Android 10的AOSP 方法： 修改surfaceflinger/Scheduler/DispSync.cpp的static const bool kEnableZeroPhaseTracer = false;为True adb devices很少识别 添加usb设备自动识别信息/etc/udev/rules.d/ adb shell获取设备信息参数（序列号） Android中CPU频率查看和修改 Ubuntu下载更新杀毒软件 安装deb包 sudo dpkg -i gapid-1.3.1-linux.deb 查看手机服务 开发者选项 -&gt; Running services可以查看正在运行的服务，以及运行内存情况 查看修改屏幕分辨率和密度 查看进程map虚拟地址 SELinux模式开启关闭SELinux(Security-Enabled Linux)是美国国家安全局（NSA）对于强制访问控制的实现（安全子系统） 临时生效方法： adb shell setenforce 0（临时生效，关闭SELinux模式） adb shell setenforce 1（启用，开启SELinux模式） adb命令 – 录制手机视频 adb shell screenrecord sdcard/record.mp4 1adb pull sdcard/record.mp4 . adb命令 – 截图 adb shell screencap -p sdcard/1.png adb命令 – 输入文本节省手动输入的时间： adb shell input text **** adb命令 – 获取APP路径 adb shell dumpsys SurfaceFlinger 最下方查看正在运行的APK adb shell pm path &quot;com.**&quot; 获取路径 台式机通过WIFI建立adb连接，实现无线连接手机通常在需要手机连接外设显示设备的同时需要抓取Log、Dump等操作： 两台手机连上同一个无线网 其中一台A关闭开发者选项的USB调试，并且连接到电脑作为热点（无线网卡） 另一台B连接电脑输入adb tcpip 5555，然后输入adb shell ifconfig wlan0查看B的IP地址 连接B手机的IP： adb connect IP 断开B，保持A连接在电脑 连接DP继续dump SurfaceFlinger的方法 连接DP前启动：adb shell dumpsys SurfaceFlinger --file --no-limit 断开DP后再次执行结束Dump：adb shell dumpsys SurfaceFlinger --file --no-limit 接过文件pull出来：adb pull /data/misc/wmtrace/dumpsys.txt md5sum命令检测文件通过md5sum filename查看文件的md5sum值是否一样 GSI含义 GSI是替换成google的frameworks等(即system.img, 即google的原生AOSP)system.img包含整个系统，framework、application等，被挂接到”/“目录下，包含系统的所有二进制文件。大概是编译出来的out/target/product/ProductName/system目录的映射 GSI方法 CTS VTS跑测注意点 重跑：run retry --retry 序列号 跑测arm64-v8a还是armeabi-v7a等:run cts-suite -s ... -a arm64-v8 -m ... linxu命令查找命令查找字符串 grep -rn 字符串 grep 字符串 -Rin * //查找该目录下包含该字符串的文件 查找文件 find . -iname Test* Git命令 回退到某个commitID： git reset --hard commitID 新建一个Commit用于Revert某个分支： git revert commitID 修改commit信息git commit --amend --author=&quot;**&quot; --date=&quot;**&quot; 修改作者和日期 添加topic的方法(提交到Gerrit)git push origin HEAD:refs/for/BRANCH_Name%topic=&quot;name&quot; 使用新的change ID覆盖原来已经提交的Patchgit push origin HEAD:refs/changes/99999 (gerrit上的已有Commit的Patch ID) git stash暂时储藏用于修改的代码暂时保存起来，并且不影响下次的修改(这个比生成本地补丁方便git format-patch -1 commitID)： git stash save &quot;Remarks&quot; 执行存储，并且添加备注 git stash list 查看储藏列表 git stash show stash@{1} 查看某次储藏的修改 git stash apply stash@{$Num} 应用某次储藏 git stash pop stash@{$Num} 从缓存堆栈中删除某次储藏并且应用到代码中，默认第一个stash git stash drop stash@{$Num} 从列表删除这个存储 git stash clear 删除所有缓存的stash Repo下载项目方法 下载.repo：repo init -u Git远程仓库 -b Branch_Name(分支选择) Sync项目：repo sync -c -j4（当前分支） 如果值Sync指定目录，则在指定目录下执行：repo sync -c . -j4 Android常用编译方式 source build/envsetup.sh lunch //选择指定Product make fullbuild -j4 如果只编译部分模块： framework模块：make framework -j4，结果生成framework.jar包到/system/framework 编译kernal/msm使用： make bootimage -j4 指定目录下执行:mm/mmm/mma(依赖编译) "},{"title":"nReal搭建Samepl APK","date":"2019-09-30T13:52:00.000Z","url":"/Blog/2019/09/30/2019/190930_nReal_Sample/","tags":["nReal"],"categories":["VR"],"content":"概述nrsdk是nreal开发混合现实体验的平台。使用简单的开发过程和高级api，nrsdk提供了一组强大的mr特性，并使nreal眼镜能够了解真实世界。 nrsdk为开发者提供了五个核心特性： 空间计算使眼镜能够跟踪它们相对于世界的实时位置，并了解周围的环境，例如检测和跟踪平面和图像。 优化的渲染自动应用于应用程序并在后端运行，以最小化延迟并减少抖动，增强总体用户体验。 多模态交互为不同的用例提供了交互的直观选择。 提供了开发工具，以便您可以更好地开发和调试应用程序。 第三方集成是通过为第三方sdk提供数据来实现的，这允许您充分利用nreal light的硬件功能并构建功能强大的mr/ar应用程序。 开发工具包 开发混合现实应用程序需要一个nreal开发工具包。开发工具包由一对nreal光学眼镜、nreal计算单元和nreal光学控制器组成。如果没有，请在这里注册nreal开发工具包！到目前为止，你还不能直接在android手机上开发应用程序。安卓手机开发将于2020年初推出。 选择开发平台nrsdk支持许多最流行的开发环境。通过这些功能，您可以构建全新的mr体验，或者使用mr功能增强现有的原生android应用程序。Unity （Support Unity 2018.2.X） Android Native (to be released) Unreal (to be released) 与Android本机应用程序兼容nreal眼镜现在与android原生应用程序兼容，这意味着只要应用程序安装在设备上，用户就可以通过眼镜查看所有应用程序活动。在你这边什么都不需要改变。要使2d应用程序更具沉浸感和三维感，可以使用nrsdk在现有应用程序中添加mr功能或3d虚拟对象。 功能空间计算nreal眼镜使用各种传感器和相机，以建立对周围环境和用户本身的复杂理解，创造身临其境的体验，无缝融合数字世界和现实世界。 HelloMR APP硬件清单 一个nreal计算单元（把它想象成一个没有屏幕的android手机，所以所有的开发过程都将非常类似于移动应用程序开发）。 一副自然光眼镜 没有nreal设备？注册nreal开发工具包！或者尝试仿真器在没有nreal眼镜和计算单元的情况下引导nreal应用程序功能。 连接nReal计算单元和PC的USB-C电缆 不需要Wi-Fi连接。但是，可以使用Wi-Fi Android调试桥（ADB）连接进行调试和测试。 软件清单 Unity 2018.2.x或更高版本，支持Android构建 下载Unity 1.1的nrsdk(sdk作为nrsdkforunity_1.1.unitypackage下载) android sdk 7.0（api级别24）或更高版本，使用android studio中的sdk管理器安装 创建统一项目 打开Unity并创建一个新的3D项目。 set player settings&gt;other settings&gt;scriptping runtime version to.net 4.x等效版本 为unity导入nrsdk 选择“资源&gt;导入包&gt;自定义包”。 选择您下载的nrsdkforunity_1.1.unitypackage。 在“导入包”对话框中，确保选中了所有包选项，然后单击“导入”。 在unity项目窗口中，通过选择assets&gt;nrsk&gt;demos&gt;hellomr找到hellomr示例应用程序。 配置生成设置 转到“文件&gt;生成设置”。 选择android并单击switch platform。 在“生成设置”窗口中，单击“播放器设置”。 在Inspector窗口中，按如下方式配置播放机设置：() 连接到nReal设备(开发工具包)在计算单元上启用开发人员选项和USB调试。android调试桥（adb）作为默认设置启用，不需要手动设置）。将计算单元连接到Windows PC。 建立并运行 在Unity Build设置窗口中，单击Build。在构建成功后，通过wifi android调试桥（adb）安装应用程序。 断开电脑与电脑的连接，然后将其连接到眼镜上。 如果这是您第一次运行此应用程序，则需要使用某些工具（如scrcpy）对该应用程序进行身份验证。 与nReal Light控制器一起启动应用程序。有关如何使用nReal Light控制器的说明，请参阅控制器指南。 四处移动，直到nrsdk找到一个水平面，检测到的平面将被绿色网格覆盖。 单击触发器按钮在其上放置nReal徽标对象。 （可选）使用android logcat查看记录的消息。我们建议使用WiFi Android调试桥（ADB）连接到您的PC，这样您就不必在大多数时间通过数据线连接。 Sample APP(立体方块)scene设置 在SampleScene删除主摄像头； 将Assets -&gt; NRSDK -&gt; Prefabs -&gt; NRCameraRig拖拽到SampleScene中； 将Assets -&gt; NRSDK -&gt; Prefabs -&gt; NRInput拖拽到SampleScene中； 将Assets -&gt; NRSDK -&gt; Emulator -&gt; Prefabs -&gt; NRTrackableImageTarget拖拽到SampleScene;在其中可以修改场景图像（Image Target） 在SampleAPP右侧窗口中右击Create -&gt; 3D -&gt; Object -&gt; Cube，创建立方体将Scale均修改成0.25 右击Create Empty,在Inspector中Add Component(1)Script设置为TrackableFoundTest(2)Observer设置为NRTrackableImageTarget(3)Obj设置为Cube 打开Assets -&gt; NRSDK -&gt; Emulator -&gt; Scripts -&gt; TrackableFoundTest,编辑源文件C#，添加Update函数，增加每次点击切换立方体颜色 File -&gt; BuildSettings添加SampleAPP，然后选择Android，最后Building 生成APK，安装full screen black 或者在Unity上方点击Play按钮使用Emulator查看，常用按键操作： "},{"title":"Android Handler消息循环处理机制(例ActivityThread)","date":"2019-09-22T07:01:32.000Z","url":"/Blog/2019/09/22/2019/190922-android-handler-cpp/","tags":["android"],"categories":["android"],"content":"整体流程 关键词：Handler、Looper、MessageQueue、handleMessage 消息被存放于消息队列，应用程序的主线程会围绕这个消息队列进入一个无限循环，知道应用程序退出。（消息循环过程是由Looper实现的） 如果队列中有消息，应用程序的主线程会把它取出来，分发给相应的Handler进行处理； 如果队列中没有消息，应用程序的主县城就会进入空闲等待状态，等待下一个消息的到来； 消息循环（以ActivityThread为例） 应用程序的消息循环是从 ActivityThread 的 main()函数入口的，在 main()函数中会调用Looper.prepareMainLooper();和Looper.loop(); 代码：  frameworks/base/core/java/android/app/ActivityThread.java 创建Looper对象的时候，会同时创建一个 MessageQueue，保存在 Looper 的成员变量 mQueue 中。Looper和MessageQueue就是这样关联起来的。 JNI层创建 Looper 时会通过 pipe 系统调用来创建一个管道。 frameworks/base/core/java/android/os/Looper.java 该Looper对象创建好之后会保存在 NativeMessageQueue 对象的成员变量 mLooper 中，这个对象的作用是，通过管道实现以下功能：当Java层的消息队列中没有消息时，就使 Android 应用程序主线程进入等待状态，而当Java层的消息队列中来了消息时，就唤醒Android应用程序的主线程来处理这个消息。 ActivityThread调用Looper.loop()才会进入消息循环。 进入消息循环后，会不断地从消息队列mQueue中去获取下一个要处理的消息msg，如果消息的target为null，就表示要退出消息循环了，否则就会调用target对象的 dispatchMessage 函数来处理这个消息。 调用 queue 的 next 函数去获取下一个要处理的消息，但调用这个函数有可能会让线程进入等待状态。一是当消息队列中没有消息时，它会使线程进入等待状态；二是消息队列中有消息，但是消息指定了执行的时间，而现在还没有到这个时间，线程也会进入等待状态。 /frameworks/base/core/java/android/os/Looper.java 调用 queue 的 next 函数去获取下一个要处理的消息，但调用这个函数有可能会让线程进入等待状态。一是当消息队列中没有消息时，它会使线程进入等待状态；二是消息队列中有消息，但是消息指定了执行的时间，而现在还没有到这个时间，线程也会进入等待状态。 消息发送从应用程序启动入口分析下消息发送流程。应用程序启动过程中会调用 sendMessage 函数向应用程序的消息队列中加入一个新的消息。sendMessage将参数封装成Message，然后通过mH.sendMessage把该消息加入消息队列。mH是ActivityThread类的成员变量，它的类型为H，继承于Handler类。 定义： final H mH = new H(); /frameworks/base/core/java/android/app/ActivityThread.java sendMessage函数是继承于Handler的，Handler在它的构造函数中获取了Looper对象和MessageQueue 对象。 frameworks/base/core/java/android/os/Handler.java msg.target = this;表示这个消息最终由这个Handler对象来处理，即由ActivityThread对象的mH成员变量来处理。最终会调到MessageQueue的enqueueMessage函数最后会调到Looper.cpp的wake函数。 /frameworks/base/core/java/android/os/Handler.java frameworks/base/core/java/android/os/MessageQueue.java /frameworks/base/core/jni/android_os_MessageQueue.cpp 消息处理ActivityThread的main函数在Looper.loop函数中调用msg.target.dispatchMessage(msg)去处理消息。 frameworks/base/core/java/android/os/Looper.java 消息对象msg的成员变量target是在发送消息的时候设置好的，通过哪个Handler来发送消息，就通过哪个Handler来处理消息。 当时是 H 类把消息加入消息队列的，现在也该由 H 类处理消息。 H类没有实现自己的dispatchMessage函数，但它继承了父类Handler的dispatchMessage函数。 frameworks/base/core/java/android/os/Handler.java 最终调用handleMessage处理消息。此处既是调用ActivityThread.java的该函数。 /frameworks/base/core/java/android/app/ActivityThread.java SurfaceFlinger的消息处理机制 类似的消息处理机制在SurfaceFlinger也存在，拥有独自的文件frameworks/native/services/surfaceflinger/Scheduler/MessageQueue.cpp等待消息、发送消息、处理消息。从而进行Layer合成事件。 /frameworks/native/services/surfaceflinger/Scheduler/MessageQueue.cpp"},{"title":"Android WMS和View基本理解","date":"2019-09-21T13:32:22.000Z","url":"/Blog/2019/09/21/2019/190921-android-wms-view-cpp/","tags":["graphics"],"categories":["android"],"content":"概述 Window 可以看做是Surface的一个包装，本质上，Window的本体就是一片Surface。将操作对象Surface，对象关联属性集以及操作方法等组合在一起便是 Window。Surface 其实是一块画布，应用可以随心所欲地通过 Canvas 或者 OpenGL 在其上作画，然后通过 SurfaceFlinger 将多块 Surface 的内容按照特定的顺序(ZOrder)进行混合并输出到 FrameBuffer，从而将 Android 漂亮的脸蛋显示给用户。既然每个窗口都有一块 Surface 供自己涂鸦，所以必然需要一个角色对所有窗口的 Surface 进行协调管理。于是,WMS 应运而生。 代码：  对应的关系： 1 IDirectFB (顶层) &lt;–&gt; N 屏幕(Screens) 1 屏幕(Screen) &lt;–&gt; N 层(Layers) 1 层(Layer) &lt;–&gt; 1 主表面(Primary Surface) 1 层(Layer) &lt;–&gt; N 窗口(Windows) 1 窗口(Window) &lt;–&gt; 1 窗口表面(Window Surface) 1 表面(Surface) &lt;–&gt; N 子表面(Subsurfaces) Dump window信息adb shell dumpsys window windows 可以列出当前系统中存在的所有窗口。查看下该命令的输出可以发现Android是一个同时存在着多个窗口的系统。比如 StatusBar、NavigationBar、Activity、InputMethod、WallPaper 等窗口都可能同时存在。因为同时有多个窗口各自为政，所以需要 WMS 作为管理者来协调，以便窗口们能在狭窄的显示屏幕上和睦相处。 作为协调者，WMS的本职工作主要是负责管理各窗口的生命周期（创建/销毁）、各窗口的位置大小（Layout）、各窗口的显示层级（Z-order）以及窗口的显示属性（可见性等）。 相关类 DisplayContent：一个容器，一个 DisplayContent 内收集了所有需要显示到相应屏幕上的窗口 PhoneWindowManager：定义了 Phone 相关的窗口策略，负责为 WMS 提供各种建议，包括布局，事件处理，屏幕旋转等 WindowAnimator WindowStateAnimator AppWindowAnimator： 主要负责 Surface 相关操作，包括创建，销毁，Surface 属性变更，动画等 WindowToken AppWindowToken： WindowToken 的作用是将一组相关性紧密的窗口组织在一起。达到批量管理的效果 WindowState： 一般被认为是 WMS 眼中的窗口，管理着关联窗口的所有属性状态信息 AppWindowToken 根据 AMS 侧 Activity 的顺序有序排列，WindowState 根据 Layer 值有序排列。 WMS添加窗口流程（addView）WindowManagerGlobal，是一个进程唯一的实例，也就是说无论在应用的任何角落调用addView，都会通过WindowManagerGlobal 来处理相应的请求。从理解出发，可以认为WindowManagerGlobal是一个App进程中窗口管理者。 frameworks/base/core/java/android/view/WindowManagerImpl.java 调用WindowManagerGlobal的addView函数： frameworks/base/core/java/android/view/WindowManagerGlobal.java setView做了很多处理，主要的是调用requestLayout()和 mWindowSession.addToDisplay。见下面： addWindowframeworks/base/core/java/android/view/ViewRootImpl.java 这里出现了mWindowSession，它的类型是 IWindowSession，是WindowManagerGlobal#sWindowSession的一个引用，进程唯一的实例。 它是常见的Binder远程调用中IWindowSession的Bp端，Bn端是一个Sessio 实例，存在于WMS所属进程，Session代表了WMS关于窗口管理服务的一个子集，Android 系统中，由App进程端主动向WMS发起的请求，都是通过mWindowSession进行的，也就是说Session提供了所有App进程能够请求WMS的服务请求。 调用到实现类Session.java: frameworks/base/services/core/java/com/android/server/wm/Session.java 最终调用到WMS.java的addWindow函数。addWindow的工作可以分为4步： WindowToken 检查 WindowState 创建 将新建的 WindowState 插入到现有的 WindowState 有序列表里 给系统中现有的所有 WindowState 重新分配 Layer relayoutWindow Surface outSurface：输出参数，用于承载该窗口的 Surface，ViewRootImpl 获得此 Surface 便可以调用Draw在上面进行绘制窗口所承载的所有View。 关于 relayoutWindow 的处理内容粗略分为下列： 根据传入参数更新 WindowState 对象的对应属性，这些属性都会在布局的时刻用到。 根据传入的可见性参数处理窗口 Surface 的创建或销毁 处理一些由窗口更新带来的一些变化，如 Focus 变化，输入法窗口/壁纸窗口移动，屏幕构型 Configuration 改变等 执行 performLayoutAndPlaceSurfaceLocked 函数进行布局 View概述View就是一块可以用来进行绘画，可以处理输入事件进行交互的矩形区域，而ViewGroup就是一种可以容纳View的矩形容器。 从设计模式的角度看，ViewGroup 和 View 是组合模式的典型应用。View 是基本的控件元素，ViewParent 接口定义了添加、删除 View 的接口 addView、removeView，ViewGroup 实现了 ViewParent 的接口，因此可以作为 View 的容器管理 View，同时 ViewGroup 又继承自 View，可以被其他的 ViewGroup 管理。这样 ViewGroup 和 View 就可以组成上面的树状结构了。 应用程序启动的过程中，会加载一个或者多个 Activity。每个 Activity 对应一个 PhoneWindow。当Activity在onCreate方法中调用 setContentView 的时候，PhoneWindow 会根据布局文件，创建 View 树，同时，根据应用的一些参数设置，得到集合了窗口显示特性的 View 树的根节点 mDecor 。WindowManagerGlobal 会通过数组记录一个应用程序对应的所有 View 树的根节点 mDecor，布局参数，以及对应的 ViewRootImpl。同时，将 mDecor 和布局参数传递给 ViewRootImpl。ViewRootImpl中实现对 View 树的整体控制，包括与 WMS 的通信，View 的描绘处理，输入事件的分发处理等。 View 的结构图如下： 基本元素 View ：最基本的UI组件，表示屏幕上的一个矩形区域 Window ：1〉 表示顶层窗口，管理界面的显示和事件的响应；2 〉每个Activity均会创建一个PhoneWindow对象，是Activity和整个View系统交互的接口。该Window在Activity的attach方法中通过调用PolicyManager.makeNewWindow创建； DecorView ：是Window中view的RootView WindowManager ：1〉 主要用来管理窗口的一些状态、属性、view 增加、删除、更新、窗口顺序、消息收集和处理等 2〉interface，继承自ViewManager。所在应用进程的窗口管理器；3〉实现类 WindowManagerImpl ViewRootImpl：1 〉界面控制和消息响应；2 〉通过IWindowSession接口与全局窗口管理器WMS进行交互 ActivityThread：1〉 应用程序的主线程，其中会创建关联当前 Activity 与 Window；2〉创建 WindowManager 实现类实例，把当前 DecoView 加入到 WindowManager View处理简单流程VSYNCVSYNC 信号，即 vertical synchronization，可以理解为垂直同步，或者帧同步。是 Android4.1 为了解决 UI 不流畅问题而引入的处理。当需要同步信号的时候，通过 Choreographer 注册回调，等到 VSYNC信号到来的时候，执行相应的回调。这样，一方面可以避免频繁更新导致的画面不流程；另一方面，因为 SYNC 信号的频率大概是 60 次/秒，即可以保证帧率 60，显示效果非常平滑。 由上图可见，View 的描绘工作，是在 performTraversals 中完成的。主要分为三步： performMeasure，负责计算View的尺寸； performLayout，负责计算 View 在界面上的位置； performDraw，根据前面两步的计算结果，完成实际的描绘工作。 performTraversals触发描绘处理View 的描绘是通过 performTraversals 发起的，所以任何调到 performTraversals 的地方，都会触发描绘处理。 ViewRootImpl 中初次添加 View:自上而下发起遍历。 应用主动调用 requestLayout:自下而上通过 mParent 调用父节点的 requestLayout，直至 ViewRootImpl。 应用主动调用 invalidate:自下而上通过 mParent 调用父节点的 invalidateChild，直至 ViewRootImpl。 其他情况：如应用程序的 Visibility 发生变化的时候，LayoutParams 发生变化的时候等，都会触发遍历操作。 performMeasure（测量） frameworks/base/core/java/android/view/ViewRootImpl.java frameworks/base/core/java/android/view/View.java performLayout（布局） performDraw（硬件渲染） performDraw调用draw，完成绘制工作。实际绘制操作可以分为硬件渲染和软件渲染两种情况。 Step1. ViewRootImpl.setView当mSurfaceHolder为空，也就是说应用不会要求自己接管对窗口的渲染的情况下，才会开始硬件渲染环境的准备。 Step2. ViewRootImpl.enableHardwareAcceleration frameworks/base/core/java/android/view/ViewRootImpl.java 常驻内存的进程，禁止使用硬件加速，因为非常耗费内存。 系统进程一般都要禁用硬件加速，但是以下两种情况除外： (1) 应用启动之前的Starting Window，会通过设置以下flag，标示启用硬件加速，但是不缓存： WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED (2) 锁屏界面，虽然是在系统进程中，但是通过设置以下 flag，可以启用硬件加速： WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED 其他情况，根据 Activity 窗口是否请求硬件加速渲染决定是否开启硬件加速。通过判断flags位 WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED被置为1，同时硬件支持硬件加速，就可以继续后面的初始化工作了。 Step3: ThreaedRenderer.create设备支持 Open GL ES2.0，就创建对象：ThreadedRender。 通过 nCreateRootRenderNode 在 Native 层创建一个 Render Node。 通过 adopt 方法，将 Native 层的 Render Node 封装成 Java 层的 Render Node。 通过 nCreateProxy 在 Native 层创建一个 Render Proxy 对象。该proxy对象以后负责从Main Thread向RenderThread发送命令。 RenderProxy 有三个重要的成员变量： mRenderThread：进程单例，指向 RenderThread 对象，通过它可以向 RenderThread 线程发送命令。 mContext：画布上下文。RenderThread 通过它完成渲染工作。 mDrawFrameTask：指向一个 DrawFrameTask 对象，Main thread 通过它向 Render Thread 线程发送渲染下一帧的命令。 Step4：ViewRootImpl.performTraversals当得到了有效的surface，就通过ThreadedRender的initialize方法，将该surface与RenderThread绑定。 硬件渲染流程图 ThreadedRender.draw主要执行三个操作： 调用成员函数 updateRootDisplayList 构建或者更新应用程序窗口的 Root Render Node 的 DisplayList。RenderNode.start 和 RenderNode.end 直接的处理，与软件渲染的流程一样，只是硬件渲染的时候，只把渲染命令存储到 DisplayList 中，并不真正开始执行渲染操作。 调用成员函数 registerAnimationRenderNode 注册应用程序窗口动画相关的 Render Node 到 native 层。这些RenderNode是用于描述当前窗口设置的动画。 调用成员函数 nSyncAndDrawFrame，通知Render Thread绘制下一帧。其具体实现在 navtive 层。通DrawFrameTask 向 RenderThread 的 task Queue 抛出一个消息，等待 RenderThread 在合适的时候唤醒。 软件渲染在 ViewRootImpld 的 draw()如果不进行硬件渲染，会进行软件渲染drawSoftware() Step1. ViewRootImpl.Draw 计算窗口是否处于滚动状态。 计算 dirty 区域，也就是需要重绘的区域。 Dirty 区域不为空，或者动画进行中，继续判断是否选择了硬件加速，如果没有使用硬件加速，则通过 drawSoftware（）发起软件渲染。 如果动画执行过程中，发起下一次轮询。 frameworks/base/core/java/android/view/ViewRootImpl.java Step2. ViewRootImlp.drawSoftware通过 lockCanvas()获取画布。 Step3. Framelayout.draw(Canvas)ViewRootImpl 中，通过 mView.draw(canvas)，调用 DecorView 的 draw 方法；DecorView 通过 super.draw(canvas)，调用父类 Framlayout 的 Draw 方法。 在 FrameLayout 中，通过 super.draw(canvas)方法，调用 View.draw 方法，触发实际的描绘处理。 Step4. View.draw 描绘背景。如果 PFLAG_DIRTY_OPAQUE 被设置，并且 mAttachInfo.mIgnoreDirtyState=flase，说明有不透明子view遮挡了当前的 view，不需要绘制背景。 保存当前画布的堆栈状态，并且创建额外的图层描绘当前视图滑动时的边框渐变效果。FADING_EDGE_VERTICAL 和FADING_EDGE_HORIZONTAL 都没有被设置的时候，不需要执行这步操作。 通过 onDraw 调用子类描绘处理，完成当前视图的描绘。 通过 dispatchDraw 调用子视图的描绘处理。 绘制边框的渐变效果（与步骤 2 对应），并且恢复图层。此步骤不是必需的。 如果需要显示滚动条，通过 onDrawScrollBars 调用描绘滚动条。 Step5. ViewGroup.dispatchDraw FLAG_RUN_ANIMATION被设置，并且允许显示子视图的动画，则通过 bindLayoutAnimation 设置动画。设置完成后，通过LayoutAnimationController 的对象来启动动画，并且调用 mAnimationListener 的 onAnimationStart()来通知动画监听，当前视图开始显示动画了。 如果子视图可见或者有动画需要显示，就通过方法 drawChild 实现子视图的绘制。 如果动画结束，通过notifyAnimationListener发送消息，通知动画监听者，动画已经结束。 Step6. ViewGroup.drawChild调用子 view 的 draw(Canvas, ViewGroup,long)方法，实现子视图的绘制。 Step7. View.draw(Canvas, ViewGroup, long) 通过方法drawAnimation实现动画的绘制。 通过flag检查子视图是否支持缓冲方式绘制。即将子视图缓冲到一个Bitmap中，后续可以通过getDrawingCache获得该bitmap。 以非缓冲的方式绘制：检查 SKIP_DRAW 标记是否被置位，如果为 1，则跳过当前视图的绘制，调用 ViewGroup 的dispatchDraw，重复前面过程，继续该视图的子视图的绘制；否则，通过调用 View.draw(Canvas)，重复 step4 的过程，完成当前视图的绘制以后，再发起子视图的绘制。 以缓冲的方式绘制：通过 canvas.drawBitmap()将上次缓冲的 Bitmap 对象 cache 绘制到画布上。 Step8. ViewRootImpl.drawSoftware循环上面的过程，直到所有子视图都被绘制到画布上，返回 drawSoftware 方法。 通过 surface.unlockCanvasAndPost()方法，请求 SurfaceFlinger 服务渲染这块画布到图形缓冲区。 软件渲染流程图"},{"title":"C++ 运算符重载、友元、返回对象","date":"2019-09-16T14:59:00.000Z","url":"/Blog/2019/09/16/2019/190916_cpp_useclass/","tags":["cpp"],"categories":["cpp"],"content":"运算符重载运算符重载将重载的概念扩展到运算符上，允许赋予C++运算符多种含义。 例如* 用于地址，将获得存储在这个地址中的值；而用于两个数字之间，得到的是乘积。 要重载运算符，可以使用被称为运算符函数的特殊函数形式，运算符函数的格式如下：operator(argument-list) 例如operator+()重载+运算符，operator*()重载*运算符。op必须是有效的运算符，不能虚构新的符号。比如不存在operator@()。 重载限制 重载后的运算符必须至少有一个操作数是用户定义的类型。防止用户为标准类型重载运算符。即不能用减法运算符重载求和，会影响性能。 使用运算符不能违反运算符原来的句法规则。例如不能将求模（余数）运算符重载成使用一个操作数： 同时不能修改运算符的优先级。 不能创建新运算符，例如不能定义operator**()函数来表示求幂。 不能重载以下运算符： 运算符 释义 sizeof sizeof求长度运算符 . 成员运算符 .* 成员指针运算符 :: 作用域解析运算符 ? 条件运算符 typeid 一个RTTI运算符 const_cast 强制类型转换运算符 dynamic_cast 强制类型转换运算符 reinterpret_cast 强制类型转换运算符 static_cast 强制类型转换运算符 友元 C++控制对类对象私有部分的访问，通常公有类提供唯一的访问途径，但是有时候限制太严格，以致于不适合特定的编程情形。因而C++提供另一种形式的访问权限：友元 ， 有三种： 友元函数 友元类 友元成员函数（通过让函数成为类的友元，可以赋予该函数与类的成员函数相同的访问权限。） 在为类重载二元运算符时常常需要友元。 创建友元将原型放在类声明中，并在原型声明前加上关键字friend。 friend Time operator* (double m, const Time &amp;t);//goes in class declaration 表明两点： 虽然是在类声明中声明，但不是成员函数，因此不能使用成员运算符调用（.或者-&gt;），不能使用Time::限定符 虽然不是成员函数，但是和成员函数的访问权限相同 在函数实现中不要使用关键字friend 返回对象相关当成员函数或独立的函数返回对象时，有几种返回方式可供选择，可以返回指向对象的引用、指向对象的const引用或const对象。 返回指向const对象的引用使用const引用的常见原因是极高效率，但是对何时可以采用这种方式存在限制。如果函数返回（通过调用对象的方法或者将对象作为参数）传递给他的对象，可以通过返回引用来提高效率。 返回指向非const对象的引用两种常见的返回非const对象的情形： 重载赋值运算符（旨在提高效率） 重载与const一起使用的&lt;&lt;运算符（必须这么做） 在这个例子中，返回类型不是const，因为方法operator=()返回一个指向s2的引用，可以对其进行修改。 在这个例子中，返回类型必须是ostream&amp; ，而不能仅是ostream，否则将调用ostream类的复制构造函数，而ostream没有共有的复制构造函数。 返回对象如果返回的对象是被调用函数中的局部变量，则不应使用引用方式返回它。因为在被调用函数执行完毕，局部对象将调用其析构函数。 小结指针和对象使用 使用常规表示法来声明指向已有的对象，String * glamour; 可以将指针初始化为指向已有的对象，String * first = &amp;sayings[0]; 可以使用new来初始化指针，这将会创建一个新的对象，String * favorite = new String(sayings[choice]); 对类使用new将调用相应的构造函数来初始化新建的对象 可以使用-&gt;运算符通过指针访问类的方法，shortest-&gt;length() 可以对对象的指针应用解除引用运算符*来获得对象，’if (sayings[i] &lt; *first&gt;)’ 重载&lt;&lt;运算符要重新定义&lt;&lt;运算符，以便将他和cout一起用来显示对象的内容，请定义下面的友元运算符函数： 转换函数要将单个值转换为类类型，需要创建原型如下所示的类构造函数：c_name(type_name value) 其中c_name是类名，type_name是要转换的类型的名称。 要将类转换为其他类型，需要创建类如下所示的类成员函数:operator type_name(); 虽然该函数没有声明返回类型，但应返回所需类型的值。使用转换函数时，可以在声明构造函数中使用关键字explicit，放置它被用于隐式转换。 其构造函数使用new的类 对于指向的内存是由new分配的所有类成员，都应在类的析构函数中对其使用delete，该运算符将释放分配的内存 如果析构函数通过对指针类成员使用delete来释放内存，则每个构造函数都应当使用new来初始化指针，或将其设置为空指针 构造函数中要么使用new，要么使用new[]，不能混用。对应的析构函数使用delete，和delete[] 应定义一个分配内存的复制构造函数，这样程序能够将类对象初始化为另一个类对象，通常的函数原型：className(const className &amp;) 应定一个重载赋值运算符的类成员函数，其函数定义如下: Share一个Ubuntu免费使用ultraEdit的方法在bin目录下建立一个脚本，并且在打开软件前执行： uexClearCache.sh "},{"title":"Android zygote和SystemServer进程","date":"2019-09-10T14:52:00.000Z","url":"/Blog/2019/09/10/2019/190910_android_zygote_systemserver/","tags":["android"],"categories":["android"],"content":"zygote和system_server在Android中的Java层很重要。 zygote分析 zygote由init进程根据init.rc的配置项创建的。最初叫app_process，但是在运行过程中，通过Linux的pctrl系统调用将其换成了zygote。通过adb shell ps -ef|grep zygote查看到该进程。 Android-10.0.0_r2 AOSP源码中，查看其入口函数： frameworks/base/cmds/app_process/app_main.cpp 重要的功能由AppRuntime的start函数完成。而AppRuntime类就在app_main.cpp中，从AndroidRuntime派生而来。 frameworks/base/core/jni/AndroidRuntime.cpp 创建虚拟机startVM 该函数调用JNI的Dalvik虚拟机创建函数，在sdtartVM中确定创建虚拟机的一些参数 注册JNI函数 startReg 给虚拟机注册一些JNI函数，采用native方式实现。 java入口 CallStaticVoidMethod CallStaticVoidMethod最终调用frameworks/base/core/java/com/android/internal/os/ZygoteInit.java的main函数。 forkSystemServer会创建java世界中系统service所驻留的进程system_server，该进程是framework的核心。 SystemServerSystemServer的进程名叫做system_server，由zygote进程中创建。 forkSystemServer函数中调用handleSystemServerProcess()来处理自己的事务。 调用到systemserver的main函数。 frameworks/base/services/java/com/android/server/SystemServer.java 随后会创建一些系统服务，并将调用线程加入到Binder通信中。并且会创建一个单独的线程，用以启动系统的各项服务，例如电池管理服务BatteryService，电源管理服务PowerManagerService，StartWindowManagerService，ActivityManagerService等等。 开机耗时长的原因 ZygoteInit的main函数中的preloadClasses加载了上千个类 开机启动时会对系统所有的APK扫描并收集信息 SystemServer创建的一系列service，占用不少时间 虚拟机heapsize的限制zygote创建虚拟机的时候，系统默认设置的java虚拟机堆栈值（可修改）对于使用较大内存的程序远远不够。zygote通过fork创建子进程，因而本身设置的信息会被子进程全部继承，例如设置堆栈对32MB，则子进程也会使用32MB。 watchdog看门狗watchdog作用是每隔一段时间去检查某个参数是否被设置了，如果发现该参数没有被设置，则判断为系统出错，然后强制重启。 Android对于systemserver的参数是否被设置也增加了一条看门狗。主要检查几个重要的service，如果service出了问题就会杀掉system_server，这回导致zygote也一起杀掉，导致java层重启。 SystemServer和Watchdog的交互大致分为三个步骤(frameworks/base/services/core/java/com/android/server/Watchdog.java)： Watchdog.getInstance().init()初始化 Watchdog.getInstance().start()，派生于Thread类，start启动线程，导致Watchdog的run在另外一个线程中被执行。该函数实现隔一段时间发送一条信息，那个线程将检查各个service的健康状况，而看门狗等待检查结果，如果第二次没有返回结果，将会杀掉systemserver Watchdog.getInstance().addMonitor()，如果要支持看门狗的检查，就需要让service实现monitor接口（比如ActivityManagerService,PowerManagerService,WindowManagerService） Example: 当一个函数占着锁，长时间没有返回（原因是这个函数需要和硬件交互，而硬件没有及时返回），导致系统服务死锁被watchdog检查到。"},{"title":"Android init进程","date":"2019-09-09T13:52:00.000Z","url":"/Blog/2019/09/09/2019/190909_android_init_service/","tags":["android"],"categories":["android"],"content":"概述 init是Linux系统中用户空间的第一个进程。通过adb shell ps -rf查看我的一加手机进程信息。 init进程负责创建系统中的几个关键进程，例如zygote init提供了一个property service（属性服务）来管理Android系统的众多属性 init分析 使用android-10.0.0_r2 AOSP最新源码（） init进程的入口函数从/system/core/init/main.cpp的main函数开始： system/core/init/main.cpp 在Android Q之前，此处一直都是直接调用入口函数： system/core/init/main.cpp 然后会调用到init.cpp中的SecondStageMain函数。init的工作流程精简为以下四点： 解析配置文件 执行各个阶段的动作（创建zygote的工作就是此时完成） 调用Property_init初始化属性相关的资源 init进入一个无线循环，等待一些事情的发生（init处理来自socket和来自属性服务器的相关事情） 解析系统配置文件init.rc 在入口函数调用LoadBootScripts(am, sm); 然后调用parser.ParseConfig(bootscript); 调用system/core/init/parser.cpp的parseConfig函数 调用Parser::ParseConfigFile函数，读取配置文件并解析 init.rc解析service 查看/system/core/rootdir/init.rc init.rc中：class_start，标识一个COMMAND，对应的处理函数是do_class_start，位于boot section范围内。 属性服务 注册标可以存储一些类似ket/value的键值对，一般系统或某些应用程序会吧自己的一些属性存储在注册表中，即使重启，还是能够根据之前在注册表中设置的属性，进行相应的初始化工作。Android平台也提供了一个类似的机制，称为属性服务（property service） property的初始化在init.cpp的主函数里面： "},{"title":"C++对象和类","date":"2019-09-04T14:52:00.000Z","url":"/Blog/2019/09/04/2019/190904_cpp_class_object/","tags":["cpp"],"categories":["cpp"],"content":"类型指定基本类型完成了三项工作： 决定数据对象需要的内存数量 决定如何解释内存中的位（long和float所占位数相同，但是将他们转换成数值的方法不同） 决定可使用数据对象执行的操作和方法 类class 类规范由两部分组成： 类声明：以数据成员的方式描述数据部分，以成员函数（方法）的方式描述公有接口 类方法定义：描述如何实现类成员函数 即类声明提供类的蓝图，方法定义则提供了细节。 类声明举例： stock00.h 实现类成员函数 为由类声明中的函数原型表示的成员函数提供代码。成员函数定义和常规函数相似，有函数头和函数体、返回类型和参数，但是有两个特征： 定义成员函数时，使用作用域解析运算符::来标识函数所属的类 void Stock::update(double price) {...} 此处的update即是Stock的成员函数，这就意味着可以将另一个类的成员函数也命名为update。 类方法可以访问类的private组件 构造函数 函数声明对象时，将自动调用构造函数。构造函数的参数表示的不是类成员，而是赋给类成员的值。因此，参数名不能和类成员相同，否则会导致混乱。 使用构造函数： 显示调用构造函数：Stock food = Stock(&quot;World cabbage&quot;, 250, 1.25); 隐式调用构造函数：Stock garment(&quot;Furry&quot;, 50, 2.6); 创建类对象：Stock *pstock = new Stock(&quot;ABC&quot;, 18, 19.0); Notes: 如果没有提供任何构造函数，则自动提供默认构造函数。比如：Sotck::stock() {...} 如果定义了构造函数，就必须提供默认构造函数，否则会报错。定义的方式有两种： 给已有构造函数的所有参数提供默认值，Stock(const string&amp;co = &quot;Error&quot;, int n =0;) 通过函数重载来定义另一个没有参数的构造函数，Stock() 而只能拥有一个默认构造函数，所以不要同时使用这两个方式。而用户定义的默认构造函数通常给所有成员提供了隐式初始值。例如： 隐式的调用默认构造函数时，不用使用圆括号。Stock stock1; 析构函数 如果构造函数使用new发根配内存，则析构函数将使用delete释放内存。而析构函数的名称是在函数名前加上~，例如~Stock()。Stock的析构函数不承担任何重要的工作，因此直接编写不执行任何操作的函数： 编译器决定调用析构函数的时机 如果创建的是静态存储对象，则其析构函数就爱你挂在程序结束时自动调用 如果创建的是自动存储类对象，则其析构函数将在程序执行完代码块时（该对象是在其中定义的）自动被调用 如果对象通过new创建的，则将驻留在栈内存或者自由存储区中，当使用delete来释放内存时，其析构函数将自动被调用 程序可以创建临时对象来完成特定的操作，此时程序将在结束对该对象使用时自动调用其析构函数 this指针 this指针指向用来调用成员函数的对象（this被称为隐藏参数传递给方法）每个成员函数（包含构造函数和析构函数）都有一个this指针。this指针指向调用对象。如果方法想要引用整个调用对象，则可以使用表达式*this。在函数的括号后面使用const限定符将this限定为const，这样将不能使用this来修改对象的值。然而要返回的不是this，因为this是对象的地址，*this是指向的值。 对象数组创建同一个类的多个对象，创建对象数组比独立对象变量更合适。 Stock mystuff[4]; 类作用域 在类中定义的名称（如类数据称源和类成员函数名）的作用域都为整个类。在类声明或成员函数定义中，可以使用未修饰的成员名称（未限定的名称）。构造函数名称被调用时，才能被识别，因为他的名称和类名相同。在其他情况下，使用类成员名时，必须根据上下文使用直接成员运算符（.），间接成员运算符（-&gt;）或者作用域解析运算符（::） 作用域于为类的常量声明类只是描述了对象的形式，并没有创建对象。因此，在创建对象前，没有用于存储值的空间（C++11提供了成员初始化，但不适用于数组声明）。因此以下的方式初始化不正确： 可以使用以下方式,在类中声明一个枚举，枚举的作用域是整个类。 可以在类中定义常量的方式，使用关键字static。这将常量和其他静态变量存储在一起，而不是存储在对象中。因此只有一个Months常量，被所有的Bck类对象共享。 C++11作用域内枚举传统的枚举容易出现冲突，例如在一个类中定义： C++11提供一种新枚举，其枚举量的作用域是类，如下： 抽象数据类型 C++使用栈来管理自动变量，当新的自动变量被生成后，他们被添加到栈顶；消亡时，从栈中删除他们。 栈的特征栈存储了多个数据项（该特征使得栈成为一个容器，一种通用的抽象），其次，栈由可对他执行的操作来描述。 可创建空栈 可将数据项添加到栈顶（压入） 可从栈顶删除数据项（弹出） 可查看栈是否填满 可查看栈是否为空 如果将上述描述转换为一个类声明，其中公有成员函数提供了栈操作的接口，而私有数据成员负责存储栈数据。私有部分必须表明数据存储的方式，例如可以使用常规数组、动态分配数组或者更高级的数据结构。 小结 通常将类声明分成两部分，类声明（包含函数原型表示的方法）应该放在头文件中。定义成员函数的源代码放在方法文件中。 使用OOP方法的第一步是根据他和程序之间的接口描述数据，从而指定如何使用数据。然后设计一个类来实现该接口。一般来说，私有数据成员存储信息，公有成员函数（又称作方法）提供访问数据的唯一途径。类将数据和方法组合成一个单元，其私有性实现数据隐藏。 类是用户定义的类型，而对象是类的实例。也可以说对象是这种类型的变量，例如由new按类描述分配的内存。 如果希望成员函数对多个对象进行操作，可以将额外的对象作为参数传递给它。如果方法需要显示的引用调用他的对象，则可以使用this指针。由于this指针被设置为调用对象的地址，因此*this是该对象的别名。 "},{"title":"C++头文件、作用域、内存模型和名称空间","date":"2019-09-01T13:52:00.000Z","url":"/Blog/2019/09/01/2019/190901_cpp_namespace/","tags":["cpp"],"categories":["cpp"],"content":"单独编译C++提供#include语法，因而可以将程序划分，大致可以分成三部分： 头文件a.h：包含结构声明和使用这些结构的函数原型 源代码文件a.cpp：包含与结构相关的函数的代码 源代码文件b.cpp：包含调用与结构相关的函数的代码 头文件内容和引用 头文件常包含的内容： 函数原型 使用#define或者const定义的符号常量 结构声明struct 类声明class 模板声明template 内联函数inline 头文件引用时，使用#include &quot;coordin.h&quot;，而不是#include &lt;coordin.h&gt;因为尖括号的文件名，C++编译器将在存储标准头文件的主机系统的文件系统中查找；而双引号的头文件，则编译器将首先查找当前的工作目录或源代码目录（或其他目录，取决于编译器） 头文件管理在同一个文件中只能将同一个头文件包含一次。有时候会存在包含了另一个头文件的头文件。因而有一种方法基于预处理器编译指令#ifndef即if not defined可以忽略第一次包含之外的所有内容，但是这种方法不能防止编译器将文件包含两次。。 作用域scope 作用域描述名称在文件的多大范围可见。C++变量的作用域有多种。 局部变量只在定义他的代码块中可用。 作用域为全局（也叫文件作用域）的变量在定义位置到文件结尾之间都可用。 自动变量的作用域为局部 静态变量的作用域是全局还是局部取决于它如何被定义 在函数原型作用域中使用的名称只包含参数列表的括号内可用 在类中声明的成员的作用域为整个类 在名称空间中声明的变量的作用域是整个名称空间 C++函数的作用域可以是整个类或者命名空间，但不能是局部的，不能只对自己可见，这样会导致不能被其他函数调用 不同的C++存储方式是通过存储持续性（数据内存存储方式）、作用域和链接性来描述的。 数据内存的存储方式（存储持续性） C++使用三种方案存储数据，见文章《C++内存分配方式和模板类vector,array》C++11新增了线程存储持续性 线程存储持续性在多核处理器很常见，这些CPU可以同时处理多个执行任务（可以使用SDK的systrace工具抓取一份trace查看）。这让程序能够将计算放在可并行处理的不同线程中。如果变量是使用关键字thread_local声明的，则其生命周期和所属的线程一样长。 自动存储持续性 默认情况下，在函数中声明的函数参数和变量的存储持续性是自动，作用域是局部，没有链接性。当函数结束时，这些变量将小时（执行到代码块时，将为变量分配内存，但是其作用域的起点是其声明位置） 如果在代码块中定义了变量，则该变量的存在时间和作用域将被限制在该代码块内。 通常存储在栈stack中，先进后出。之所以被称为栈，是由于新数据被象征性的放在原有数据的上面（相邻的内存单元），当程序使用完后，将其从栈中删除（栈的默认长度取决于实现，编译器通常提供改变栈长度的选项）。程序使用两个指针跟踪栈，一个指向栈底（开始位置），一个指向栈顶（下一个可用内存单元）。当函数被调用时，其自动变量被加入栈中，栈顶指针指向变量后的下一个可用内存单元。函数结束时，栈顶指针被重置为函数被调用前的值，从而释放新变量使用的内存。 有些自动变量存储在寄存器中，关键字register最初由C语言引入，C++11之前，它建议编译器使用CPU寄存器存储自动变量。这旨在提高访问变量的速度。register int count_fast; 在C++11中，失去了这种提示作用，关键字register只是显式的指出变量是自动的。鉴于它只能用于原本就是自动的变量，使用他的唯一原因是指出这个变量的名称可能与外部变量相同，避免使用了该关键字的现有代码非法。 静态持续变量C++未静态存储持续性变量提供三种链接性： 外部链接性（可在其他文件中访问） 内部链接性（只能在当前文件中访问） 无链接性（只能在当前函数或者代码块中访问） 存储描述 持续性 作用域 链接性 声明方法 自动 自动 代码块 无 代码块中 寄存器 自动 代码块 无 代码块中，使用关键字register 静态，无链接性 静态 代码块 无 使用关键字’static’ 静态，外部链接性 静态 文件 外部 不再任何函数内 静态，内部链接性 静态 文件 内部 不再任何函数内，使用关键字static 所有静态持续变量的初始化特征：未被出的初始化的静态变量的所在位都被设置为0，这种变量被称为零初始化的 零初始化和常量表达式初始化被统称为静态初始化，这意味着在编译器处理文件（翻译单元）时初始化变量。动态初始化意味着变量将在编译后初始化。 静态持续性、外部链接性链接性为外部的变量通常简称为外部变量，存储持续性是静态，作用域是整个文件。在函数外部定义，因此对所有函数都是外部的。例如可以在main()前面或者头文件中定义他们。可以在文件中位于外部变量定义后面的任何函数中使用它，因此也被称为全局变量（相对于局部的自动变量） C++有“单定义规则”，每个变量只能有一次定义。因而C++提供两种变量声明，一种是定义声明，分配存储空间；另一种是引用声明，不给变量分配存储空间，引用已有的变量。 引用声明使用关键字extern，则不进行初始化。 静态持续性、内部链接性不同于外部变量，将static限定符用于作用域为整个文件的变量时，该变量的链接性是内部的。两者区别是 内部链接的变量只能在所属的文件中使用，外部变量具有外部链接性，可以在其他文件中使用。 静态持续性、无链接性将static限定符用于在代码块中定义的变量，导致局部变量的存储持续性是静态的。这意味着虽然只能在该代码块使用，但是在该代码块不处于活动状态时仍然存在。因此在两次调用该函数时，静态局部变量的值将保持不变。此外如果初始化了静态局部变量，则程序只在启动时进行一次初始化，再次调用时不会初始化，即值保持上次的值 限定符和说明符存储说明符 auto(在C++11不再是说明符) register static extern thread_local mutable 同一个声明中不能使用多个说明符（除了thread_local可以和static或者extern结合使用） C++11之前auto指出变量是自动变量，但是在C++11中，auto用于自动类型推断 register用于在声明中指示寄存器存储，在C++11中只是显式的指出变量是自动的 static被用在作用域是整个文件的声明中时，表示内部链接性；被用于局部声明中，表示局部变量的存储持续性是静态的 extern表明是引用声明，即声明引用在其他地方定义的变量 thread_local指出变量的持续性和所属线程的持续性相同。thread_local变量之于线程，犹如常规静态变量之于整个程序。 mutable的含义根据const来解释（查看下一小节） cv-限定符(const和volatile) const volatile const表示内存被初始化后，程序不能再对其进行修改 volatile表明即使程序代码没有对内存单元进行修改，其值也可能发生变化。作用是为了改善编译器的优化能力。例如，如果编译器发现程序在几条语句中两次使用了某个变量的值，则编译器可能不是让程序查找这个值两次，而是将这个值缓存到既存区中。（这种优化假设变量的值在两次使用之间不发生变化）将变量声明为volatile，则编译器不会进行这种优化；否则将进行这种优化。 可以使用mutable指出，即使结构（或者类）变量为const，其某个成员也可以被修改。 veep的const限定符禁止程序修改veep的成员，但access成员的mutable说明符可以使的access不受这种限制。 名称空间 声明区域是可以在其中进行声明的区域。例如函数外面声明全局变量，其声明区域为所在的文件；函数中声明变量，声明区域为所在代码块； 潜在作用域：变量的潜在作用域从声明点开始，到其声明区域的结尾。因此潜在作用域比声明作用域小，这是由于变量必须定义后才能使用。 关键字namespace通过定义一种新的声明区域来创建命名的空间，如此不会和另一个名称空间发生同名冲突。 作用域解析运算符::双冒号 using声明恶化using编译指令 using声明使得特定的标识符可用，using编译指令使得整个命名空间可用。 using编译指令由名称空间和关键字using namespace组成。 建议 不要在头文件使用using编译指令，如果非要使用，应将其放在所有的预处理编译指令#include后面 导入名称时，首选使用作用域解析运算符或者using声明的方法 对于using声明，首选将其作用域设置为局部而不是全局 "},{"title":"Android JNI理解","date":"2019-08-29T15:41:06.000Z","url":"/Blog/2019/08/29/2019/190829_android_JNI/","tags":["JNI"],"categories":["android"],"content":"概述 JNI,即Java Native Interface，Java本地调用。通过JNI可以实现： Java程序函数可以调用Natvie语言（C/C++）写的函数 Natvie程序函数可以调用Java层的函数 MediaScanner示例 使用Android Xref提供的 Android 9.0.0_r3的源码 Java层的MediaScanner完成两件事： 加载JNI库 Java的native函数 frameworks/base/media/java/android/media/MediaScanner.java 动态库是运行时加载的库。如果Java要调用native函数，必须通过一个位于JNI层的动态库实现。通常是在类的static语句中加载，调用System.loadLibrary方法就可以加载。 函数名前有Java的关键字native的函数表示将由JNI层实现。 因而Java层只需要两项工作：加载对应的JNI库，和声明由关键字native修饰的函数 JNI层的MediaScannerJNI对应的文件是frameworks/base/media/jni/android_media_MediaScanner.cpp frameworks/base/media/jni/android_media_MediaScanner.cpp java层的native_init函数对应android_media_MediaScanner_native_init。通过文件路径来命名，观察两个文件的路径： frameworks/base/media/java/android/media/MediaScanner.java frameworks/base/media/jni/android_media_MediaScanner.cpp 注册JNI函数java层的MediaScanner.java函数native_init位于android.media包中，全路径名是：android/media/MediaScanner.java，对应JNI层函数的名字。JNI层将Java函数名称（包含包名）中的.转换成_，通过这种方式，native_init对应JNI的函数。 JNI函数注册的意思是将java层的native函数和JNI层对应的实现函数关联起来。注册有两种方式：静态方法和动态注册 静态注册 根据函数名来找对应的JNI函数。 （1） 编写Java代码，编译生成.class文件 （2） 使用Java的工具命令javah -o output packagename.classname，生成一个output.h的JNI头文件，里面声明了对应的JNI函数，只要实现里面的函数即可。 动态注册 因为Java native函数和JNI函数是一一对应的，所以存在一种JNINativeMethod的结构记录这种一一对应的关系。 例如frameworks/base/media/jni/android_media_MediaScanner.cpp文件中： 当Java层通过System.loadLibrary加载完JNI动态库后，会查找该库中JNI_OnLoad函数，然后调用他，之后完成动态注册。 "},{"title":"ubuntu输入法无法选择候选文字","date":"2019-08-29T14:28:00.000Z","url":"/Blog/2019/08/29/2019/190829_linux_ibus/","tags":["linux"],"categories":["linux"],"content":"解决方法 "},{"title":"C++双冒号、点号、箭头的区别","date":"2019-08-29T13:52:00.000Z","url":"/Blog/2019/08/29/2019/190829_cpp_maohao/","tags":["cpp"],"categories":["cpp"],"content":"箭头-&gt;和点号.声明一个结构： 如果有个结构变量a，访问成员元素的方法：a.age = 1; 如果采用指针方法访问，则必须用箭头访问元素，比如: 指针对象当定义类对象是指针对象的时候，需要用到-&gt;指向类中的成员；当定义一般对象的时候，使用:单冒号指向类中的成员。 双冒号::双冒号只用在类成员函数和类成员变量中。比如： "},{"title":"Android中的makefile（Android.mk）","date":"2019-08-28T13:52:00.000Z","url":"/Blog/2019/08/28/2019/190828_android_makefile/","tags":["makefile"],"categories":["android"],"content":" makefile是和make命令一起使用，在Android中，可以使用mm、mmm、mma进行编译。Makefile可以组织项目中各种库和代码之间的依赖，构建项目，和maven、gradle一样属于构建工具。常用于大型项目。 基本语法变量定义=或者:= 两者区别在于:=只能使用前面定义好的变量，=可以使用后面定义的变量。 变量值追加+= makefile在Android中的运用 name note LOCAL_PATH = $(call my-dir) 调用my-dir函数，返回Android.mk文件所在的目录，放在第一行，地址是当前目录 include file Makefile 引入其他的makefile文件 include $(CLEAR_VARS) 编译模块时清空LOCAL_MODULE等参数 LOCAL_MODULE 模块名称 LOCAL_SRC_FILES 编译需要的源文件 LOCAL_C_INCLUDES 需要的头文件 LOCAL_SHARED_LIBRARIES 编译需要的动态库 LOCAL_LDLIBS 链接库 引入aidl文件 添加jar包（libs和mk同目录）："},{"title":"C++内联函数、引用变量、函数重载、函数模板","date":"2019-08-26T14:23:05.000Z","url":"/Blog/2019/08/26/2019/190826_cpp_inline/","tags":["cpp"],"categories":["cpp"],"content":"内联函数 常规函数调用使程序跳到另一个地址（函数的地址），并在函数结束后返回。来回跳跃并记录跳跃位置意味着一定的开销。内联函数使得编译器将相应的函数代码替换函数调用。程序无需跳到另一个位置处执行代码，再调回来。因而，内联函数运行速度比常规函数快，但是代价是需要占用更多的内存。如果程序在10个不同的地方调用调用同一个内联函数，则该程序将包含该函数代码的10个副本。 使用内联函数： 在函数声明前加上关键字inline 在函数定义前加上关键字inline 通常的做法是省略原型，将整个定义（即函数头和所有函数代码）放在本应提供原型的地方。 示例代码： inline.cpp 执行结果： a = 25, b = 144 NOTE：C语言使用预处理语句**#define提供宏（内联代码的原始实现），比如：#define SQUARE(X) X*X这是通过文本替换来实现的。 引用变量标识符&amp; 引用变量的主要用途是用作函数的形参。通过将引用变量用作参数，函数将使用原始数据，而不是副本。这样除了指针以外，引用也为函数处理大型结构提供了方便的途径。 创建引用变量 上述的引用声明允许将rats和rodents互换，他们指向相同的值和内存单元。示例代码： firstref.cpp 执行结果： 将引用用作函数参数 如果让函数使用传递给她的信息，而不对信息进行修改，同时又箱使用引用，则应使用常量引用，即使用const。 double refcube(const double &amp;ra); 将引用参数声明为常量数据的引用的理由三个： 使用const可以避免无意中修改数据的编程错误 使用const使函数能够处理const和非const实参，否则将只能接受非cosnt数据 使用const引用使函数能够正确生成并使用临时变量 C++11新增了另一种引用 – 右值引用，这种引用可以指向右值，是使用&amp;&amp;声明的。目的用来实现移动语义。而’&amp;’引用是左值引用。 合适使用引用参数使用引用参数的主要原因有两个： 能够修改调用函数中的数据对象 通过传递引用而不是整个数据对象，提高程序运行速度 对于使用传递的值而不做修改的函数： 如果数据对象很小，如内置数据类型或小型数据。则按值传递 如果数据对象是数组，则使用指针，并将指针声明为指向const的指针 如果数据对象是较大的结构，则使用const指针或const引用，提高效率，节省复制结构所需的时间和空间 如果数据对象是类对象，则使用const引用，传递类对象参数的标准方式是按引用传递 对于修改函数中数据的函数： 如果数据对象是内置数据类型，则使用指针。例如调用fixit(&amp;x)这样的函数，则很明显要修改x 如果数据对象是数组，则只能使用指针 如果数据对象是结构，则使用引用或者指针 如果数据对象是类对象，则使用引用 默认参数 默认参数指的是当函数调用中省略了实参时自动调用的一个值。例如将void wow(int n)设置成n有默认值是1，则函数调用wow()就等价于wow(1) 通过函数原型设置默认值：char * left(const char *str, int n = 1); 函数重载 同名的函数使用不同的参数列表。因而关键是参数列表，也称作函数特征标。如果两个函数的参数数目和类型相同，同时参数的排列顺序相同，则他们的特征标相同。返回类型可以不同，但是特征标也必须不同 因而在使用print()函数时，编译器根据采取的用法使用有相应特征标的函数原型。 当函数基本上执行相同的人物，但使用不同形式的数据时，才应采用函数重载。 名称修饰（或名称矫正）根据函数原型中指定的形参类型对每个函数名进行加密。long MyFun(int, float);编译器将其转化为内部表示来描述接口：?MyFun@@YAXH 函数模板 函数模板是通用的函数描述，使用泛型来定义函数，其中泛型可以用具体的类型（如int或double）替换。通过将类型作为参数传递给模板，可以使编译器生成该类型的函数由于模板允许以泛型的方式编写程序，因此也称作通用编程由于类型是用参数表示的，因此模板特性有时也称作参数化类型 函数模板允许以任意类型的方式来定义函数。例如，可以建立一个交换模板： 第一行建立一个模板，将类型命名为AnyType，关键字template和typename是必需的，除非使用另一个关键字class代替typename(这两个关键字等价的)。另外，必须使用尖括号。类型名可以任意选择（此处是AnyType），常用T 如果需要多个将同一个算法用于不同类型的函数，请使用函数模板。如果不考虑向后兼容的问题，并愿意键入较长的单词，则声明类型参数时，应使用关键字typename而不使用class。 Example: funtemp.cpp Result: Note:函数模板不能缩短可执行程序，最终仍将由独立的函数定义，最终的代码不包含任何函数模板，而只包含了为程序生成的实际函数。 使用函数模板的好处是使得多个函数定义更简单可靠。 重载的函数模板 可以像重载常规函数定义一样重载函数模板定义。保证被重载的函数模板特征标必须不同 局限性 模板函数可能无法处理某些类型。例如数组、指针、结构的某些运算。一种解决方案是C++允许你重载运算符+，以便能够将其用于特定的结构或类；另一种是为特定类型提供具体化的模板定义。 显示具体化C++98标准选择了以下的方法实现第三代具体化： 对于给定的函数名，可以有非模板函数、模板函数、显示具体化模板函数、以及他们的重载版本 显示具体化的原型和定义应该以template &lt;&gt;开头，并通过名称指出类型 优先级： 非模板函数 &gt; 显示具体化模板函数 &gt; 常规模板函数 Swap&lt;job&gt;的&lt;job&gt;是可选的，因为函数的参数类型声明，这是job的一个具体化。因此，该原型也可以写作：template &lt;&gt; void Swap(job &amp;, job &amp;); Example: twoswap.cpp Results: 关键字decltype(c++11) 此处的xpy不知道如何确定类型，在C++11中提供关键字decltype，使用方法： C++11后置返回类型声明语法 此处无法确定返回的类型，因为未声明参数x和y，所以他们不再作用域呢，无法使用decltype关键字（必须声明参数后使用）。C++11新增了一种语法： double h(int x, float y);使用新增的语法后可以这样编写： auto h(int x, float y) -&gt; double; 这样将返回类型已到了参数声明之后，-&gt;double被称为后置返回类型。 因而使用这种方法声明模板函数： "},{"title":"C++函数模块（函数指针、递归）","date":"2019-08-21T14:23:05.000Z","url":"/Blog/2019/08/21/2019/190821_cpp_function/","tags":["cpp"],"categories":["cpp"],"content":" 本章节主要是围绕函数为圆心，涉及到字符串、指针、C++11特性auto、typedef。由于接触android源码、opengl，需将C++学习一遍，之前只是用过java、c、c#这些。涉及到android源码，例如frameworks/native的surfaceflinger,gui,ui, 以及vender,hardware都是需要仔细的阅读C++代码才能够理解。再如graphics的测量、绘制渲染、硬件加速、合成显示，私以为学习一些图形学是有必要的。人生在勤，不索何获。 函数function 是否有返回值（void） main()函数 函数原型，diybke vikyne = cube(side);，函数原型是一条语句，必须以份好结束。一般可以放在头文件中（.h）。函数原型可以确保以下几点： 编译器正确处理函数返回值 编译器检查使用的参数数目是否正确 编译器检查使用的参数类型是否正确 传递给函数的参数类型和数量（形参） 可以有多个参数，通过逗号分隔 参数的变量名可以和函数原型的不同，而且原型的变量名可以省略void n_chars(char, int); 示例代码： twoarg.cpp 执行结果： 函数使用指针处理数组 C++将数组名解释为其第一个元素的地址:cookies == &amp;cookies[0]数组声明使用数组名来标记存储位置对数组名使用sizeof将得到数组的长度（以字节为单位）将地址运算符&amp;用于数组名，将得到整个数组的地址在C++中，只有用于函数头或者函数原型中，int *arr才等价于int arr[] 例如函数原型： int sum_arr(int *arr, int n) 指针和const 让指针指向一个常量对象，这样可以防止使用该指针修改所指向的值 将指针本身声明为常量，可以防止改变指针指向的位置 建议将指针参数声明为指向常量数据的指针有两条理由： 可以避免由于无意间修改数据而导致的编程错误 使用const使得函数能够处理const和非const的实参，否则将只能接收非cosnt数据 函数和字符串C-风格字符串的表示方式有三种： char数组 用引号括起的字符串常量（也称作字符串字面值） 被设置为字符串的地址的char指针 示例代码： strgfun.cpp 执行结果： 返回字符串的函数 函数无法返回一个字符串，但是可以返回字符串的地址，并且效率更高 示例代码： strgback.cpp 执行结果： 函数和结构最直接的方式是像处理基本类型那样处理结构，将结构作为函数传递，并在需要时将结构作返回值使用。 示例代码： travel.cpp 执行结果 10 hours, 40 minutes 函数和string对象代码示例： topfive.cpp 执行结果： 函数和array对象要使用数组模板类array，需要包含头文件array，#include&lt;array&gt;，而arrat位于命名空间std中。array不仅可以存储基本数据类型，还可以存储类对象。 示例代码： arrobj.cpp 执行结果： 因为array模板类是C++11新增，所以编译命令： g++-5 arrobj.cpp -std=c++11 递归 C++函数可以调用自己，和C不同的是，不允许main()调用自己 示例代码： 头文件： recur.h CPP文件： recur.cpp 执行结果： 函数指针 函数也存在地址，函数的地址是存储其机器语言代码的内存的开始地址。例如，可以编写将另一个函数的地址作为参数的函数，这样第一个函数将能够找到第二个函数并运行它。 释义函数指针必要工作： 获取函数的地址 只需使用函数名（后面不用跟参数）。比如think()函数的地址是think。要将函数作为参数进行传递，必须传递函数名。一定要区分传递的是函数的地址还是函数的返回值 声明函数指针 声明指向某种数据类型的指针时，必须指定指针指向的类型。同样，声明指向函数的指针时，必须指定指针指向的函数类型。即声明应该像函数原型那样指出有关函数的信息。 通常要声明指向特定类型的函数的指针，可以首先编写如下的函数原型，然后用(*pf)替换函数名。如此，pf就是这个函数的指针。 使用指针来调用函数 代码示例： fun_ptr.cpp 执行结果： 案例 示例代码： arfupt.cpp 执行结果： typedef关键字简化除了auto，C++11提供了typedef穿件类型别名，typedef double real; 小结 函数必须提供定义和原型，并且调用该函数 函数原型描述了函数的接口：入参的数目和类型、返回类型 默认情况，C++函数按值传递参数，意味着函数定义中的形参是新的变量，被初始化为函数调用所提供的值。因此通过使用拷贝保护了原始数据的完整性 C++将数组名参数视为数组第一个元素的地址，typename arr[]和typename * arr是等价的 C++提供三种表示C风格字符串的方法：字符数组、字符串常量、字符串指针，类型都是char* C++提供string类，用于表示字符串，使用size()用于判断存储的字符串的长度 处理结构的方式和基本类型完全相同，可以按值传递结构，并将其用作函数返回类型。如果结构非常大，则传递结构指针，同时函数能够使用原始数据 支持递归 函数名和函数地址的作用相同。通过函数指针作为参数，可以传递要调用的函数的名称 "},{"title":"ubuntu搭建opengl环境","date":"2019-08-20T14:23:05.000Z","url":"/Blog/2019/08/20/2019/190820_opengl_setup/","tags":["opengl"],"categories":["opengl"],"content":"安装 安装完成后，库文件： 测试测试C代码test.c 编译 编译结束后执行，会出现一个红色的小茶壶，表示配置完成。 测试C++代码test1.cpp 编译 编译结束后执行，会出现一个红色的窗口，表示配置完成。"},{"title":"C++分支语句、逻辑表达式、字符函数库、switch、文本I/O","date":"2019-08-15T14:23:05.000Z","url":"/Blog/2019/08/15/2019/190815_cpp_ifelse/","tags":["cpp"],"categories":["cpp"],"content":"if语句 两种格式： if和if else if.cpp 执行结果： 嵌套ifelse 逻辑表达式 三种：逻辑or||， 逻辑and&amp;&amp;，逻辑NOT! 例如： 使用保留字表达 逻辑运算符 另一种表达方式 &amp;&amp; and 或 or ! not 字符函数库cctype 使用isalpha()来检查字符是否为字母字符使用isdigit()来测试字符是否是数字字符使用isspace()来测试字符是否是空白（如换行符、空格、制表符）使用ispunct()来测试字符是否是标点符号 函数名 入参 返回值 isalnum() 字母或数字 true isalpha() 字母 true iscntrl() 控制字符 true isdigit() 数字（0～9） true isgraph() 除空格外的打印字符 true islower() 小写字符 true isprint() 打印字符，包含空格 true ispunct() 标点符号 true isspace() 标准空白字符，如空格、换行、回车、水平制表符、垂直制表符 true isupper() 大写字母 true isxdigit() 十六进制数字，即0～9、a~f、A～F 返回true tolower() 大写字符 返回其小写，否则返回参数 toupper() 小写字符 返回大写，否则返回参数 三目条件运算符（?:）5 &gt; 3 ? 10 : 12，如果true，则返回10，false返回12 switch switch中的每个case标签必须是一个单独的值。这个值必须是整数（含char）。因此switch无法处理浮点测试。另外case标签必须是常量。break和continue都呢该构跳过代码。不同之处前者跳出整个循环，后者跳出本次循环。 switchtest.cpp 执行结果： 文件输入输出I/O写入 写入到文本文件outfile.cpp 执行结束后生成的文件： carinfo.txt 读取文本读取文件： readfile_test.txt 代码： readfile.cpp 执行结果： "},{"title":"C++循环语句for, while, do-while","date":"2019-08-14T14:23:05.000Z","url":"/Blog/2019/08/14/2019/190814_cpp_for/","tags":["cpp"],"categories":["cpp"],"content":"for循环 阶乘运算： formore.cpp 执行结果： while循环while循环是没有初始化和更新部分的for循环，只有测试条件和循环体。循环的指导原则： 指定循环终止的条件 在首次测试之前初始化条件 在条件被再次测试之前更新条件 示例代码： while.cpp 执行结果： 类型别名 使用预处理器#define BYTE char 使用关键字typedef，例如typedef char * byte_pointer; do while循环不同于前两种循环，他是出口条件循环。首先执行循环体，然后判断测试表达式。 基于范围的for循环（C++11新增）对数组或者容器类（例如vector， array）的每个元素执行相同的操作。For example: 嵌套循环 二维数组"},{"title":"C++内存分配方式和模板类vector, array","date":"2019-08-13T15:31:05.000Z","url":"/Blog/2019/08/13/2019/190813_cpp_typeTemplete/","tags":["cpp"],"categories":["cpp"],"content":"使用new创建动态结构 在运行时创建数组优于编译时创建数组，对于结构也是如此。需要在程序运行时为结构分配所需的空间，可以使用new完成。动态意味着内存是在运行时，而不是编译时分配的。例如inflatable *ps = new inflatable;其中inflatable是一个结构类型。这句代码将把存储结构inflatable的一块可用内存的地址赋值给ps。箭头成员运算符-&gt;，可用于指向结构的指针。例如ps指向一个inflatable结构的成员price，即ps-&gt;price Note： 如果结构标识符是结构名，则使用句点运算符 如果标识符是指向结构的指针，则使用箭头运算符 示例代码： newstruct.cpp 执行结果： 示例代码： delete.cpp 执行结果： 管理数据内存的四种方式 根据用于分配内存的方法，C++有三种管理数据内存的方式：自动存储、静态存储、动态存储（有时候也叫做自由存储空间或堆）C++11增加了第四种类型：线程存储 自动存储(stack)在函数内部定义的常规变量使用自动存储空间，被称为自动变量。这意味着他们所属的函数被调用时自动产生，函数结束时消亡。实际上，自动变量是一个局部变量，其作用域是包含他的代码块。（代码块是被包含在花括号中的一段代码）自动变量通常存储在栈中，这意味着执行代码时，其中的变量将依次加入到栈中，而在离开代码块时，按照相反的顺序释放这些变量（先进后出LIFO）。因此，在程序执行过程中，栈将不断地的增大和缩小。 静态存储静态存储是整个程序执行期间都存在的存储方式。使变量成为静态的方式有两种： 在函数外面定义它 在声明变量时使用关键字static (例如static double fee = 56.30;) 自动存储和静态存储的关键在于： 这些方法严格的限制了变量的寿命。变量可能存在于程序的整个生命周期（静态变量），也有可能只在特定函数被执行时存在（自动变量） 动态存储(heap or free store)new和delete提供了一种比前两者更加灵活的方法。他们管理了一个内存池，这个在C++中被称为自由存储空间free store或者堆heap该内存池同用于静态变量和自动变量的内存是分开的。new和delete能够让你在一个函数中分配内存，而在另一个函数中释放它。 有关栈、堆和内存泄漏 如果使用new在堆（或者自由存储空间）上创建变量后，没有调用delete。将会发生什么情况呢？ 如果没有调用delete，则即使包含指针的内存由于作用域规则和对象生命周期的原因被释放，在堆上动态分配的变量或者结构还是会继续存在。实际上，将会无法方位堆中的结构，因为指向这些内存的指针无效。这将会导致内存泄漏memory leak。被泄漏的内存在程序的整个生命周期都不能使用，这些内存被分配出去，但是无法收回。 极端情况下，内存泄漏可能会非常严重，以致于应用程序的可用内存被耗尽，导致程序崩溃crash。因此为比描内存泄漏，同时使用new和delete运算符 类型组合 数组的替代品vector模板类vector类似于string类，也是一种动态数组。基本使用： 必须包含头文件vector 包含在命名空间std中 模板使用不同的语法来指出它存储的数据类型 使用不同的语法来指定元素数 示例代码： 缺点：效率相比数组稍低；而数组长度固定，不方便和安全。 C++11新增模板类array位于命名空间std中，并且长度固定，也是使用栈（静态内存分配），因此效率和数组相同。创建需要包含头文件array。 复杂类型的小结结构可以将多个不同类型的值存储在同一个数据对象中，可以使用成员关系运算符(.)访问成员。 共同体可以存储一个值，但是这个值可以是不同的类型，成员名指出了使用的模式。 指针是被设计用来存储地址的变量。指针声明指出了指针指向的对象的类型。指针指向了它存储的地址。对指针应用接触引用运算符，将得到指针指向的位置中的值。 字符串以空字符为结尾的一系列字符。字符串可用引号括起的字符串常量表示，其中隐式包含了结尾的空字符。可以将字符串存储在char数组中，可以用被初始化为指向字符串的char指针表示字符串。 函数strlen()返回字符串长度，但是不包含空字符。 函数strcpy()将字符串从一个位置复制到另一个位置。需要加入头文件cstring或者string.h new运算符允许在程序运行时为数据对象请求内存。该运算符返回获得内存的地址，可以将这个地址赋值给一个指针，程序将只能使用该指针来访问这块内存。 如果是简单变量，使用解除引用运算符*来获取值； 如果数据对象是数组，则可以使用数组名那样使用指针来访问元素； 如果数据对象是结构，使用-&gt;访问成员 指针和数组紧密相关，如果ar是数组名，则表达式ar[i]被解释为*(ar+i)，其中数组名被解释为数组第一个元素的地址。这样，数组名的作用同指针。反之，可以使用数组表示法，通过指针名来访问new分配的数组中的元素。"},{"title":"C++复合类型之枚举、指针","date":"2019-08-12T14:21:05.000Z","url":"/Blog/2019/08/12/2019/190812_cpp_complex2/","tags":["cpp"],"categories":["cpp"],"content":"枚举enum C++的enum工具提供了另一种创建符号常量的方式，可以代替const。它还允许定义新的类型，但是必须严格按照格式。使用enum语法格式和结构相似，例如 enum colorInfo{red, blue, orange}; colorInfo是新类型的名称；colorInfo被成为枚举 red,blue,orange是符号常量，对应整型树脂0,1,2，这些常量叫做枚举量 默认情况下，将整型数值赋给枚举量，从0开始以此类推 声明 使用枚举名来声明这种枚举的变量：colorInfo band; 赋值 只能使用定义枚举量赋值给枚举的变量： 设置枚举的值 使用赋值运算符显式设置枚举的值： enum bits {one=1, two=2}; 显式定义部分元素（其他的元素以前一个元素作为参照依次+1） enum bytes {a, b=100, c} //此时a=0,b=100,c=101 创建多个值相同的枚举量 enum {zero, null=0, one, numero_uno=1}; //其中zero和null都是0，后面两个都是1，这是合法的 枚举的取值范围 枚举的最大值的最小的2的次幂，将其减去1，得到取值范围的上限。 例如最大值是101，则最小的2的次幂是128，减去1，所以取值的上限是127 如果枚举量的最小值&gt;=0，则取值范围的下限是0；否则同上，取2的最小次幂，减一，加上负号。 例如最小值是-6，则取最小2次幂减一是7，加上负号，所以取值下限是-7 指针 计算机在存储数据的时候必须跟踪的三种基本属性： 信息存储的位置 存储的值 存储的类型 指针是一个变量，其存储的值是值的地址 地址运算符&amp;地址运算符&amp;可以获取一个常规变量的地址，例如home是变量，&amp;home即是他的地址 address1.cpp 打印结果： Notes: 常用十六进制描述地址（也存在十进制表示法）。 使用常规变量时，值是指定的量，而地址是派生量 面向对象OOP和面向过程的编程区别在于，OOP强调的是在运行阶段（非编译阶段）进行决策。运行阶段指的是程序正在运行，编译阶段指的是编译器将程序组合起来时。 运行阶段决策提供了灵活性，可以根据实时情况进行调整。例如声明数组的时候定义长度。 指针用于存储值的地址。指针名表示的是地址，*运算符被称为间接值或解除引用运算符，将其应用于指针，可以得到该地址处存储的值。 例如：假设manly是一个指针，则manly表示的是一个地址，而*manly表示存储在该处的值。*manly和常规int变量等效。 例如下列代码： pointer.cpp 执行结果： 声明和初始化 指针声明必须指定指针指向的数据的类型 int * p_updates;*p_updates的类型是int，由于*被用于指针，因此p_updates变量本身必须是指针，即p_updates指向int类型，或者是指向int的指针，或int*p_updates是指针（地址）；*p_updates是int，而不是指针。 Notes: (1) *两边的空格是可选的。int *ptr; 强调*ptr是int类型的变量。int* ptr; 强调int*是一种指向int的指针。（在C++中，int*是复合类型，是指向int的指针） (2) 在C++中创建指针时，计算机将分配内存用来存储地址的内存，但是不会分配用来存储指针所指向的数据的内存。例如： long *fellow;*fellow = 2333; //ERROR此处没有给2333赋地址。 指针和数字 整数可以加减乘除，而指针表示地址，描述的是位置，将两个地址相乘没有意义。 使用new分配内存 在C++中，除了可以使用C语言的方法malloc()函数分配内存，还可以使用new运算符例如：(1) int *ptr = new int;new int告诉程序需要合适存储int的内存。new运算符根据类型确定需要多少字节的内存，然后找到这样的内存并返回地址。接着将地址赋给ptr，ptr是被声明为指向int的指针。 (2) int hig;int *pn = &amp;hig;这种方法是使用hig名称来访问int 为一个数据对象（可以是结构，或者基本类型等）获得并指定分配内存的通用格式：typename * poniter_name = new typename; 代码示例： use_new.cpp 执行结果： Note: 变量nights和pd的值都存储在栈stack的内存区域；而new从堆heap或者自由存储区free store的内存区域分配内存。 使用delete释放内存 使用delete时，后面要加上指向内存块的指针（这些内存块最初是由new分配的） 这将会释放ps指向的内存，但是不会删除指针ps本身。例如，可以将ps重新指向另一个新分配的内存块。 一定要配对的使用new和delete，否则会发生内存泄漏 memory leak。 只能用delete来释放使用new分配的内存（对空指针使用delete是安全的） 使用delete的关键是，将他用于new分配的内存，这并不意味者要使用用于new的指针，而是用于new的地址。 例如： 使用new创建动态数组例如下面的语句创建指针，它指向包含十个int值的内存块中的第一个元素：int *psome = new int[10]; 不能修改数组名的值，但是可以修改指针变量。 将指针变量加一后，增加的量等于它指向类型的字节数（例如int数组一个变量四个字节） 代码： arraytnew.cpp 结果： 指针小结 对数组使用sizeof得到的是数组的长度（int4个字节乘以元素数量，单位是字节），而对指针使用sizeof得到的是指针的长度，即指针指向的是一个数组（元素数量）。 数组名被解释为其第一个元素的地址arrayname，而对数组名应用地址运算符&amp;时，即&amp;arrayname，得到的是整个数组的地址。例如： 对指针接触引用意味着获取指针指向的值，例如*pn，另一种接触引用的方法是使用数组表示法，例如pn[0]。 区别指针和指针指向的值，int *pt = new int; *pt = 5;其中pt是指向int的指针，而*pt是完全等同于一个int类型的变量。 数组的静态联编是使用数组声明来创建数组时，数组的长度在编译时设置int tacos[10]; 数组的动态联编是使用new[]创建数组，在运行时为数组分配空间，其长度在运行时者之。使用完这种数组后，应该使用delete[]释放占用的内存。 ptrstr.cpp 执行结果： "},{"title":"C++复合类型之数组、字符串、结构、共用体","date":"2019-08-01T13:41:05.000Z","url":"/Blog/2019/08/01/2019/190801_cpp_complex/","tags":["cpp"],"categories":["cpp"],"content":" 题外话： 在我眼里，我实习的第一家公司教会了我两件事，一是让自己忙起来，二是代码规范整洁。有时候有所悟会很晚，但终究不迟。序： C++提供了基于整型和浮点类型创建的复合类型。影响最深远的复合类型是类。然而，C++还支持几种普通的复合类型。例如，数组 可以存储多个同类型的值。结构 可以存储多个不同类型的值。指针 则是一种将数据所处位置告诉计算机的类型。 数组array 数组声明应指出以下三点： 存储每个元素中的值的类型 数组名 数组的元素数量 格式： short months[12]; typename arrayname[size]; size 必须是整型常数或const值，也可以是常量表达式。他不能是变量。 C++11新增初始化的功能 初始化数组可以省略等于号=，例如double ear {1.2e2, 1.6e3, 2.3e4,3.5e10}; 可以不在大括号内包含任何东西，意味着所有元素是0 列表初始化禁止缩窄转换 数组的替代品 – 模板类vector 在C++标准模板库STL提供了vector，以及C++11增加了模板类array。 字符串 C++处理字符串的方式有两种，一种来自C语言，常称为C-风格字符串，另一种基于string类库的方法。 C-风格字符串(字符数组) C-风格字符串以空字符 \\0 结尾，其ASCII码是0。 char dog[3] = {&#39;d&#39;,&#39;o&#39;,&#39;g&#39;}; //not a string char dog[3] = {&#39;d&#39;,&#39;o&#39;,&#39;g&#39;, &#39;\\0&#39;}; //is a string 字符串常量或者称字符串字面值 使用双引号表示字符串常量，而字符是单引号 char bird[11] = &quot;Mr. cheeps&quot;; //the \\0 is hideen,隐式包含结尾的空字符 char fish[] = &quot;buddles&quot;; //left the complier count sizeof()指出整个数组长度，而strlen返回的是存储在数组中字符串的长度，而不是数组本省的长度。strlen()只计算可见的字符，不计算空字符\\0在内。(只针对char数组，并且需要加入头文件 #include&lt;cstring&gt;) 读取一行字符串输入 istream中的类（例如cin）提供了一些面向行的成员函数：getline()和get()这两个函数都读取一行输入，直到到达换行符随后，getline将丢弃换行符，get()将换行符保留在输入序列。 （1）cin.getline(name,20); 将一行数据读入到一个包含20个元素的name数组。如果这行包含的字符不超过19个（\\0） instr2.cpp 结果： （2）cin.get(name,size)不会换行，而是将换行符读入到下一行开始。可以通过以下两种方式换行： (3) 读取空行 当get()或者getline()读取空行后将设置失效位 failbit。这意味接下来的输入将被阻断。恢复输入方法： cin.clear(); (4) 输入字符串比分配的空间（数组size）长，则getline()和get()将把余下的字符留在输入队列中，getline()还会设置失效位，并关闭后续的输入。 string类 string类需要头文件string。并且string位于命名空间std中。 代码示例： strtype1.cpp 结果： Note: 类设计让程序能够自动处理string的大小。例如str1声明的时候长度为0，读取到输入后长度是3。 C++11新增的字符串初始化： 字符串拼接合并 cstring头文件的字符数组char[]复制和附加操作 对比来说，字符串string的拼接和附加操作更加简单。 两种字符串书写方式的I/O和字符串长度代码： strtype2.cpp 结果： wchar_t, char16_t, char32_t的初始化 C++11新增的原始字符串raw，以R为前缀cout &lt;&lt; R&quot;(&quot;king&quot; \\n and queue)&quot; 结果： &quot;king&quot; \\n and queue 原始字符串使用&quot;(和)&quot;作为限定符，换行符\\n也只打印两个单独的符号。或者使用&quot;+*(和)*+&quot;作为限定符 结构 结构可以存储多种类型的数据。 结构是用户定义的类型而结构声明定义了这种类型的数据属性定义了类型之后，便可以创建这种类型的变量 创建结构包含两步： 定义结构描述（它描述并且标记能够存储在结构中的各种数据的类型） 按照描述创建变量（结构数据变量） 例如以下结构描述 创建这种类型的变量： 因为hat是数据结构类型，所以允许使用hat.name来访问成员。 示例代码： strucetype1.cpp 执行结果： 结构声明的位置 结构声明的位置很重要，可以将声明放在main函数中，紧跟在开始括号的后面也可以选择将声明放在main函数前面 位于函数外面的声明被成为外部声明，如果类包含两个或更多的函数，外部声明可以被后面的函数使用而内部声明只能当前函数使用 C++11的初始化 同字符串和数组，结构也支持列表初始化，即在初始化的时候=等于号是可选的。 同时定义结构和和创建变量 结构数组 可以创建结构数组，例如inflatable gifts[100];，此时访问成员元素使用gifts[0].name此时的gifts不是结构，而是数组‘gifts[0]’是结构 结构中的位字段 C++允许指定占用特定位数的结构成员。这使得创建与某个硬件的寄存器对应的数据结构非常方便。字段的类型应为整型或者枚举，接下来是冒号，冒号后面是数字，它指定了使用的位数每个成员都被称为位字段位字段常用于低级编程中 共用体union union能够存储不同类型的数据，但是只能同时存储其中的一种类型。 例如： 可以使用one4all存储不同的类型，存储int，long，或者double 因此，pail有时候是int类型，有时候也可以使long，double成员名称标识了变量的容量共同体每次只能存储一个值，因此必须有足够的空间来存储里面最大的成员，所以共同体的长度为其最大成员变量的长度共同体的用途之一是： 当数据项使用两种或者更多的格式，但是不会同时使用时，可以节省时间。 例如一些商品的ID是整数，而另一些的ID是字符，则可以定义： 匿名共用体 匿名共用体没有名称，其成员将成为位于相同地址的变量。每次只有一个成员是当前的成员。 因为是匿名共用体，所以id_num和id_char被视为结构体thing的成员，他们的地址相同（相对于结构体来理解），因而不需要中间标识符id_val（即共用体的变量声明）。 共用体常用于节省内存（例如操作系统数据结构或硬件数据结构）"},{"title":"linux配置zsh终端","date":"2019-07-27T09:41:06.000Z","url":"/Blog/2019/07/27/2019/190727-linux-zsh-md/","tags":["linux"],"categories":["linux"],"content":" 从echo $SHELL可以查看当前使用的终端是/bin/bash。zsh是Ubuntu的一种终端工具，虽然听说功能很强很给力，事实上我只是被他的众多主题迷住了。具体查看文档 安装zsh 下载zsh sudo apt-get install zsh Note: 生成配置文件/home/wizzie/.zshrc,对应默认的文件.bashrc 下载 oh-my-zsh 项目配置 zsh wget  -O - | sh Note: 生成文件夹wizzie@wizzie:~/.oh-my-zsh,包含所有的zsh主题 切换zsh模式 修改主题 修改.zshrc的ZSH_THEME=&quot;pygmalion&quot; #&quot;robbyrussell&quot; 主题的文件预览样式 主题文件从/home/wizzie/.oh-my-zsh/themes移动到/home/wizzie/.oh-my-zsh/custom/themes 打开一个新的终端窗口，会发现主题修改成功 例如我修改的pygmalion主题： "},{"title":"hexo文章中使用iframe插件插入网易云音乐","date":"2019-07-26T17:12:19.000Z","url":"/Blog/2019/07/27/2019/190726-next-addmusic/","tags":["hexo","music"],"categories":["web"],"content":" 为了收藏一些喜欢的音乐分享在博客上，使用iframe插件生成网易云音乐的控件。 获取链接 简单的可以直接获取到，点击音乐进入播放界面，然后点击生成外链播放器 例如此处的音乐《约定》的iframe插件代码是： Note: 其中的id就是和网址的id相同（重点就是这个id） 此时只需要将代码拷贝到md博客文章中，发布博客后就可以查看到音乐。 有些音乐没有获取外链的版权 如下图： 此时只需要注意这首歌的网址里面的id即可，然后替换上面的那个代码里面的id，之后就可以播放了～ "},{"title":"Ubuntu安装后的环境配置注意点","date":"2019-07-26T13:31:37.000Z","url":"/Blog/2019/07/26/2019/190725_linux_linuxEnv/","tags":["linux"],"categories":["linux"],"content":" Ubuntu系统刚安装完成后，工作还只是进行了一小半，还有一大堆的环境需要配置搭建。比如说JDK, nodejs, python, vs code编译器 … apt查询包的版本 apt-cache madison &lt;&lt;package name&gt;&gt; git配置 安装： sudo apt-get install git config配置：git config --global user.name &quot;username&quot;git config --global user.email &quot;username@example.com&quot; ssh公钥生成：ssh-keygen 或者 ssh-keygen -t rsa -C ****@**.com 然后会生成.ssh/id_rsa.pub文件 将其拷贝到需要的地方即可（github） vscode下载 gnome主题切换类似以下的方法： pop命令安装 在gnome主题网站下载安装 下载后的压缩包解压到用户目录.local/themes或者.local/icons/目录下，之后使用gnome tweaks tool修改即可 npm install一直卡住输入： npm config set registry  截图工具sudo apt-get install shutter java环境sudo apt install default-jdk sudo apt install default-jre _测试结果： java --version javac"},{"title":"C++浮点常量表示、算术运算符、类型转换","date":"2019-07-25T14:01:37.000Z","url":"/Blog/2019/07/25/2019/190725_cpp_operator/","tags":["cpp"],"categories":["cpp"],"content":"浮点常量 默认情况下，8.27和3.4E5这类浮点常量都属于double类型。如果希望常量是float类型，使用f或者F后缀对于long double的类型，使用l和L的后缀 例如： 算术运算符五种C++基本运算符 operation note example + 加法 3+43=46 - 减法 20-5=15 * 乘以 3*5=15 / 除以 10/3=3（整型相除，小数部分丢弃） % 取余 10%3=1 例如： arith.cpp 结果： Result 除法 如果两个整数相除，结果的小数部分将被丢弃，只保留整数部分 如果其中一个（或者两个）是浮点数，则结果也会保留小数部分，类型是浮点数 类型转换 C++自动执行的类型转换： 将一个算数类型的值赋给另一种算数类型的变量时，C++会对值转换 表达式包含不同的类型时，C++会对值转换 将参数传递给函数时，C++会对值转换 类型转换的潜在问题 转换 潜在问题 将较大的浮点类型转换成较小的浮点类型，例如double转换成float 精度（有效位数降低），值可能超出目标类型的取值范围 将浮点类型转换成整型 小数部分丢失 将较大的整型转换成较小的整型，例如long转换成short 值可能超出目标类型的取值范围，通常只复制右边的字节 将0赋值给bool类型，被转换成true非零的则是false 以{}方式初始化时进行的转换（C++11） C++11将使用{}的初始化称为列表初始化因为这种初始化常用于给复杂的数据类型提供值列表列表初始化不允许缩窄，即可能无法赋值。例如浮点型不允许转换成整型 表达式中的自动转换 C++在表达式会执行两种自动转换： 类型出现时就自动转换 类型和其他类型同时出现在表达式中，将被转换 整型提升在计算表达式时，C++将 bool,char,unsigned char,signed char,short 转换成int其中true -&gt; 1, false -&gt; 0 Note: 因为int是计算机最自然的类型，计算机使用这种类型时，运算速度可能最快。 如果short比int短，则unsigned short会被转换成int；如果两个长度相同，unsigned short会被转换成unsigned int；这种规则保证unsigned short进行整型提升的时候不会损失数据 C++11校验后，编译器在进行算术运算时，依次如下查阅： 如果有一个操作类型是long double, 则另一个转换成long double否则，有一个是double， 另一个转换成double否则，有一个是float， 另一个转换成float否则，说明操作数都是整型，执行整型提升 在这种情况下，如果两个操作数都是有符号或者无符号的，且级别不同，则转换成级别高的类型 如果一个操作数有符号，另一个没有符号，且无符号操作数的级别比有操作符的高，则将有符号操作数转换成无符号操作数（还是转向级别高的类型） 否则，有符号类型可以表示无符号类型的所有可能取值，则将无符号操作数转换成有符号操作数的类型 否则，将两个操作数都转换成有符号类型的无符号版本 传递参数的时候转换类型 传递参数时的类型转换 通常由C++函数原型控制C++将对char和short类型应用整型提升（int） 强制类型转换 强制转换不会修改原变量本身，而是创建一个新的、指定类型的值 通用格式如下： 强制类型转换符 C++11的auto声明 auto是C++的关键字使用auto，而不指定变量类型，编译器将把变量的类型设置成和初始值相同 小结 C++的基本类型分为两组： 一组存储整数的类型一组存储浮点数的类型 整型由小到大依次是： bool, char, signed char, unsigned char, short, signed char, unsigned char, int, signed int, unsigned int, long, unsinged long, long long, unsigned long long 还有在一种wchar_t类型，取决于实现C++11新增的char16_t和char32_t，分别存储16和32位的字符编码short 至少16位int 至少和short一样长long 至少32位 "},{"title":"Ubuntu18系统安装（无需制作启动盘）","date":"2019-07-25T13:31:37.000Z","url":"/Blog/2019/07/25/2019/190724_ubuntu_install/","tags":["linux"],"categories":["linux"],"content":"数据备份准备工具 Ubuntu系统（官网选择版本下载ISO文件） U盘（之前有一个U盘是做了window10的启动盘） 安装步骤 移除备份好的机械硬盘 制作一个启动盘(win10系统不需要用软碟通UltraISO作启动盘) 修改启动项（保持U盘插到电脑上！） 安装 安装Ubuntu预配置 安装进行时 安装后善后 Ubuntu桌面主题修改Gnome桌面环境查看 修改主题(只在当前的登录用户) 图标和指针的主题 ibus输入法有些软件不能输入中文 终端主题zsh修改 添加开机启动程序的自定义命令 查看CPU使用情况 cat /proc/cpuinfo 查看磁盘内存使用情况"},{"title":"C++多字节char、bool、字符常量、浮点数","date":"2019-07-23T14:01:37.000Z","url":"/Blog/2019/07/23/2019/190723_cpp_float/","tags":["cpp"],"categories":["cpp"],"content":"wchar_t 程序需要处理的字符集可能无法用一个8位的字节表示，比如日文、汉字等此时有两种处理方法： 编译器厂商将char定义16位的字节或者更长 char表示8位的字节，另一种wchar_t表示宽字符类型，可以扩展字符集 wchar_t类型是一种整数类型，因此可以有足够的空间表示系统使用的最大扩展字符集。 iostream使用wcin和wcout表示宽字符的输入输出。 C++11新增的char16_t和char32_t Unicode提供了一种表示各种字符集的解决方案。ASCII码是Unicode的子集。Unicode给每个字符指定一个编号 – 码点码点通常类似: U-222B (其中U表示这是一个Unicode字符，222B表示该字符的16进制编号)另一种针对多语言文本的编码标准是ISO 10646 char16_t使用前缀u表示字符常量或者字符串常量； char32_t使用前缀U表示字符常量或者字符串常量； 例如： bool布尔类型 C++将非零值解释为true，0是false此处bool表示真和假如果需要打印这个类型的值，可以直接使用%d打印判断是否为0 常量的符号名称 – const限定符 符号名称指出了常量表示的内容（即使用符号来表示一个常量）符号常量的两种定义方式： #define A 10 (预处理处理) const int B = 10; (C++编译器处理，提供类型检查和作用域检查) 例如： const int Months = 12; //首字母大写或者全部大写，表示常量（非通用约定） 常量Months被初始化后，其值就被固定了，编译器不允许修改这个常量的值。 如果强制修改，g++将指出程序试图给一个只读变量赋值。 关键词const叫做限定符，因为它限定了声明的含义。 创建常量 如果在声明中没有提供具体值，则常量的值是不确定的，且无法修改。 const_test.cpp const和define比较 const相比#define定义常量来说， 优势： 能够明确指定类型 可以使用C++的作用域规则将其定义限制在特定的函数或者类文件中 可以用于复杂的类型，例如数组、结构 浮点数书写方式 常用的小数点表示法 E表示法 例如23.3E3表示23.3的三次方。 E可以形容很大或者很小的数。E后面是负数，表示除以N*10d.ddE+n表示小数点向右移动n位d.ddE-n表示小数点向左移动n位之所以称为浮点数，就是因为小数点的移动 浮点类型float,double,long double 这三个类型是按他们可以表示的有效数位和允许的指数最小范围来描述的。有效位表示数字当中有效的位数。比如14000的有效位数是2，因为可以精确到千位，其余三位只不过是占位符。有效位数不依赖小数点的位置。比如12.23的有效位数是4。 C++和C对float的有效位数至少32位。double至少48位，且不少于float。long double至少和double一样多。可以从头文件cfloat和float.h找到系统的限制！ floatnum.cpp g++ floatnum.cpp编译 生成a.out 执行./a.out 运行结果： 说明: cout会将3333333.250000直接打印成3333333.25 ，而cout.setf将覆盖这种行为； cout打印6位小数，他是iostream的一个类成员函数，能够精确的控制输出格式、字段宽度、小数位数、采用小数格式还是E格式显示； "},{"title":"hexo文章加密方法","date":"2019-07-22T14:31:16.000Z","url":"/Blog/2019/07/22/2019/190722-hexo-article-pass/","tags":["hexo"],"categories":["web"],"content":"直接修改JS 存在问题：可能被破解。如果你的博客源码是存放在GitHub这样的开源库的话，那么恭喜你。别有用心之人可以通过查看你的GitHub仓库对应文章的md文件找到这个密码。 themes/next/layout/custom/head.swig Hexo插件安装 npm install --save hexo-blog-encrypt 站点配置文件启用该插件_config.yml 文章的头部添加上对应的字段，如 password, abstract, message "},{"title":"git stash储藏命令","date":"2019-07-22T03:12:33.000Z","url":"/Blog/2019/07/22/2019/190722-git-stashing/","tags":["git"],"categories":["git"],"content":" 储藏（stashing）可以获取工作目录的中间状态，即被修改过的被追踪的文件和暂存的变更。 并将它保存在一个未完结变更的堆栈中，随时可以重新应用。 储藏暂时未完成的工作 如果你想在当前目录切换分支或者暂停正在进行的工作，而去先做另一件事。你就需要先储藏这些变更。为了向堆栈推送一个新的储藏，只需要执行：git stash git status 可以查看到干净的工作目录； git stash list 可以查看储藏的列表; git stash show stash@{0} 可以查看某个储藏的修改信息 如果工作目录不干净，包含已修改、未提交的文件，此时进行apply会给出归并冲突。 git stash apply stash@{0} 可以请求某个储藏（如果不指定某个，会默认最近的储藏） 对文件的变更被重新应用，但是被暂存的文件没有重新被暂存。需要告诉命令重新应用被暂存（commit）的变更。 git stash apply --index 告诉命令重新应用被暂存的变更 git stash drop stash@{0} 移除某个储藏 取消储藏 如果已经apply某个储藏，但是在修改一些代码后需要取消这个储藏，此时使用:git stash show -p stash@{0} | git apply -R可以达到取消该储藏的补丁效果。 git stash branch &lt;name&gt; 这条命令会根据最近的stash创建一个新的分支，然后删除最近的stash可以指定某个stash， 在后面加上 stash@{0} "},{"title":"C++变量","date":"2019-07-21T13:11:47.000Z","url":"/Blog/2019/07/21/2019/190721-cpp-variable/","tags":["cpp"],"categories":["cpp"],"content":"C++变量命名规则 只能使用字母、数字、下划线 第一个字符不能是数字 区分大小写 不能使用关键字 以两个下划线或下划线和大写字母打头的名称保留给实现（编译器及其使用的资源）使用，以一个下划线开头的名称被保留给实现，用作全局标识符 C++对命名的长度没有限制，但是有些平台会限制长度 常用描述类型或者变量的命名方式，比如： str或者sz（表示以空字符结束的字符串）、b（表示布尔值）、p（表示指针）、c（表示单个字符） 整型 short、int、long、long long 当前很多系统都使用最小长度，即short是16位。这为int提供了多种选择，可以是16位、24位、32位。甚至64位。因为long和long long至少长64位。 short是short int的简称。long是long int的简称。 short、int、long、long long都是符号类型。这意味着每种类型的取值范围，负值和正值几乎相同。 示例代码： limits.cpp 执行结果： Results climits文件的符号常量 符号常量 极值意义 CHAR_INT char的位数 CHAR_MAX char的最大值 CHAR_INT char的最小值 SCHAR_MAX signed char的最大值 UCHAR_MAX unsigned char的最大值 SHRT_MAX short的最大值 USHRT_MAX unsigned short的最大值 INT_MAX int的最大值 LONG_MAX long的最大值 LLONG_MAX long long的最大值 初始化 无符号类型 C++如何确定常量的类型 char字符型 char是专门存储字符（字母或者数字）的类型。 testChar char的字面值"},{"title":"Hexo Next主题优化（二）","date":"2019-07-18T14:41:47.000Z","url":"/Blog/2019/07/18/2019/190718-nextdebug-md/","tags":["hexo"],"categories":["web"],"content":"样式页脚foot优化爱心跳动 在Next主题根目录的配置文件修改 代码框样式代码框样式（复制按钮） 在Next主题根目录的配置文件修改 主题根目录_config.yml 代码高亮主题主题根目录_config.yml diff样式 改变显示字体的颜色 主要是侧边栏和文章主题内容（不包含标题） source/custom/custom.styl 自动更换背景图片source/custom/custom.styl 背景虚化（解决搜索框被虚化的问题） 修改左侧栏菜单带搜索框的UI的背景颜色RGB值其余的使用透明度如此搜索框的就不会被虚化 source/custom/custom.styl note 便签 主题配置文件搜索 note, 可设置风格和图标是否显示。存在部分样式无效的问题。 主题根目录_config.yml 示例： 另一种写法： &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt; 文章编辑选项卡 “tab” 为选项卡的名称，可以自定义，数字是几表示从第几个选项卡开始。非必须，若数值为 - 1 则隐藏选项卡内容。下载插件： npm i hexo-ruby-marks 结果： 引用（文章居中） 在文章中插入 iframe"},{"title":"Use ADB","date":"2019-07-17T14:04:14.000Z","url":"/Blog/2019/07/17/2019/190717_debug_adb_commonds/","tags":["ADB"],"categories":["android"],"content":" ADB是连接手机设备和电脑设备的调试桥。这种工具命令用于Android调试是基础而且重要的。 Overview Install: sudo apt-get install adb Function: Commonds基础命令 如果设备连接&gt;1，可使用adb -s DevicesID + 其余部分命令 Commond Explain adb devices 查看设备连接情况 adb version 查看版本 adb help 查看帮助 adb shell 进入adb sehll命令 adb shell top 查看手机当前进程占用手机内存情况 adb shell kill -3 pid 杀掉进程 adb logcat -v process &#124; grep 8607 8607是进程 PID adb shell reboot -p 关机 adb reboot 重启 adb shutdown 关机 adb root root adb remount 获取读写权限 adb kill-server 关闭adb服务 adb start-server 启动adb服务 adb shell stop 关闭设备请求 adb shell start 启动设备请求 adb shell su root setenforce 0 关闭seLinux模式 网络相关设置 Commond Explain adb shell ifconfig 查看手机IP adb tcpip 5555 设置手机tcpip adb connect IP 连接IP 屏幕display信息 Commond Explain adb shell wm size 查看分辨率 adb shell set wm size 设置分辨率 软件操作命令 安装软件: 卸载软件 文件操作命令： 从电脑上发送文件到设备,用push命令可以把本机电脑上的文件或者文件夹复制到设备(手机) 从设备上下载文件到电脑,用pull命令可以把设备(手机)上的文件或者文件夹复制到本机电脑 录制视频 日志操作命令 常用日志命令 Commond Explain adb logcat &#124; tee log1 保存日志到本地并且打印到控制台 adb logcat -v threadtime 按照线程时间打印日志 adb logcat -s System.out 设置标签（某个字符串），过滤显示日志 adb logcat -c 清理已存在的日志 adb logcat -g 打印日志缓冲区的大小 adb logcat &gt; home/mylog.txt 日志保存到电脑某路径 adb logcat -d -f /sdcard/mylog.txt 保存到手机上指定位置（-d 日志显示在控制台） adb logcat -f /scard/log.txt 输出到手机指定位置 查看日志 查看帮助信息，获取该命令可配置的参数选项 加载一个可使用的日志缓冲区供查看 指定标签，指定级别过滤显示日志 设置日志输入格式控制输出字段 APK包相关命令adb shell pm命令 按名称检查正在运行的进程 获取当前ACTIVITY 命令启动指定Activity 模拟点击事件（点击屏幕） 打开开发者选项的指针位置选项，点击屏幕即可获得XY坐标。 获取设备信息参数 输入命令input input后可以跟很多参数， text相当于输入内容，keyevent相当于手机物理或是屏幕按键，tap相当于touch事件，swipe相当于滑动。 模拟的是滑动事件 输入文本内容 adb shell am instrument …instrument为am命令的一个子命令。用于启动一个Instrumentation测试。各项参数： 例如运行一个类中的所有用例： Dumpsys信息服务列表信息 adb shell 进入shell dumpsys -l 查看所有正在运行的服务名 service list 查看这些服务名称调用了哪个服务 常见服务信息列表 服务名 类名 功能 gfxinfo GraphicsBinder 图像 SurfaceFlinger 图像相关 activity ActivityManagerService AMS相关信息 package PackageManagerService PMS相关信息 window WindowManagerService WMS相关信息 input InputManagerService IMS相关信息 power PowerManagerService PMS相关信息 batterystats BatterystatsService 电池统计信息 battery BatteryService 电池信息 alarm AlarmManagerService 闹钟信息 dropbox DropboxManagerService 调试相关 procstats ProcessStatsService 进程统计 cpuinfo CpuBinder CPU meminfo MemBinder 内存 dbinfo DbBinder 数据库 appops app使用情况 permission 权限 processinfo 进程服务 batteryproperties 电池相关 audio 查看声音信息 netstats 查看网络统计信息 diskstats 查看空间free状态 jobscheduler 查看任务计划 wifi wifi信息 diskstats 磁盘情况 usagestats 用户使用情况 devicestoragemonitor 设备信息 dump方法 dump窗口信息 dump SurfaceFlinger信息 方式： 连接DP 然后继续dump SurfaceFlinger信息 GPU帧渲染数据 fastboot模式进入fastboot（设备需要解锁） adb reboot bootloaderfastboot devices 检查设备 刷机 fastboot erase boot/system 清除区 fastboot -w fastboot boot/system NewImg 烧录 fastboot reboot "},{"title":"在Android源码调试函数的堆栈","date":"2019-07-16T12:04:14.000Z","url":"/Blog/2019/07/16/2019/190716_debug_ancdoid_callstack/","tags":["android debug"],"categories":["android"],"content":" 在Android代码中可以通过了解函数的CallStack加速调试和分析过程，本文说明如何在Android运行时加入CallStack及Android P上的注意点。 Java C++Android 9以前CallStack call是被build进libutils, framework大部分service都是link了该lib，因此可以直接使用Callstack。Android 9开始后CallStack被build进libutilscallstack，因此直接使用Callstack会报undefined reference to ‘android::CallStack::CallStack 在Android.bp或Android.mk中加入”libutilscallstack” 即可. "},{"title":"Next Gemini主题优化","date":"2019-07-15T14:16:31.000Z","url":"/Blog/2019/07/15/2019/190715_genminiChange-md/","tags":["hexo"],"categories":["web"],"content":"圆角设计主题修改成Gemini 不同于Pisces, Gemini主题是卡片式布局 _config.xml 修改UIthemes/hexo-theme-next/source/css/_variables/Gemini.styl 背景动态效果下载依赖库 修改配置文件_config.xml"},{"title":"Use CTS","date":"2019-07-15T14:04:14.000Z","url":"/Blog/2019/07/15/2019/190715_debug_CTS/","tags":["CTS"],"categories":["android"],"content":"OverviewCTS就是兼容性测试为了确保Android应用能够在所有兼容Android的设备上正确运行，并且保持相似的用户体验，在每个版本发布之时，Android提供了一套兼容性测试用例集合（Compatibility Test Suite, CTS）来认证运行Android系统的设备是否完全兼容Android规范，并附带有相关的兼容性标准文档（Compatibility Definition Document, CDD）。 从 （ 网络需要能进google）处下载最新的兼容性测试用例集合，并解压。大部分是基于Junit和仪表盘技术编写的。还扩展了自动化测试过程，可以自动执行用例，自动收集和汇总测试结果。CTS采用XML配置文件的方式将这些测试用例分组成多个测试计划（plan）,第三方也可以创建自己的plan。 Achieve CTS Package google官方下载Link:  编译源码 环境配置 Android 调试桥 (adb) 手机不能休眠 系统语言最好保证英语 测试命令 在CTS/tools目录下执行 ./cts-tradefed 进入cts-tf,进入的打印信息会提示连接到手机设备！ 测试模块 run cts -s DeviceID -m CtsMediaTestCases （在testcases目录下找apk）测试模块下的一小模块： cts-tf &gt; run cts -m CtsMediaTestCases -a armeabi-v7a 测试模块某个testcase run cts -s DeviceID -m &lt;模块名&gt; -t &lt;具体fail项&gt; 查看测试结果 l r 查看等待执行的任务 l c 查看所有执行的任务 l i 全局测试 run cts –plan CTS 继续被中断的测试 l rrun cts –continue-session sessionID 重新跑测某个任务的失败项（节约时间） l rrun cts retry -s DeviceID –retry sessionID 测试结果测试结束后在/results文件夹中，会看到以日期和时间命名的文件夹用于保存执行过的测试结果。还有一个同名的zip文件保存同样的内容。 测试过程中的自动录log，测试结束后log自动保存在/logs里边以日期和时间命名的文件夹中。 在测试结果文件夹中，所有的测试结果是以XML的形式保存的。通常测试结果网页分成“Device Information”、“Test Summary”、“Test Summary by Package”、“Test Failures(xx)”和“Detailed Test Report”等四个区域。"},{"title":"VS code常用插件","date":"2019-07-15T14:04:14.000Z","url":"/Blog/2019/07/15/2019/190715_vscode_plugins/","tags":["vs code"],"categories":["tools"],"content":"markdown相关插件markdown PDF 可以转换md文件成pdf, html, png, jpg文件 markdownlint 可以提示markdown语法规范 markdown toc 可以生成md文件的目录 markdown preview enhanced 实时预览，但是在vscode自带预览markdown文件效果，必要性不大。 UML建模插件plantUML 使用一种便捷的设计语言plantUML， 参考 基本使用方法参考： "},{"title":"Use VTS","date":"2019-07-15T14:04:14.000Z","url":"/Blog/2019/07/15/2019/190715_debug_VTS/","tags":["VTS"],"categories":["android"],"content":"Overview来源为了能更快的将设备升级到新的Android版本，Android O 开始新引入了 Project Treble，Project Treble 适用于搭载 Android O 及后续版本的所有新设备。 (1) Android 7.x 及更早版本中没有正式的Vendor层接口，因此每次更新系统都相对耗时和困难： (2) Android O 之后，Treble 提供了稳定的Vendor层接口，供设备制造商访问 Android 代码中特定于硬件的部分，这样就可以只更新框架层，减少升级系统带来的成本和困难： 作用为了确保Vendor层实现的前向兼容性，新的Vendor层接口会由供应商测试套件 (VTS) 进行验证，该套件类似于兼容性测试套件 (CTS)。 通过 CTS 测试，确保了 APP 与 Android Framework 之间有一致的调用接口（API），这使得 APP 开发者编写的同一款程序可以运行在不同系统版本（向前兼容）、不同硬件平台、不同厂商制造的不同设备上。 VTS 类似 CTS，通过对 Vendor Interface 进行测试，确保同一个版本的 Android Framework 可以运行在不同 HAL 上，或不同 Android Framework 可以运行在 同一个 HAL 上。 通过这样的 Framework / HAL 分离设计和接口一致性保证，也使得 8.0 版本之后的 Android 系统在进行升级时，可以直接对 Framework 进行升级而不用考虑 HAL 层的改动，从而缩短了用户手上设备得到系统升级 OTA 推送的时间。 环境搭建 测试前提GSIGSI介绍GSI是Google AOSP System Image的简称，在进行VTS测试之前，要使用user版本关闭verified boot后刷入GSI，VTS测试用的GSI由谷歌释放。 如VTS r6版本的GSI镜像： GSI方法 测试命令（同CTS相似） 启动vts(测试包从源码编译或者Google Android Developer官网查找) ./vts-tradefed 测试（跑测需要网络稳定） 查看list命令 "},{"title":"Hexo Next主题优化","date":"2019-07-13T14:04:14.000Z","url":"/Blog/2019/07/13/2019/190713_hexo-improve/","tags":["hexo"],"categories":["web"],"content":"首页预览加入图片 在根目录下的images文件夹加入图片 Hexo-lazyload-image图片懒加载下载插件 npm install hexo-lazyload-image –save 修改_config.xml_config.xml 文章插入图片 1. 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件 等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹; 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：![你想输入的替代文字](图片名.jpg) 例如![loading](background.jpg) result： Next主题图片浏览放大功能fancybox Hexo NexT主题添加点击爱心效果创建js文件 在/themes/next/source/js/src下新建文件 clicklove.js ，接着把该链接下的代码拷贝粘贴到 clicklove.js 文件中。代码如下： 修改_layout.swig 在\\themes\\next\\layout_layout.swig文件末尾添加： Next网站标题栏颜色 打开themes/next/source/css/_custom/custom.styl，在里面新增如下代码： 博客背景图片 打开上述相同文件 背景虚化 添加资源链接菜单(1) hexo new page &quot;resources&quot; (2) 编辑resources文件夹下的md页面,将类型设置为resources，主题将自动为这个页面显示所有分类。 menu: resources: /resources || download 阅读全文设置 在网站首页只显示每篇文章的部分内容，不要全部内容都展示出来。 解决 要解决这个问题有两个方法：一是修改 _config.yml 文件设置，而是直接在你的 md 中加一句代码即可。 第一种方法 用文本编辑器打开 themes/next 目录下的 _config.yml 文件，找到这段代码： Automatically Excerpt. Not recommend.Please use in the post to control excerpt accurately. 第二种方法 在你写 md 文章的时候，可以在内容中加上 ，这样首页和列表页展示的文章内容就是 之前的文字，而之后的就不会显示了。 效果 上面两种方式展示出来的效果是不一样的。 第一种修改 _config.yml 文件的效果是会格式化你文章的样式，直接把文字挤在一起显示，最后会有 … 标签云 位置：\\blog\\themes\\next\\layout\\page.swig原来： 修改成:(else) 与主题样式一致的 404 页面new page index.md 使用hexo-neat插件压缩页面以提高响应速度安装hexo-neat插件 npm install hexo-neat --save 在站点配置文件中添加配置 下边是我自己站点的相关配置，直接添加到站点配置文件_config.yml的末尾就可以。可以安装自己的需求去自定义那些文件需要压缩,主要是有些js可能压缩后会失效。 菜单上显示数目 在next的主题配置文件中找到下面内容，设置为true即可 Next主题代码块加入复制功能 在Next主题的配置文件，将copy_button打开 _congig.xml 修改侧边栏宽度 Hexo博客NexT主题下添加文章边框阴影效果themes/next/source/css/_custom/custom.styl 保留上次阅读时候的位置_config.xml 界面对齐方式_confi.xml"},{"title":"Hexo Next主题集成gitalk评论系统","date":"2019-07-13T14:04:14.000Z","url":"/Blog/2019/07/13/2019/190713_use_gitalk/","tags":["hexo"],"categories":["web"],"content":" 在我的Github+hexo搭建的网站中，使用github的gitalk评论系统。gitalk官方示例、官方文档 register app in github在Github注册一个application，点击创建参数说明：Application name： # 应用名称，随意Homepage URL： # 网站URL，如 description # 描述，随意Authorization callback URL：# 网站URL， 创建完成后记录好Clien信息Client ID、Client Secret 配置_config.yml在主题配置文件next/_config.yml中添加如下内容： 提交hexo cleanhexo ghexo deploy 以下在最新的Next代码库都已经添加，无需修改。 修改gitalk.swig文件（最新的Next版本已有）修改/layout/_third-party/comments/gitalk.swig文件，添加（最新的Next版本已有，无需修改）： comments.swig（最新的Next版本已有）修改/layout/_partials/comments.swig，添加内容如下，与前面的elseif同一级别上： 修改index.swig（最新的Next版本已有）修改layout/_third-party/comments/index.swig，在最后一行添加内容： 修改gitalk.styl（最新的Next版本已有）新建/source/css/_common/components/third-party/gitalk.styl文件，添加内容： third-party.styl（最新的Next版本已有）修改/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式： 常见问题GET  401 (Unauthorized)未找到相关的 Issues 进行评论未找到解决办法"},{"title":"C++ 编译和概述","date":"2019-07-11T13:01:33.000Z","url":"/Blog/2019/07/11/2019/190711_cpp-basic/","tags":["cpp"],"categories":["cpp"],"content":"g++编译工具linux编译的四个阶段在Linux下编译程序分为以下4个阶段： 预处理：编译处理宏定义等宏命令（eg:#define）——生成后缀为“.i”的文件 编译：将预处理后的文件转换成汇编语言——生成后缀为“.s”的文件 汇编：由汇编生成的文件翻译为二进制目标文件——生成后缀为“.o”的文件 连接：多个目标文件（二进制）结合库函数等综合成的能直接独立执行的执行文件——生成后缀为“.out”的文件 Linux下执行gcc与g++编译C++文件的差别 后缀为.c的，gcc把它当作是C程序（cc/cpp才判定为C++源程序），而g++当作是c++程序 gcc无法进行库文件的连接，即无法编译完成步骤4；而g++则能完整编译出可执行文件。（实质上，g++从步骤1-步骤3均是调用gcc完成，步骤4连接则由自己完成），如以下： Tips 后缀为.c的，gcc把它当作是C程序，而g++当作是c++程序；后缀为.cpp的，两者都会认为是c++程序，注意，虽然c++是c的超集，但是两者对语法的要求是有区别的。 编译阶段，g++会调用gcc，对于c++代码，两者是等价的，但是因为gcc命令不能自动和C＋＋程序使用的库联接，所以通常用g++来完成链接，为了统一起见，干脆编译/链接统统用g++了，这就给人一种错觉，好像cpp程序只能用g++似的。 安装使用g++ 除了code blocks, Vs code，可以更简单的使用gcc g++编译c和c++语言。安装：sudo apt-get install g++ 编译：g++ getinfo.cpp 生成a.out,使用./a.out执行或者g++ getinfo.cpp -o getinfo 生成getinfo，使用./getinfo执行 input and output cin &gt;&gt; carrots;从键盘输入数值赋给变量carrots cout &lt;&lt; &quot;Now you have&quot; &lt;&lt; carrots &lt;&lt; &quot; carrots.&quot; &lt;&lt; endl;使用cout拼接，endl换行。 类class 类是c++种面向对象编程OOP的核心概念之一 类是用户定义的一种数据类型 定义类，需要描述它能够表达什么信息和可对数据执行那哪些操作 类定义描述的是数据格式及其用法，而杜希昂是根据数据格式规范创建的实体 例如cout是一个ostream类对象，cin是一个istream类对象，都是在iostream中定义的。 函数 函数创建C++程序的模块，分为两种：有返回值的和无返回值的。例如： "},{"title":"Hexo Next主题集成Valine评论系统","date":"2019-07-09T14:04:14.000Z","url":"/Blog/2019/07/09/2019/190709_use_valine/","tags":["hexo"],"categories":["web"],"content":"注册leanCloud官网账号 为了避免混乱，可以和github使用同样的账号信息。 注册app邮箱验证后，注册一个APP应用：alonealive.github.com_appAPP设置的安全中心选上数据存储，以及添加绑定的web域名。 配置_config.yml 评论头像，点解链接查看 添加邮件提醒 参考：Valine评论系统中的邮件提醒设置 在邮件模板中，将重置密码的模板修改一下，邮件内容修改成： 保存后，提交代码发布网站测试。 去除标签页和类别页的分类在他们的suource目录下的md文件添加：comments: false 例如分类页面： "},{"title":"hexo的admin后台搭建","date":"2019-07-08T14:04:14.000Z","url":"/Blog/2019/07/08/2019/190708_hexo%E7%9A%84admin%E5%90%8E%E5%8F%B0%E6%90%AD%E5%BB%BA/","tags":["hexo"],"categories":["web"],"content":"hexo-admin配置后台 查看github源项目：  部署步骤 hexo的_config.xml配置 hexo-myadmin 查看文档：  使用方法 优点 使用轻量级的插件，而且简化了界面，编辑书写方便，功能便捷 待完善 关于图片的功能不够完善，需要输入地址，这对于同一个内网不通的机器不方便。 hexo-local-admin 文档：  使用方法： hexo-hey  使用方法npm install hexo-hey –save 优点可以粘贴图片 缺点部分文章没有编辑的UI，原因待查"},{"title":"Use hexo and github to build website","date":"2019-07-05T14:04:14.000Z","url":"/Blog/2019/07/05/2019/190705_use_hexo/","tags":["hexo"],"categories":["web"],"content":" 这篇文章主要是讲述如何结合hexo和github建站。使用hexo+github建站，相对减少开发时间和成本。相关Link： hexo官方文档、github建站Issue、我的网站 1. 安装node.js 2. 配置hexonpm install -g hexo-cli 3. 初始化hexo工作目录1. mkdir hexo //新建文件夹2. hexo init hexo //初始化hexo工作目录 note: 可能需要安装一些依赖，按照log的指示配置。 4. 编译运行登录1. hexo g //build2. hexo s //生成服务端 使用 即可查看结果。 本地测试也可以使用127.0.0.1:4000访问，或者内网IP:4000 方式访问（ipconfig查看）note: 如果有修改，可以使用hexo clean清除public等文件，再重新编译运行。结果文件是public文件夹。 5. 发布到github1. 在根目录的_config.yml（非theme主题文件下的配置文件）修改 2. 安装插件 npm install hexo-deployer-git –save 3. 发布到github4. 查看结果，例如我的网站wizzie.top note: 需要在你购买域名的万网进行域名绑定解析到github，please google by yourseflf。 6. 修改配置_config.yml1. 修改主题 推荐主题： 官方主题、Next套装主题（不需要安装基础依赖插件，简单配置使用） 例如下载Next主题仓库，然后在_config.yml中修改，编译后查看结果即可： 2. 修改博主信息 3. hexo文件夹结构 4. 主页配置（分页大小、排序规则） 5. 网站日期格式 7. 修改theme的_config.yml(Next主题)1. 主题选择 2. 菜单配置 3. LOGO修改 4. 页脚配置 5. 主页阅读全文设置 6. 评论系统配置文件提供了一些畅言、Valine(要指定next版本)、gitment、gitalk等，选择其中一个进行配置，配置方法见另一篇文章。 7. 右上角github 8. 创建page(menu标签) 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ： categories目录index.md修改date: 2019-05-08 22:40:04type: “categories” 编辑刚新建的页面,设置分类title: 分类date: 2019-06-01 12:39:04categories: Testing #分类名type: “categories” 9. 创建文章和草稿 10. 头像显示 11. 浏览进度按钮 12. 侧边栏社交图标 13. 侧边栏其余外部链接 14. 修改底部user文字 15. 修改加载进度条 16. 打开本地搜索 17. 文章顶部显示时间信息 18. 文章阅读量统计 8. 修改主题背景custom.styl修改source/_custom/custon.styl文件，详情可以查询其他博客案例。 9. 修改文章底部标签#在theme/layout/_macro/post.swig修改标签： 10. 修改文章链接样式在theme/next/source/css/custom/custom.styl添加以下内容： 效果图： note：注意此处的image是放在hexo/source/img/目录下，但是构建之后在public目录下img是一级目录。所以引用的时候不用加上souce/ hexo-admin配置后台 查看github源项目：  部署步骤 hexo的_config.xml配置"}]